{
hunk ./Makefile 3
-commithook: site
-
-sitebuild site: hakyll index.html
-	./hakyll build
-
-index.html:
-	ln -s README.html index.html
-
-siteclean: hakyll
-	./hakyll clean
-
-sitepreview: hakyll
-	./hakyll preview 8001
-
-hakyll: hakyll.hs
-	ghc --make -Wall hakyll.hs
+commithook: build
+
+build: site
+	rm -f index.html
+	./site build
+	ln -sf _site/index.html .
+
+preview: site
+	./site preview 8001
+
+site: site.hs
+	ghc -Wall site.hs
hunk ./Makefile 20
-	etags *.el *.hs *.markdown Makefile
+	ctags -e *.el *.hs *.markdown Makefile
hunk ./Makefile 25
+cleansite: site
+	./site clean
+
hunk ./hakyll.hs 1
-#!/usr/bin/env runhaskell
-{-
-hakyll build script for website
-
-ghc --make -Wall hakyll.hs
-./hakyll build
-etc.
--}
-
-import Control.Monad.Trans (liftIO)
-import System.Process (system)
-import Text.Printf
-import Text.Hakyll (hakyllWithConfiguration, defaultHakyllConfiguration)
-import Text.Hakyll.HakyllMonad (HakyllConfiguration(..))
-import Text.Hakyll.Render (renderChain, static)
-import Text.Hakyll.CreateContext (createPage)
-import Text.Pandoc (ParserState(..), WriterOptions(..), defaultParserState, defaultWriterOptions)
-
-siteurl :: String
-siteurl = "http://joyful.com/darcsum"
-
-main:: IO ()
-main = hakyllWithConfiguration cfg $ do
-    mapM_ renderpage
-      ["README.md"
-      ]
-    mapM_ static
-      [
-       -- "style.css"
-      ]
-    where
-      -- Render a page and symlink it to the current directory.
-      renderpage p = do
-        renderChain ["site.tmpl.hamlet"] $ createPage p
-        liftIO $ system $ printf "[ -f %s ] || ln -s _site/%s" p' p'
-            where p' = (reverse . dropWhile (/='.') . reverse) p ++ "html"
-
-      -- hakyll config with custom pandoc config
-      cfg :: HakyllConfiguration
-      cfg = (defaultHakyllConfiguration siteurl) {
-        -- additionalContext = Context, -- An additional context to use when rendering. This additional context is used globally.
-        -- siteDirectory = FilePath, -- Directory where the site is placed.
-        -- cacheDirectory = FilePath, -- Directory for cache files.
-        -- enableIndexUrl = False, -- Enable index links.
-        -- previewPollDelay = Int, -- Delay between polls in preview mode.
-        pandocParserState = defaultParserState {
-         -- stateParseRaw        = False, -- ^ Parse raw HTML and LaTeX?
-         -- stateParserContext   = NullState, -- ^ Inside list?
-         -- stateQuoteContext    = NoQuote,   -- ^ Inside quoted environment?
-         -- stateSanitizeHTML    = False,     -- ^ Sanitize HTML?
-         -- stateKeys            = [],        -- ^ List of reference keys
-         -- stateNotes           = [],        -- ^ List of notes
-         -- stateTabStop         = 4,         -- ^ Tab stop
-         -- stateStandalone      = False,     -- ^ Parse bibliographic info?
-         -- stateTitle           = [],        -- ^ Title of document
-         -- stateAuthors         = [],        -- ^ Authors of document
-         -- stateDate            = [],        -- ^ Date of document
-         -- stateStrict          = False,     -- ^ Use strict markdown syntax?
-         stateSmart           = False     -- ^ Use smart typography?
-         -- stateLiterateHaskell = False,     -- ^ Treat input as literate haskell
-         -- stateColumns         = 80,        -- ^ Number of columns in terminal
-         -- stateHeaderTable     = [],        -- ^ Ordered list of header types used
-         -- stateIndentedCodeClasses = []     -- ^ Classes to use for indented code blocks
-        },
-        pandocWriterOptions = defaultWriterOptions {
-                                  -- so we can have a TOC:
-         writerStandalone       = True, -- ^ Include header and footer
-         writerTemplate         = pandocTemplate, -- ^ Template to use in standalone mode
-         -- writerVariables        = [],    -- ^ Variables to set in template
-         -- writerIncludeBefore    = "",    -- ^ Text to include before the body
-         -- writerIncludeAfter     = "",    -- ^ Text to include after the body
-         -- writerTabStop          = 4,     -- ^ Tabstop for conversion btw spaces and tabs
-         writerTableOfContents  = False -- ^ Include table of contents
-         -- writerS5               = False, -- ^ We're writing S5
-         -- writerXeTeX            = False, -- ^ Create latex suitable for use by xetex
-         -- writerHTMLMathMethod   = PlainMath, -- ^ How to print math in HTML
-         -- writerIgnoreNotes      = False,     -- ^ Ignore footnotes (used in making toc)
-         -- writerIncremental      = False,     -- ^ Incremental S5 lists
-         -- writerNumberSections   = False,     -- ^ Number sections in LaTeX
-         -- writerStrictMarkdown   = False,     -- ^ Use strict markdown syntax
-         -- writerReferenceLinks   = False,     -- ^ Use reference links in writing markdown, rst
-         -- writerWrapText         = True,      -- ^ Wrap text to line length
-         -- writerLiterateHaskell  = False,     -- ^ Write as literate haskell
-         -- writerEmailObfuscation = JavascriptObfuscation, -- ^ How to obfuscate emails
-         -- writerIdentifierPrefix = "",                    -- ^ Prefix for section & note ids in HTML
-        }
-       }
-
-      -- override pandoc's body html template to ensure the TOC can be enabled
-      pandocTemplate = unlines
-          [ "$if(title)$"
-          , "<h1 class=\"title\">$title$</h1>"
-          , "$endif$"
-          , "$for(include-before)$"
-          , "$include-before$"
-          , "$endfor$"
-          , "$if(toc)$"
-          , "$toc$"
-          , "$endif$"
-          , "$body$"
-          , "$for(include-after)$"
-          , "$include-after$"
-          , "$endfor$"
-          ]
rmfile ./hakyll.hs
addfile ./site.hs
hunk ./site.hs 1
+{-# LANGUAGE OverloadedStrings #-}
+import Hakyll
+
+main :: IO ()
+main = hakyll $ do
+    -- match "images/*" $ do
+    --     route   idRoute
+    --     compile copyFileCompiler
+
+    -- match "css/*" $ do
+    --     route   idRoute
+    --     compile compressCssCompiler
+
+    match "*.tmpl.html" $ compile templateCompiler
+
+    match "README.md" $ do
+        route $ constRoute "index.html"
+        compile $ pandocCompiler
+            >>= loadAndApplyTemplate "site.tmpl.html" defaultContext
+            >>= relativizeUrls
hunk ./site.tmpl.hamlet 1
-!!!
-<html
- <head
-  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
-  <title>#{title}
-  <style
-   body { padding:1em 10% 1em 12%; background-color:white; color:black; }
-
-   h1, h2 { position:relative; left:-0.5em; margin-top:1.5em;}
-
-   pre { background-color:black; color:white; padding:0.5em 1em; display:inline-block; }
-
-   h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {color:black; text-decoration:none; }
-
-   p code { font-weight:bold; }
-
-   #TOC {
-    float:right;
-    margin:0 0 1em 1em;
-    border:thin solid #ddd;
-    background-color:#f0f0f0;
-   }
-
-   #TOC ul {
-    list-style-type: none;
-    padding:0 1em 0 1em;
-   }
-
- <body
-  <h1>#{title}
-  #{body}
rmfile ./site.tmpl.hamlet
addfile ./site.tmpl.html
hunk ./site.tmpl.html 1
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
+    <head>
+        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
+        <title>$title$</title>
+        <link rel="stylesheet" type="text/css" href="/css/default.css" />
+		<style>
+		 body { padding:1em 10% 1em 12%; background-color:white; color:black; }
+		 h1, h2 { position:relative; left:-0.5em; margin-top:1.5em;}
+		 pre { background-color:black; color:white; padding:0.5em 1em; display:inline-block; }
+		 h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {color:black; text-decoration:none; }
+		 p code { font-weight:bold; }
+		 #TOC {
+		  float:right;
+		  margin:0 0 1em 1em;
+		  border:thin solid #ddd;
+		  background-color:#f0f0f0;
+		 }
+		 #TOC ul {
+		  list-style-type: none;
+		  padding:0 1em 0 1em;
+		 }
+		</style>
+    </head>
+    <body>
+		<h1>$title$</h1>
+		$body$
+    </body>
+</html>
hunk ./site.tmpl.html 1
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
-"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
-    <head>
-        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
-        <title>$title$</title>
-        <link rel="stylesheet" type="text/css" href="/css/default.css" />
-		<style>
-		 body { padding:1em 10% 1em 12%; background-color:white; color:black; }
-		 h1, h2 { position:relative; left:-0.5em; margin-top:1.5em;}
-		 pre { background-color:black; color:white; padding:0.5em 1em; display:inline-block; }
-		 h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {color:black; text-decoration:none; }
-		 p code { font-weight:bold; }
-		 #TOC {
-		  float:right;
-		  margin:0 0 1em 1em;
-		  border:thin solid #ddd;
-		  background-color:#f0f0f0;
-		 }
-		 #TOC ul {
-		  list-style-type: none;
-		  padding:0 1em 0 1em;
-		 }
-		</style>
-    </head>
-    <body>
-		<h1>$title$</h1>
-		$body$
-    </body>
-</html>
rmfile ./site.tmpl.html
addfile ./site.tmpl.hamlet
hunk ./site.tmpl.hamlet 1
+!!!
+<html
+ <head
+  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
+  <title>#{title}
+  <style
+   body { padding:1em 10% 1em 12%; background-color:white; color:black; }
+
+   h1, h2 { position:relative; left:-0.5em; margin-top:1.5em;}
+
+   pre { background-color:black; color:white; padding:0.5em 1em; display:inline-block; }
+
+   h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {color:black; text-decoration:none; }
+
+   p code { font-weight:bold; }
+
+   #TOC {
+    float:right;
+    margin:0 0 1em 1em;
+    border:thin solid #ddd;
+    background-color:#f0f0f0;
+   }
+
+   #TOC ul {
+    list-style-type: none;
+    padding:0 1em 0 1em;
+   }
+
+ <body
+  <h1>#{title}
+  #{body}
hunk ./site.hs 1
-{-# LANGUAGE OverloadedStrings #-}
-import Hakyll
-
-main :: IO ()
-main = hakyll $ do
-    -- match "images/*" $ do
-    --     route   idRoute
-    --     compile copyFileCompiler
-
-    -- match "css/*" $ do
-    --     route   idRoute
-    --     compile compressCssCompiler
-
-    match "*.tmpl.html" $ compile templateCompiler
-
-    match "README.md" $ do
-        route $ constRoute "index.html"
-        compile $ pandocCompiler
-            >>= loadAndApplyTemplate "site.tmpl.html" defaultContext
-            >>= relativizeUrls
rmfile ./site.hs
addfile ./hakyll.hs
hunk ./hakyll.hs 1
+#!/usr/bin/env runhaskell
+{-
+hakyll build script for website
+
+ghc --make -Wall hakyll.hs
+./hakyll build
+etc.
+-}
+
+import Control.Monad.Trans (liftIO)
+import System.Process (system)
+import Text.Printf
+import Text.Hakyll (hakyllWithConfiguration, defaultHakyllConfiguration)
+import Text.Hakyll.HakyllMonad (HakyllConfiguration(..))
+import Text.Hakyll.Render (renderChain, static)
+import Text.Hakyll.CreateContext (createPage)
+import Text.Pandoc (ParserState(..), WriterOptions(..), defaultParserState, defaultWriterOptions)
+
+siteurl :: String
+siteurl = "http://joyful.com/darcsum"
+
+main:: IO ()
+main = hakyllWithConfiguration cfg $ do
+    mapM_ renderpage
+      ["README.md"
+      ]
+    mapM_ static
+      [
+       -- "style.css"
+      ]
+    where
+      -- Render a page and symlink it to the current directory.
+      renderpage p = do
+        renderChain ["site.tmpl.hamlet"] $ createPage p
+        liftIO $ system $ printf "[ -f %s ] || ln -s _site/%s" p' p'
+            where p' = (reverse . dropWhile (/='.') . reverse) p ++ "html"
+
+      -- hakyll config with custom pandoc config
+      cfg :: HakyllConfiguration
+      cfg = (defaultHakyllConfiguration siteurl) {
+        -- additionalContext = Context, -- An additional context to use when rendering. This additional context is used globally.
+        -- siteDirectory = FilePath, -- Directory where the site is placed.
+        -- cacheDirectory = FilePath, -- Directory for cache files.
+        -- enableIndexUrl = False, -- Enable index links.
+        -- previewPollDelay = Int, -- Delay between polls in preview mode.
+        pandocParserState = defaultParserState {
+         -- stateParseRaw        = False, -- ^ Parse raw HTML and LaTeX?
+         -- stateParserContext   = NullState, -- ^ Inside list?
+         -- stateQuoteContext    = NoQuote,   -- ^ Inside quoted environment?
+         -- stateSanitizeHTML    = False,     -- ^ Sanitize HTML?
+         -- stateKeys            = [],        -- ^ List of reference keys
+         -- stateNotes           = [],        -- ^ List of notes
+         -- stateTabStop         = 4,         -- ^ Tab stop
+         -- stateStandalone      = False,     -- ^ Parse bibliographic info?
+         -- stateTitle           = [],        -- ^ Title of document
+         -- stateAuthors         = [],        -- ^ Authors of document
+         -- stateDate            = [],        -- ^ Date of document
+         -- stateStrict          = False,     -- ^ Use strict markdown syntax?
+         stateSmart           = False     -- ^ Use smart typography?
+         -- stateLiterateHaskell = False,     -- ^ Treat input as literate haskell
+         -- stateColumns         = 80,        -- ^ Number of columns in terminal
+         -- stateHeaderTable     = [],        -- ^ Ordered list of header types used
+         -- stateIndentedCodeClasses = []     -- ^ Classes to use for indented code blocks
+        },
+        pandocWriterOptions = defaultWriterOptions {
+                                  -- so we can have a TOC:
+         writerStandalone       = True, -- ^ Include header and footer
+         writerTemplate         = pandocTemplate, -- ^ Template to use in standalone mode
+         -- writerVariables        = [],    -- ^ Variables to set in template
+         -- writerIncludeBefore    = "",    -- ^ Text to include before the body
+         -- writerIncludeAfter     = "",    -- ^ Text to include after the body
+         -- writerTabStop          = 4,     -- ^ Tabstop for conversion btw spaces and tabs
+         writerTableOfContents  = False -- ^ Include table of contents
+         -- writerS5               = False, -- ^ We're writing S5
+         -- writerXeTeX            = False, -- ^ Create latex suitable for use by xetex
+         -- writerHTMLMathMethod   = PlainMath, -- ^ How to print math in HTML
+         -- writerIgnoreNotes      = False,     -- ^ Ignore footnotes (used in making toc)
+         -- writerIncremental      = False,     -- ^ Incremental S5 lists
+         -- writerNumberSections   = False,     -- ^ Number sections in LaTeX
+         -- writerStrictMarkdown   = False,     -- ^ Use strict markdown syntax
+         -- writerReferenceLinks   = False,     -- ^ Use reference links in writing markdown, rst
+         -- writerWrapText         = True,      -- ^ Wrap text to line length
+         -- writerLiterateHaskell  = False,     -- ^ Write as literate haskell
+         -- writerEmailObfuscation = JavascriptObfuscation, -- ^ How to obfuscate emails
+         -- writerIdentifierPrefix = "",                    -- ^ Prefix for section & note ids in HTML
+        }
+       }
+
+      -- override pandoc's body html template to ensure the TOC can be enabled
+      pandocTemplate = unlines
+          [ "$if(title)$"
+          , "<h1 class=\"title\">$title$</h1>"
+          , "$endif$"
+          , "$for(include-before)$"
+          , "$include-before$"
+          , "$endfor$"
+          , "$if(toc)$"
+          , "$toc$"
+          , "$endif$"
+          , "$body$"
+          , "$for(include-after)$"
+          , "$include-after$"
+          , "$endfor$"
+          ]
hunk ./Makefile 25
-cleansite: site
-	./site clean
-
hunk ./Makefile 20
-	ctags -e *.el *.hs *.markdown Makefile
+	etags *.el *.hs *.markdown Makefile
hunk ./Makefile 3
-commithook: build
-
-build: site
-	rm -f index.html
-	./site build
-	ln -sf _site/index.html .
-
-preview: site
-	./site preview 8001
-
-site: site.hs
-	ghc -Wall site.hs
+commithook: site
+
+sitebuild site: hakyll index.html
+	./hakyll build
+
+index.html:
+	ln -s README.html index.html
+
+siteclean: hakyll
+	./hakyll clean
+
+sitepreview: hakyll
+	./hakyll preview 8001
+
+hakyll: hakyll.hs
+	ghc --make -Wall hakyll.hs
}
