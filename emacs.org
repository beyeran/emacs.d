#+TITLE: emacs.org
#+AUTHOR: Andre Pascal Beyer
#+DATE: 2013-12-20

* Globals, Functions and Settings
** Globals
#+begin_src emacs-lisp :tangle emacs.el
(require 'eldoc)

(prefer-coding-system 'utf-8)

(setq user-mail-address "beyeran@gmail.com")
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-message t)

(defun add-to-load-path (path)
  "Wrapps the ADD-TO-LIST function for the LOAD-PATH variable"
  (add-to-list 'load-path path))

(defun add-theme (path)
  "Wrapps the ADD-TO-LIST function for the CUSTOM-THEME-LOAD-PATH variable"
  (add-to-list 'custom-theme-load-path (format "~/.emacs.d/color-theme/%s"
					       path)))

(defun add-to-alist (suffix-mode-list)
  "Wrapps the ADD-TO-LIST function for the AUTO-MODE-ALIST variable"
  (add-to-list 'auto-mode-alist suffix-mode-list))

(mapc #'load (directory-files "~/.emacs.d/src/" t "\\.el$"))

(add-to-load-path "~/.emacs.d/src/")
#+end_src
** Macros
#+begin_src emacs-lisp :tangle src/functions.el
(defmacro with-module (symbol name-string &rest body)
  `(condition-case nil
       (progn
         (add-to-load-path  ,(format "%s%s" *modules-dir* name-string))
         (autoload ',symbol ,name-string ,name-string t)
         ,@body)
     
     (error (message (format " => problem loading %s" ',symbol))
            nil)))

(defmacro with-library (symbol &rest body)
  `(condition-case nil
       (progn
         (add-to-load-path ,(format "%s%s" *modules-dir* symbol))
         (require ',symbol)
         ,@body)))
#+end_src
** Settings
#+begin_src emacs-lisp :tangle src/settings.el
(put 'with-module 'lisp-indent-function 1)

(defun pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))

(font-lock-add-keywords 'emacs-lisp-mode
                        '(("(\\(lambda\\)\\>" (0 (prog1 ()
                                              (compose-region (match-beginning 1)
                                                              (match-end 1)
                                                              λ))))))

(font-lock-add-keywords 'python
                        '(("lambda" (0 (prog1 ()
                                         (compose-region (match-beginning 1)
                                                         (match-end 1)
                                                         λ))))))
#+end_src
* Modes
** darcs
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; darcsum
;;

(with-library darcsum)
#+end_src
** magit
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; magit
;;

;; (eval-after-load 'info
;;  '(progn (info-initialize)
;;          (add-to-list 'Info-directory-list "~/.emacs.d/modules/magit/")))

;; (with-library git-commit-mode)
;; (with-library magit)

#+end_src
** paredit
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; paredit
;;
(defun add-paredit (mode)
  "Wrapps the function used for adding paredit to mode hooks"
  (add-hook mode #'enable-paredit-mode))

(with-module enable-paredit-mode "paredit"
             (add-paredit 'emacs-lisp-mode)
             (add-paredit 'eval-expression-minibuffer-setup-hook)
             (add-paredit 'ielm-mode-hook)
             (add-paredit 'lisp-mode-hook)
             (add-paredit 'lisp-interaction-mode-hook)
             (add-paredit 'scheme-mode-hook)
             (add-paredit 'python-mode-hook))

(eldoc-add-command
 'paredit-backward-delete
 'paredit-close-round)

#+end_src
** xml-parse
#+begin_src emacs-lisp :tangle src/modules
;;
;; xml-parse
;;

;; (with-library xml-parse)

#+end_src
** ruby
#+begin_src emacs-lisp :tangle src/modules
;;
;; inf-ruby
;;

(with-library inf-ruby
              (define-key ruby-mode-map (kbd "C-c C-c") 'ruby-send-definition)
              (define-key ruby-mode-map (kbd "C-c C-r") 'ruby-send-region)
              (define-key ruby-mode-map (kbd "C-c C-b") 'ruby-send-buffer))
#+end_src
** powerline
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; powerline
;;
;; (with-library powerline
;;              (powerline-center-theme))

#+end_src
** org-settings
*** ess
#+begin_src emacs-lisp :tangle src/myorg.el
;;
;; ess
;;
(add-to-list 'load-path "~/.emacs.d/modules/ess-site/lisp")
(require 'ess-site)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (python . t)
   (latex . t)
   (haskell . t)
   (emacs-lisp . t)
   (ruby . t)
   (sh . t)
   (lisp . t)
   (octave . t)
   (octave . t)))

(add-hook 'inferior-octave-mode-hook
          '(lambda ()
             (setq inferior-octave-program
                   "C:\\cygwin\\usr\\bin\\octave.exe")))

;; (setq org-babel-R-command "c:/Program\ Files/R/R-3.0.2/bin/x64/Rterm.exe --slave --no-save")

;;
;; latex
;;
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(server-start)

#+end_src
*** org latex stuff
#+begin_src emacs-lisp :tangle src/myorg.el
(require 'ox-latex)
(require 'ox-beamer)

(unless (boundp 'org-export-latex-classes)
  (setq org-export-latex-classes nil))

(add-to-list 'org-latex-classes
            '("beamer"
              "\\documentclass\[presentation\]\{beamer\}"
              ("\\section\{%s\}" . "\\section*\{%s\}")
              ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
              ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))

(add-to-list 'org-latex-classes
             '("membeamer_ger"
               "\\documentclass[10pt,ngerman]{beamer}
\\definecolor{darkgrey}{rgb}{0.7 0.7 0.7}
\\definecolor{grey}{rgb}{0.9 0.9 0.9}
\\usetheme{Berlin}
\\usecolortheme{dove}
\\setbeamercolor{title}{fg=white,bg=black}
\\setbeamertemplate{blocks}[shadow=true]
\\setbeamercolor{block title}{bg=darkgrey}
\\setbeamercolor{block body}{bg=grey}
%% \\setbeamerfont{title}{family=m}
%% \\setbeamerfont{frametitle}{family=m}

%% \\newcommand{\\changefont}[3]{\\fontfamily{#1}\\fontseries{#2}\\fontshape{#3}\\selectfont}

% footer
\\makeatletter
\\setbeamertemplate{footline}
{
  \\leavevmode%
  \\hbox{%
    \\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=2.25ex,dp=1ex,center]{bgcolor}%
    \\usebeamerfont{author in ;; head/foot}\\insertshortauthor%~~\\beamer@ifempty{\\insertshortinstitute}{}{(\\insertshortinstitute)}
  \\end{beamercolorbox}%
  \\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=2.25ex,dp=1ex,center]{bgcolor}%
  \\usebeamerfont{title in head/foot}\\insertshortdate{}%\\insertshorttitle
\\end{beamercolorbox}%
\\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=2.25ex,dp=1ex,right]{bgcolor}%
\\usebeamerfont{date in head/foot}%\\insertshortdate{}\\hspace*{2em}
\\insertframenumber{} / \\inserttotalframenumber\\hspace*{2ex} 
\\end{beamercolorbox}}%
\\vskip0pt%
}
\\makeatother

\\beamertemplatenavigationsymbolsempty

\\setbeamercolor{bgcolor}{fg=white,bg=black}
\\setbeamercolor*{palette tertiary}{fg=white,bg=black}
\\setbeamercolor{frametitle}{fg=white,bg=black}

\\makeatother"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("membeamer"
               "\\documentclass[10pt,english,ngerman]{beamer}
\\definecolor{darkgrey}{rgb}{0.7 0.7 0.7}
\\definecolor{grey}{rgb}{0.9 0.9 0.9}
\\usetheme{Berlin}
\\usecolortheme{dove}
\\setbeamercolor{title}{fg=white,bg=black}
\\setbeamertemplate{blocks}[shadow=true]
\\setbeamercolor{block title}{bg=darkgrey}
\\setbeamercolor{block body}{bg=grey}
%% \\setbeamerfont{title}{family=\rm}
%% \\setbeamerfont{frametitle}{family=\rm}

%% \\newcommand{\\changefont}[3]{\\fontfamily{#1}\\fontseries{#2}\\fontshape{#3}\\selectfont}

% footer
\\makeatletter
\\setbeamertemplate{footline}
{
  \\leavevmode%
  \\hbox{%
    \\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=2.25ex,dp=1ex,center]{bgcolor}%
    \\usebeamerfont{author in ;; head/foot}\\insertshortauthor%~~\\beamer@ifempty{\\insertshortinstitute}{}{(\\insertshortinstitute)}
  \\end{beamercolorbox}%
  \\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=2.25ex,dp=1ex,center]{bgcolor}%
  \\usebeamerfont{title in head/foot}\\insertshortdate{}%\\insertshorttitle
\\end{beamercolorbox}%
\\begin{beamercolorbox}[wd=.333333\\paperwidth,ht=2.25ex,dp=1ex,right]{bgcolor}%
\\usebeamerfont{date in head/foot}%\\insertshortdate{}\\hspace*{2em}
\\insertframenumber{} / \\inserttotalframenumber\\hspace*{2ex} 
\\end{beamercolorbox}}%
\\vskip0pt%
}
\\makeatother

\\beamertemplatenavigationsymbolsempty

\\setbeamercolor{bgcolor}{fg=white,bg=black}
\\setbeamercolor*{palette tertiary}{fg=white,bg=black}
\\setbeamercolor{frametitle}{fg=white,bg=black}

\\makeatother"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


(defun org-export-latex-no-toc (depth)  
  (when depth
    (format "%% Org-mode is exporting headings to %s levels.\n"
            depth)))

(setq org-export-latex-format-toc-function 'org-export-latex-no-toc)

(add-to-list 'org-latex-classes
             '("memarticle"
               "\\documentclass[11pt,oneside,article]{memoir}\n
\\usepackage[left=2.5cm,right=2.5cm,top=2cm,bottom=2cm]{geometry}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("memhandout"
               "\\documentclass[10pt,twocolumn,landscape]{memoir}
\\usepackage[noxcolor]{beamerarticle}
\n\\usepackage[top=0.5cm,left=1cm,bottom=1cm,right=1cm]{geometry}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("mempaper"
               "\\documentclass[11pt,oneside,article]{memoir}\n % \\input{vc} % vc package"
               ("\\section{%s}" . "\\section{%s}")
               ("\\subsection{%s}" . "\\subsection{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection{%s}")
               ("\\paragraph{%s}" . "\\paragraph{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph{%s}")))

(add-to-list 'org-latex-classes
             '("membook"
               "\\documentclass[11pt,oneside]{memoir}\n % \\input{vc} % vc package"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(add-hook 'LaTeX-mode-hook (lambda ()
                             (push 
                              '("Latexmk" "latexmk -xelatex %s" TeX-run-TeX nil t
                                :help "Run Latexmk on file")
                              '("%(-PDF)"
                                (lambda ()
                                  (if (and (not TeX-Omega-mode)
                                           (or TeX-PDF-mode TeX-DVI-via-PDFTeX))
                                      "-xelatex" "")))
                              TeX-command-list)))

(custom-set-variables
 '(TeX-source-correlate-method (quote synctex))
 '(TeX-source-correlate-mode t)
 '(TeX-source-correlate-start-server t)
 '(TeX-view-program-list (quote (("Acrobat Reader" "c:/Program Files (x86)/Adobe/Reader ;; 11.0/Reader/AcroRd32.exe")))))

(custom-set-faces)

;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
;; but adapted to use latexmk 4.22 or higher.  
(defun my-auto-tex-cmd ()
  "When exporting from .org with latex, automatically run latex,
                     pdflatex, or xelatex as appropriate, using latexmk."
  (let ((texcmd)))
  ;; default command: pdflatex 
  (setq texcmd "latexmk -pdflatex -synctex=1 --shell-escape -pdf %f")        
  ;; pdflatex -> .pdf
  (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
      (setq texcmd "latexmk -xelatex -synctex=1 --shell-escape -pdf %f"))
  ;; xelatex -> .pdf
  (if (string-match "LATEX_CMD: xelatex" (buffer-string))
      (setq texcmd "latexmk -xelatex -synctex=1 --shell-escape -pdf %f"))
  ;; LaTeX compilation command
  (setq org-latex-to-pdf-process (list texcmd)))

(add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)
  
;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
(setq org-export-latex-packages-alist
      '(("" "graphicx" t)
        ("" "longtable" nil)
        ("" "float" )))
  
;; Custom packages
(defun my-auto-tex-parameters ()
  "Automatically select the tex packages to include. See https://github.com/kjhealy/latex-custom-kjh for ;; the support files included here."
  ;; default packages for ordinary latex or pdflatex export
  (setq org-export-latex-default-packages-alist
        '(("AUTO" "inputenc" t)
          ("minted,minion" "org-preamble-xelatex" t)))
  ;; Packages to include when xelatex is used
  (if (string-match "LATEX_CMD: xelatex" (buffer-string))
      (setq org-export-latex-default-packages-alist
            '(("minted" "org-preamble-xelatex" t) ))))

(add-hook 'org-export-latex-after-initial-vars-hook 
          'my-auto-tex-parameters)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(LaTeX-XeTeX-command "latexmk -xelatex -synctex=1")
 '(TeX-engine (quote xetex))
 '(text-mode-hook (quote (text-mode-hook-identify))))

#+end_src
*** paper
#+begin_src emacs-lisp :tangle src/myorg.el
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Reftex
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'reftex)

(setq reftex-default-bibliography
      '("G:\\Dropbox\\literature\\master.bib"))
;; I only use this, because the former does not seem to work somehow
(setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource")) 

(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name) (file-exists-p (buffer-file-name))
       (progn
         ;; enable auto-revert-mode to update reftex when bibtex file changes on disk
         (global-auto-revert-mode t)
         (reftex-parse-all)
         ;; add a custom reftex cite format to insert links
         (reftex-set-cite-format
          '((?c . (?c . "\\cite{ %l}"))
            (?b . "[[bib:%l][%l-bib]]")
            (?p . "** [[papers:%l][%l]]: %t \n"))))))

(define-key org-mode-map (kbd "C-c )") 'reftex-citation)
(define-key org-mode-map (kbd "C-c (") 'org-reftex-citation)
(add-hook 'org-mode-hook 'org-mode-reftex-setup)

(setq org-link-abbrev-alist
      '(("bib" . "G:/Dropbox/literature/master.bib::%s")
        ("papers" . "G:/Dropbox/literature/papers/%s.pdf")))
;; adding auctex
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)

(setq reftex-plug-inoto-AUCTeX t)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)

;; Look
(add-hook 'latex-mode-hook 
          (lambda ()
            (set-face-attribute 'font-latex-sectioning-5-face nil :inherit nil :foreground "#b58900")
            (set-face-attribute 'font-latex-sectioning-0-face nil :height 3)
            (set-face-attribute 'font-latex-sectioning-1-face nil :height 2)
            (set-face-attribute 'font-latex-sectioning-2-face nil :height 1.5)
            (set-face-attribute 'font-latex-sectioning-3-face nil :height 1.2)
            (set-face-attribute 'font-latex-sectioning-4-face nil :height 1.0)))

 (add-hook 'org-mode-hook 
           (lambda ()
             (set-face-attribute 'org-level-1 nil :height 1.5)
             (set-face-attribute 'org-level-2 nil :height 1.2)
             (set-face-attribute 'org-level-3 nil :height 1.1)
             (set-face-attribute 'org-level-4 nil :height 1.1)
             (set-face-attribute 'org-level-5 nil :height 1.1)))
#+end_src

*** organize
#+begin_src emacs-lisp :tangle "src/organize.el"
;;
;; using org mode as organzier
;;
(add-to-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

(defvar *todo* "~/Dropbox/org/org/todo.org")
(defvar *notes* "~/Dropbox/org/org/notes.org")
(defvar *calendar* "~/Dropbox/org/org/calendar.org")

(setq org-agenda-files (list *todo* *calendar*))

(setq org-capture-templates
        '(("t" "Task" entry (file+headline *todo* "Inbox")
           "* TODO %? \n  %i" :clock-in t :clock-resume t)
          ("n" "Retailiate" entry (file+headline *todo* "Retailiate")
           "* LOOK %? \n  %i" :clock-in t :clock-resume t)
          ("r" "Read" entry (file+headline *todo* "Read")
           "* READ %? \n  %i" :clock-in t :clock-resume t)
          ("j" "Notes" entry (file+datatree *notes*)
           "* %?\nEntered on %U\n  %i")
          ("d" "Dates" entry (file+datatree *calendar*)
           "* DATE %? \n  %i" :clock-in t :clock-resume t)))

(setq org-hide-leading-stars 'hidestars)
(setq org-return-follows-link t)
(setq org-completion-use-ido t)
(setq org-refile-use-outline-path (quote file))
(setq org-outline-path-complete-in-steps t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
(setq org-drawers (quote ("PROPERTIES" "CLOCKTABLE" "LOGBOOK" "CLOCK")))
(setq org-use-fast-todo-selection t)
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s!)" "FINISHED(s!)" "LOOK(n)" "SEEN(m!)" 
                  "READ(r)" "DONE(q!)" "DATE(d)" "DELEGATED(c)" "CANCELED(b)")))
(setq org-todo-keyword-faces
      '(("TODO"  . (:foreground "#b70101" :weight bold))
        ("STARTED"  . (:foreground "#b70101" :weight bold))
        ("LOOK"  . (:foreground "sienna" :weight bold))
        ("SEEN"  . (:foreground "blue" :weight bold))
        ("READ"  . (:foreground "orange" :weight bold))
        ("DATE"  . (:foreground "orange" :weight bold))
        ("DONE"  . (:foreground "forestgreen" :weight bold))
        ("DELEGATED"  . (:foreground "forestgreen" :weight bold))
        ("CANCELED"  . shadow)))

;;
;; agenda
;;
;;(add-hook 'org-agenda-mode-hook '(lambda () (h1-line-mode 1)))
(setq org-agenda-format-date 
 "%Y-%m-%d ---------------------------------------------------------------------")
(setq org-agenda-fontify-priorities 
      '((65 (:foreground "Red")) 
        (66 (:foreground "Blue")) 
        (67 (:foreground "Darkgreen"))))

(setq org-agenda-date-weekend '(:foreground "Yellow" :weight bold))

(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-span 1)


#+end_src
*** mobile org
#+begin_src emacs-lisp :tangle src/myorg.el
;; Set to the location of your Org files on your local system
(setq org-directory "~/Dropbox/org/org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/org/mobile")
;; Set to the files (or directory of files) you want sync'd
(setq org-agenda-files '("~/Dropbox/org/org"))
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Dropbox/org/org/from-mobile.org")

#+end_src
** languages
*** perl
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; perl
;;

;; (with-library sepia
;;               (setq sepia-perl5lib (list (expand-file-name "~/.emacs.d/modules/sepia/lib")))
;;               (defalias 'perl-mode 'sepia-mode))

#+end_src
*** chicken
#+begin_src emacs-lisp :tangle src/modules.el
(require 'autoinsert)
(add-hook 'find-file-hooks 'auto-insert)

(setq auto-insert-alist
      '(("\\.scm" .
         (insert "#!/usr/bin/csi -s\n\n"))))

(setf scheme-program-name "csi")
#+end_src
*** haskell
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; haskell mode
;;
(with-library haskell-mode
              (require 'haskell-mode-autoloads)
              (add-to-list 'Info-default-directory-list "~/.emacs.d/modules/haskell-mode/")

              (add-to-alist '("\\.\\(hs\\|lhs\\)$" . org-mode))

              (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))


#+end_src
*** lisp
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; lisp
;;
(setq inferior-lisp-program (case system-type
                                  ((windows-nt cygwin) "c:/ccl/wx86cl -K utf-8")))

#+end_src
*** clojure
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; clojure
;;

(with-library clojure-mode
              (add-to-alist '("\\.\\(clj\\)$" . clojure-mode)))

;;
;; needed for cider
;;
(with-library epl)
(with-library dash)
(with-library pkg-info)

(with-library cider
              (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
              (setq nrepl-hide-special-buffers t)
              (setq cider-repl-pop-to-buffer-on-connect nil)
              (setq cider-repl-results-prefix ";; => "))

#+end_src
*** julia
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; julia
;;

(with-library julia-mode)

#+end_src

*** APL
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; APL
;;

(add-to-list 'load-path "~/.emacs.d/modules/apl")

(when (require 'gnu-apl-mode nil t)
  (dolist (hook '(gnu-apl-mode-hook gnu-apl-interactive-mode-hook))
    (add-hook hook (lambda ()
                     (eldoc-mode)
                     (setq buffer-face-mode-face 'gnu-apl-default)
                     (buffer-face-mode))))
  (set-face-attribute 'gnu-apl-default nil
                      :family "DejaVu Sans Mono")
  (add-to-list 'auto-mode-alist '("\\.apl$" . gnu-apl-mode)))

(setq gnu-apl-show-keymap-on-startup t)

(add-hook 'gnu-apl-interactive-mode-hook 
          '(lambda ()
             (setq buffer-face-mode 'gnu-apl-default)
             (buffer-face-mode)))

#+end_src
** jedi
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; jedi
;;

(with-library popup)
(with-library auto-complete)
(with-library ctable)
(with-library deferred)
(with-library epc)

(with-library jedi
              (add-hook 'python-mode-hook 'jedi:setup)
              (setq jedi:setup-keys t)
              (setq jedi:complet-on-dot t))
#+end_src

** iBuffer
#+begin_src emacs-lisp :tangle src/modules.el
;;;;
;;;; ibuffer
;;;;

(require 'ibuffer nil t)

(setq ibuffer-show-empty-filter-groups nil
      ibuffer-expert t)

(setq ibuffer-saved-filter-groups
      '(("default"
         ("elisp" (or (name . "\\.el$")
                      (mode . emacs-lisp-mode)))
         ("cl" (or (name . "\\.lisp$")
                   (name . "\\.asdf$")
                   (mode . lisp-mode)
                   (mode . slime-mode)))
         ("scheme" (or (name . "\\.scm$")
                       (mode . scheme-mode)
                       (mode . geiser-mode)))
         ("clojure" (or (name . "\\.clj$")
                        (mode . clojure-mode)))
         ("python" (or (name . "\\.py$")
                       (mode . python-mode)
                       (mode . python-2-mode)
                       (mode . python-3-mode)))
         ("ruby" (or (name . "\\.rb$")))
         ("perl" (mode . cperl-mode))
         ("shell" (or (name . "\\.sh$")
                      (name . "^\\.zshrc$")
                      (name . "^\\.profile")
                      (mode . shell-script-mode)))
         ("R" (name . "\\.R$"))
         ("julia" (name . "\\.jl$"))
         ("haskell" (or (name . "\\.hs$")
                        (mode . haskell-mode)))
         ("C" (or (name . "\\.c$")
                  (name . "\\.h$")
                  (mode . c-mode)))
         ("C++" (or (name . "\\.cpp$")
                    (name . "\\.hpp$")
                    (mode . c++-mode)))
         ("java" (or (name . "\\.java$")
                     (mode . java-mode)))
         ("css" (or (name . "\\.css$")
                    (mode . css-mode)))
         ("javascript" (or (name . "\\.js$")
                           (name . "\\.json$")
                           (mode . javascript-mode)
                           (mode . js2-mode)))
         ("tex" (or (name . "\\.tex$")
                    (mode . tex-mode)))
         ("org" (or (name . "\\.org$")
                    (mode . org-mode)))
         ("text" (or (name . "\\.txt$")
                     (mode . text-mode)))
         ("dired" (mode . dired-mode)))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")
            (ibuffer-auto-mode 1)))

#+end_src
** org-settings
#+begin_src emacs-lisp :tangle src/myorg.el
;;
;; ess
;;
(add-to-list 'load-path "~/.emacs.d/modules/ess-site/lisp")

(require 'ess-site)

(setq  inferior-julia-program-name "/usr/bin/julia")

;; (setq org-babel-R-command "c:/Program\ Files/R/R-3.0.2/bin/x64/Rterm.exe --slave --no-save")

;;
;; latex
;;
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(server-start)

(add-hook 'LaTeX-mode-hook (lambda ()
  (push 
    '("Latexmk" "latexmk -xelatex %s" TeX-run-TeX nil t
      :help "Run Latexmk on file")
    '("%(-PDF)"
      (lambda ()
        (if (and (not TeX-Omega-mode)
                 (or TeX-PDF-mode TeX-DVI-via-PDFTeX))
            "-xelatex" "")))
    TeX-command-list)))


(custom-set-variables
 '(TeX-source-correlate-method (quote synctex))
 '(TeX-source-correlate-mode t)
 '(TeX-source-correlate-start-server t)
 '(TeX-view-program-list (quote (("Acrobat Reader" "c:/Program Files (x86)/Adobe/Reader 11.0/Reader/AcroRd32.exe")))))
(custom-set-faces)

#+end_src
** org-mobile
#+begin_src emacs-lisp :tangle src/orgmobile.el
;; Mobile Org
(require 'org-mobile)

(setq org-mobile-inbox-for-pull "~/Dropbox/org/mobile/mobileorg.org")
(setq org-mobile-directory "~/Dropbox/org/mobile/")

(define-key org-mode-map "\C-cp" 'org-mobile-pull)
(define-key org-agenda-mode-map "\C-cp" 'org-mobile-pull)

;; Fork the work (async) of pushing to mobile
(require 'gnus-async)

;; define a timer variable
(defvar org-mobile-push-timer nil
  "Timer that `org-mobile-push-timer' used to reschedule itself, or nil.")

;; Push to mobile when the dile timer runs out
(defun org-mobile-push-with-delay (secs)
  (when org-mobile-push-timer
    (cancel-timer org-mobile-push-timer))
  
  (setq org-mobile-push-timer
        (run-with-idle-timer
         (* 1 secs) nil 'org-mobile-push)))

;; After saving files, start an idle timer after which we are going to push
(add-hook 'after-save-hook
          (lambda ()
            (if (or (eq major-mode 'org-mode)
                    (eq major-mode 'org-agenda-mode))
                (dolist (file (org-mobile-files-alist))
                  (if (string= (expand-file-name (car file))
                               (buffer-file-name))
                      (org-mobile-push-with-delay 10))))))

;; Run after midnight each day (or each morning upon wakeup?).
(run-at-time "00:01" 86400 '(lambda () (org-mobile-push-with-delay 1)))
;; Run 1 minute after launch, and once a day after that.
(run-at-time "1 min" 86400 '(lambda () (org-mobile-push-with-delay 1)))

;; watch mobile.org for changes, an then call org-mobile-pull
(defun install-monitor (file secs)
  (run-with-timer
   0 secs
   (lambda (f p)
     (unless (< p (second (time-since (elt (files-attributes f) 5))))
       (org-mobile-pull)))
   file secs))

(defvar monitor-timer (install-monitor
                       (concat org-mobile-directory "mobileorg.org") 30)
  "Check if file changed every 30 s.")
#+end_src
* Eyecandy
#+begin_src emacs-lisp :tangle "src/eyecandy.el"
;;
;; color theme
;;

;; (add-theme "sunburst")
;; (load-theme 'sunburst t)
;; (add-theme "monokai")
;; (load-theme 'monokai t)
;; (add-to-list 'load-path  "~/.emacs.d/color-theme/tomorrow")
;; (require 'color-theme-sanityinc-tomorrow)
;; (color-theme-sanityinc-tomorrow-bright)
(add-to-list 'custom-theme-load-path "~/.emacs.d/modules/color-themes/themes")
(load-theme 'graham t)

;;
;; hud
;;
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(global-visual-line-mode 1)
(show-paren-mode 1)
(global-hl-line-mode 1)
(setq inhibit-splash-screen t)
(setq visible-bell t)

;;
;; font
;;
(set-face-attribute 'default nil :font "Source Code Pro-8")
;; (set-default-font "Droid Sans Mono-9")
#+end_src

* Tasks [0%]
** DONE [#A] haskell
** DONE [#A] darcs support?
   :LOGBOOK:
   - State "DONE"       from "READ"       [2014-05-27 Di 18:08]
   - State "SEEN"       from "LOOK"       [2014-05-27 Di 18:08]
   - State "FINISHED"   from "STARTED"    [2014-05-27 Di 18:08]
   - State "STARTED"    from "TODO"       [2014-05-27 Di 18:08]
   :END:
** TODO [#A] time stamp
** DONE [#A] perl mode
** TODO [#A] slime
** DONE [#C] clojure?
** TODO [#C] prolog
** TODO [#B] shen
