#+TITLE: Emacs Config
#+AUTHOR: André Pascal Beyer
#+EMAIL: beyeran@gmail.com

Before the whole configuration a few notes for Windows must be said. Gnutils32 must be
installed and all *.dll from the =bin= directory must be copied into the =bin= directory
of Emacs. E.g.:

#+BEGIN_SRC sh
  cp c:/gnutils/bin/*.dll c:/emacs/bin/
#+END_SRC

  - libpng!

* Initializing

  I finally gave up: after diverse packages (e.g. epl, el-get) did not do the trick,
  I now use =package=.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'package)

  (defun add-package-archive (entry)
    (add-to-list 'package-archives entry t))

  (defun add-package-archives (archive-list)
    (mapcar 'add-package-archive archive-list))

  (add-package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                          ("marmalade" . "http://marmalade-repo.org/packages/")
                          ("org" . "http://orgmode.org/elpa/")))

  (package-initialize)
#+END_SRC

  Loading needed packages - mostly stolen from:
  http://y.tsutsumi.io/emacs-from-scratch-part-2-package-management.html

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq required-packages
        '(;; org
          org-plus-contrib
          ;; usability
          magit
          swiper
          powerline
          smartparens
          cask
          use-package
          projectile
          textmate
          multiple-cursors
          git-gutter-fringe+
          ;; helm
          helm
          helm-company
          helm-ag
          helm-projectile
          ;; templating
          yasnippet
          elixir-yasnippets
          elm-yasnippets
          ;; programming modes
          elixir-mode
          alchemist
          web-mode
          lua-mode
          php-mode
          ess
          go-mode
          inf-ruby
          flycheck
          clojure-mode
          cider
          flycheck-clojure
          elm-mode
          ;; eyecandy
          highlight-indentation
          indent-guide
          mellow-theme
          monokai-theme
          exec-path-from-shell
          org-beautify-theme
          org-bullets))

  (require 'cl)

  (defun packages-installed-p ()
    (loop for p in required-packages
          when (not (package-installed-p p)) do (return nil)
          finally (return t)))

  (unless (packages-installed-p)
    ;; check for new package versions
    (message "%s" "Emacs is now refresing its package database...")
    (package-refresh-contents)
    (message " done.")
    ;; install missing packages
    (dolist (p required-packages)
      (when (not (package-installed-p p))
        (package-install p))))

  (require 'use-package)

  ;;
  ;; helper
  ;;
  (defmacro on-win (&rest body)
    `(when (equal system-type 'windows-nt)
       (progn 
         ,@body)))

  (defmacro on-linux (&rest body)
    `(when (equal system-type 'gnu/linux)
       (progn 
         ,@body)))

  (defmacro on-mac (&rest body)
    `(when (equal system-type 'darwin)
       (progn
         ,@body)))

  (mapc #'load (directory-files "~/.emacs.d/src/" t "\\.el$"))

  (setq package-enable-at-startup nil)
  (package-initialize)

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

* Usability
*** Helm and swipe:

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (require 'helm-config)
  (require 'helm-ag)
  (require 'helm-projectile)

  (define-key helm-command-map (kbd "o") 'helm-occur)
  (define-key helm-command-map (kbd "g") 'helm-do-grep)
  (define-key helm-command-map (kbd "SPC") 'helm-all-mark-rings)
  (define-key helm-map (kbd "M-k") 'helm-next-line)
  (define-key helm-map (kbd "M-i") 'helm-previous-line)
  (define-key helm-map (kbd "M-v") 'yank)
  (define-key helm-find-files-map (kbd "M-k") 'helm-next-line)
  (define-key helm-find-files-map (kbd "M-i") 'helm-previous-line)
  (define-key helm-find-files-map (kbd "M-v") 'yank)
  ;; rebind tab to run persistent action
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  ;; make TAB works in terminal
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)

  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

  (setq helm-split-window-in-side-p           t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t
        helm-ag-fuzzy-match                   t)

  (substitute-key-definition 'find-tag 'helm-etags-select global-map)
  (setq projectile-completion-system 'helm)
  (helm-mode 1)

  (require 'helm-files)
  (setq helm-idle-delay 0.1)
  (setq helm-input-idle-delay 0.1)
  (define-key global-map (kbd "C-x b") 'helm-for-files)
  (define-key global-map (kbd "C-x C-f") 'helm-find-files)

  ;; Turn on helm-projectile key bindings
  (helm-projectile-on)

  ;; Display helm buffers always at the bottom
  ;; Source: http://www.lunaryorn.com/2015/04/29/the-power-of-display-buffer-alist.html
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*helm" (* not-newline) "*" eos)
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (reusable-frames . visible)
                 (side            . bottom)
                 (window-height   . 0.4)))

  (use-package swiper
    :init
    (global-set-key "\C-s" 'swiper))

  ;; Keys
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c i") 'fill-region)
#+END_SRC

*** Fringe Mode

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  ;; A small minor mode to use a big fringe
  (defvar bzg-big-fringe-mode nil)

  (define-minor-mode bzg-big-fringe-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable bzg-big-fringe-mode
    :group 'editing-basics
    (if (not bzg-big-fringe-mode)
        (set-fringe-style nil)
      (set-fringe-mode
       (/ (- (frame-pixel-width)
             (* 100 (frame-char-width)))
          2))))

  ;; Now activate this global minor mode
  (global-set-key (kbd "<f12>") 'bzg-big-fringe-mode)

  ;; show changes from git
  (global-git-gutter+-mode)
#+END_SRC

*** German Quotation Marks
#+BEGIN_SRC emacs-lisp :tangle src/marks.el

#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (projectile-global-mode)

#+END_SRC

*** Company
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (global-company-mode)

#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (use-package smartparens-config
    :ensure smartparens
    :config
    (progn
      (show-smartparens-global-mode t)))

  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)

  (bind-keys
   :map smartparens-mode-map
   ("C-M-a" . sp-beginning-of-sexp)
   ("C-M-e" . sp-end-of-sexp)
   
   ("C-<down>" . sp-down-sexp)
   ("C-<up>"   . sp-up-sexp)
   ("M-<down>" . sp-backward-down-sexp)
   ("M-<up>"   . sp-backward-up-sexp)
   
   ("C-M-f" . sp-forward-sexp)
   ("C-M-b" . sp-backward-sexp)
   
   ("C-M-n" . sp-next-sexp)
   ("C-M-p" . sp-previous-sexp)
   
   ("C-S-f" . sp-forward-symbol)
   ("C-S-b" . sp-backward-symbol)
   
   ("C-<right>" . sp-forward-slurp-sexp)
   ("M-<right>" . sp-forward-barf-sexp)
   ("C-<left>"  . sp-backward-slurp-sexp)
   ("M-<left>"  . sp-backward-barf-sexp)
   
   ("C-M-t" . sp-transpose-sexp)
   ("C-M-k" . sp-kill-sexp)
   ("C-k"   . sp-kill-hybrid-sexp)
   ("M-k"   . sp-backward-kill-sexp)
   ("C-M-w" . sp-copy-sexp)
   
   ("C-M-d" . delete-sexp)
   
   ("M-<backspace>" . backward-kill-word)
   ("C-<backspace>" . sp-backward-kill-word)
   ([remap sp-backward-kill-word] . backward-kill-word)
   
   ("M-[" . sp-backward-unwrap-sexp)
   ("M-]" . sp-unwrap-sexp)
   
   ("C-x C-t" . sp-transpose-hybrid-sexp)
   
   ("C-c ("  . wrap-with-parens)
   ("C-c ["  . wrap-with-brackets)
   ("C-c {"  . wrap-with-braces)
   ("C-c \"" . wrap-with-double-quotes)
   ("C-c _"  . wrap-with-underscores)
   ("C-c `"  . wrap-with-back-quotes))
#+END_SRC
*** Neotree
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (setq neo-theme 'nerd)

  (global-set-key [f8] 'neotree-toggle)

  (setq projectile-switch-project-action 'neotree-projectile-action)
#+END_SRC
*** Spell Check
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (on-mac
   (setq ispell-program-name "/usr/local/bin/aspell"))
#+END_SRC

*** Umlauts on Mac
#+BEGIN_SRC emacs-lisp :tangle src/beyeran-keys.el
  (defmacro def-umlaut-print (name doc &rest char)
    (if (and (stringp doc) char)
        `(defun ,name ()
           ,doc
           (interactive)
           (insert ,char))
      `(defun ,name ()
         (interactive)
         (insert ,doc))))

  ;; lower character
  (def-umlaut-print print-lower-a "ä")
  (def-umlaut-print print-lower-o "ö")
  (def-umlaut-print print-lower-u "ü")
  (def-umlaut-print print-apostrophe-e "é")

  ;; upper character
  (def-umlaut-print print-upper-a "Ä")
  (def-umlaut-print print-upper-o "Ö")
  (def-umlaut-print print-upper-u "Ü")

  ;; sharp s
  (def-umlaut-print print-sharp-s "ß")

  (global-set-key (kbd "C-c a") 'print-lower-a)
  (global-set-key (kbd "C-c o") 'print-lower-o)
  (global-set-key (kbd "C-c u") 'print-lower-u)

  (global-set-key (kbd "C-c A") 'print-upper-a)
  (global-set-key (kbd "C-c O") 'print-upper-o)
  (global-set-key (kbd "C-c U") 'print-upper-u)

  (global-set-key (kbd "C-c s") 'print-sharp-s)

  (global-set-key (kbd "C-c e") 'print-apostrophe-e)
#+END_SRC

*** Templates
#+BEGIN_SRC emacs-lisp :tangle src/beyeran-templates.el

#+END_SRC
* ORG
** General
   
   Different programming/scripting languages for org babel.

#+BEGIN_SRC emacs-lisp :tangle src/custom-org.el
  ;; preview fragments via imagemagick
  (setq org-latex-create-formula-image-program 'imagemagick)

  (setq inferior-julia-program-name "julia")
  (setq inferior-ess-julia-program-name "julia")

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (R . t)
     (lisp . t)
     (scheme . t)
     (ruby . t)
     (R . t)
     (clojure . t)
     (python . t)))

  ;; ess
  (use-package ess
    :init
    (autoload 'R-mode "ess-site.el" "ESS" t)
    (add-to-list 'auto-mode-alist '("\\.R$" . R-mode))
    (add-to-list 'auto-mode-alist '("\\.ji$" . julia-mode)))

  ;; ditaa
  (on-mac
   (setq org-ditaa-jar-path "/usr/local/bin/ditaa"))

  ;; enable selecting
  (setq org-support-shift-select t)

  ;; cider as clojure backend
  (setq org-babel-clojure-backend 'cider)
  (require 'cider)

  ;; blocks
  (setq org-edit-src-content-intendation 0
        org-src-tab-acts-natively t
        org-src-fontify-natively t
        org-confirm-babel-evaluate nil
        org-support-shift-select 'always)
#+END_SRC

** Export Templates
    Some general variables for Latex Exports:

**** General
#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (require 'ox-latex)

  (add-to-list 'org-latex-packages-alist '("tabu" "tabularx" "minted"))

  (setq org-latex-listings 'minted)

  (setq org-latex-minted-options
        '(("frame" "lines")
          ("linenos" "")))

  (on-linux
   (setq org-export-latex-default-packages-alist
         '(("AUTO" "inputenc" t)
           ("T1"   "fontenc"   t)
           (""     "fixltx2e"  nil)
           (""     "wrapfig"   nil)
           (""     "soul"      t)
           (""     "textcomp"  t)
           (""     "amsmath"   t)
           (""     "marvosym"  t)
           (""     "wasysym"   t)
           (""     "latexsym"  t)
           (""     "amssymb"   t)
           (""     "hyperref"  nil))))

  (on-mac
   (setq org-export-latex-default-packages-alist
         '(("AUTO" "inputenc" t)
           ("T1"   "fontenc"   t)
           (""     "fixltx2e"  nil)
           (""     "wrapfig"   nil)
           (""     "soul"      t)
           (""     "textcomp"  t)
           (""     "amsmath"   t)
           (""     "marvosym"  t)
           (""     "wasysym"   t)
           (""     "latexsym"  t)
           (""     "amssymb"   t)
           (""     "hyperref"  nil))))

  (on-win
   (setq org-export-latex-default-packages-alist
         '(("latin1" "inputenc" t)
           ("T1"   "fontenc"   t)
           (""     "fixltx2e"  nil)
           (""     "wrapfig"   nil)
           (""     "soul"      t)
           (""     "textcomp"  t)
           (""     "amsmath"   t)
           (""     "marvosym"  t)
           (""     "wasysym"   t)
           (""     "latexsym"  t)
           (""     "amssymb"   t)
           (""     "hyperref"  nil))))
#+END_SRC

**** Text

#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (add-to-list 'org-latex-classes
               '("documentation"
                 "\\documentclass[12pt,oneside]{article}
                       [NO-DEFAULT-PACKAGES]

   \\usepackage[T1]{fontenc} 
   \\usepackage{longtable} 
   \\usepackage{float}
   \\usepackage{wrapfig}
   \\usepackage{amsmath}
   \\usepackage{hyperref}
   \\usepackage{minted}
   \\usepackage{fontspec}
   \\usepackage{geometry}
   \\geometry{a4paper, textwidth=6.5in, textheight=10in, marginparsep=7pt,
       marginparwidth=.6in}
   \\pagestyle{empty}
   \\setsansfont{Lato Regular}
   \\setmonofont{Monaco}
   \\setmathrm{EB Garamond}
   %% \\setsansfont{Lato}
   %% \\setmonofont[Scale=0.8]{Inconsolata}
   %% \\setmonofont[Scale=0.75]{Source Code Pro}
   %% \\setmainfont{Adobe Garamond Pro} % Main document font
   %% \\setsansfont{Gill Sans Std} 
   %% Used in the from address line above the to address
   \\renewcommand{\\normalsize}{\\fontsize{12.5}{17}\\selectfont}
   %% Sets the font size and leading 
   
   \\usemintedstyle{tango}
   \\makeatletter
   \\renewcommand{\\maketitle}{\\bgroup\\setlength{\\parindent}{0pt}
   \\begin{flushleft}

   \\textbf{{\\LARGE \\@title}}
   \\par
   \\@author
   \\par
   \\end{flushleft}\\egroup }
   \\makeatother"

                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("beamer-simple"
                 "\\documentclass[hyperref={pdfpagelabels=false}]{beamer}
                  [DEFAULT-PACKAGES]

  \\usepackage[ngerman, english]{babel}
  \\usepackage{graphicx}
  \\usepackage{lmodern}
  \\usetheme{Kalgan}
  "
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("tufte-handout"
                 "\\documentclass{tufte-handout}
                       [NO-DEFAULT-PACKAGES]

   \\usepackage[utf8]{inputenc}
   \\usepackage[T1]{fontenc}
   \\usepackage[german, english]{babel}
   \\usepackage{graphicx}
     \\setkeys{Gin}{width=\\linewidth,totalheight=\\textheight,keepaspectratio}
   \\usepackage{amsmath}
   \\usepackage{booktabs}
   \\usepackage{units}
   \\usepackage{multicol}
   \\usepackage{lipsum}
   \\usepackage{fancyvrb}
     \\fvset{fontsize=\\normalsize}

   \\newcommand{\\doccmd}[1]{\\texttt{\\textbackslash#1}}
   % command name -- adds backslash automatically
   \\newcommand{\\docopt}[1]{\\ensuremath{\\langle}\\textrm{\\textit{#1}}\\ensuremath{\\rangle}}% optional command argument
   \\newcommand{\\docarg}[1]{\\textrm{\\textit{#1}}}% (required) command argument
   \\newcommand{\\docenv}[1]{\\textsf{#1}}% environment name
   \\newcommand{\\docpkg}[1]{\\texttt{#1}}% package name
   \\newcommand{\\doccls}[1]{\\texttt{#1}}% document class name
   \\newcommand{\\docclsopt}[1]{\\texttt{#1}}% document class option name
   \\newenvironment{docspec}{\\begin{quote}\\noindent}{\\end{quote}}% command specification environment
   "
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("thesis"
                 "\\documentclass[11pt]{memoir}
  [DEFALT-PACKAGES]
  [PACKAGES]
  [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[presentation]{beamer}
                  [DEFAULT-PACKAGES]"
           
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  ;; (setq org-latex-to-pdf-process
  ;;       ;; '("latexmk -pdflatex='xelatex -shell-escape %O'
  ;;       ;; -interaction=nonstopmode -f %f")
  ;;       '("xelatex --shell-escape -interaction=nonstopmode -f %f"))

  (setq org-latex-pdf-process 
        '("xelatex --shell-escape -interaction=nonstopmode %f"
          "xelatex --shell-escape -interaction=nonstopmode %f"))

  (setq beyerstry-summary
        (concat "\\documentclass[12pt,letterpaper]{article}\n"
          "[DEFAULT-PACKAGES]\n"
          "\\usepackage{amsmath,amsthm,amsfonts,amssymb,amscd}\n"
          "\\usepackage{multirow,booktabs}\n"
          "\\usepackage[table]{xcolor}\n"
          "\\usepackage{fullpage}\n"
          "\\usepackage{lastpage}\n"
          "\\usepackage{enumitem}\n"
          "\\usepackage{fancyhdr}\n"
          "\\usepackage{mathrsfs}\n"
          "\\usepackage{wrapfig}\n"
          "\\usepackage{setspace}\n"
          "\\usepackage{calc}\n"
          "\\usepackage{multicol}\n"
          "\\usepackage{cancel}\n"
          "% \\usepackage[retainorgcmds]{IEEEtrantools}\n"
          "\\usepackage[margin=3cm]{geometry}\n"
          "\\usepackage{floatrow}\n"
          "\\newlength{\\tabcont}\n"
          "\\setlength{\\parindent}{0.0in}\n"
          "\\setlength{\\parskip}{0.05in}\n"
          "\n"
          "\\headheight 32pt\n"
          "\\lhead{\\author\\ \\vspace{0.1cm} \\\\ \\title}\n"
          "\n"
          "\\chead{\\textbf{\\title}}\n"
          "\\rhead{\\date}\n"
          "\\cfoot{summary}\n"
          "\n"
          "\\textheight 580pt\n"
          "\\headsep 10pt\n"
          "\\footskip 40pt\n"
          "\\topmargin = 7pt\n"))

  (add-to-list 'org-latex-classes
               (list "beyerstry-summary" beyerstry-summary))

  (add-to-list 'org-latex-classes
               '("beyersty-term-paper"

                 "\\documentclass[12pt]{article}

  [DEFAULT-PACKAGES]

  \\usepackage[lmargin=2in,rmargin=1.5in]{geometry}
  \\usepackage{setspace}
  \\onehalfspacing

  \\usepackage{fontspec,lipsum}

  \\setmainfont{EB Garamond}
  \\setlength\\parindent{22pt}

  \\renewcommand{\\maketitle}{
  \\vspace*{\\fill}
  \\vspace{100pt}
  \\begin{center}
  \\vspace{20pt}
  \\Huge Depth of Embedding and Position in Dependency Grammar \\\\ \\normalsize
  \\vspace{100pt}
  \\textsc{Term Paper} \\\\
  \\vspace{20pt}
  André Pascal Beyer \\\\
  \\vspace{12pt}
  Matr.Nr.: 990309 \\\\
  \\vspace{12pt}
  Trier University \\\\
  Trier \\\\
  \\today
  \\end{center} \\vspace*{\\fill}
  \\newpage{}
  \\thispagestyle{empty}
  }

  "

  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("beyerstry-thesis"
                 
                 "\\documentclass[12pt,oneside,a4paper]{book}\n

                 [DEFAULT-PACKAGES]

                 \\usepackage[width=5.75in, a4paper]{geometry}\n
                 \\parindent 12pt\n
                 \\usepackage{fontspec}\n
                 \\usepackage{setspace}\n
                 \\setsansfont{Lato Regular}\n
                 \\setmonofont{Monaco}\n
                 \\setmathrm{EB Garamond}\n
                 \\widowpenalty=300\n
                 \\clubpenalty=300\n
                 \\setromanfont[Numbers=OldStyle, Ligatures={Common, TeX}, Scale=1.0]{EB Garamond}\n
                 \\newfontfamily{\\smallcaps}[RawFeature={+c2sc,+scmp}]{EB Garamond}\n
                 \\usepackage{caption}\n
                 \\renewcommand{\\thefootnote}{\\fnsymbol{footnote}}\n
                 \\usepackage{fancyhdr}\n
                 \\usepackage[tiny,md,sc]{titlesec}\n
                 \\setlength{\\headheight}{15pt}\n             
                 \\usepackage{titling}\n
                 \\usepackage[labelfont={bf,sf,footnotesize,singlespacing},justification={justified,RaggedRight},textfont={sf,footnotesize,singlespacing},figurewithin=chapter,margin=0pt,tablewithin=chapter,singlelinecheck=false]{caption}\n
                 \\usepackage{color}\n
                 \\usepackage{xcolor}\n
                 \\definecolor{SchoolColor}{rgb}{0 0 0} % Crimson\n
                 \\definecolor{chaptergrey}{rgb}{0 0 0} % for chapter numbers\n
                 \\hypersetup{colorlinks,citecolor=SchoolColor,filecolor=black,linkcolor=black,urlcolor=SchoolColor}\n

                 \\renewcommand{\\maketitle}{\n
                 \\vspace*{\\fill}\n
                 \\vspace{100pt}\n
                 \\begin{center}\n
                 \\Huge \\textcolor{SchoolColor}{\\thetitle} \\normalsize \\\\\n
                 \\vspace{20pt}\n
                 Utilizing Long Short-Term Memory Networks, Gated Recurrent Networks, and GloVe Vectors \n
                 \\vspace{100pt}\n
                 \\textsc{Master's Thesis} \\\\\n
                 \\vspace{20pt}\n
                 André Pascal Beyer\n
                 \\vspace{12pt}\n
                 \\vspace{12pt}\n
                 Trier University \\\\ Trier \\\\\n
                 \\today\n
                 \\end{center} \\vspace*{\\fill}\n
                 }\n
                 \\newcommand{\\copyrightpage}{\n
                 \\newpage\n
                 \\thispagestyle{empty}\n
                 \\vspace*{\\fill}\n
                 \\scshape \\noindent \\small \\copyright \\small 2014\\hspace{3pt}-- André Pascal Beyer \\\\\n
                 \\noindent all rights reserved.\n
                 \\vspace*{\\fill}\n
                 \\newpage\n
                 \\rm\n
                 }\n
                 \\renewcommand{\\backmatter}{\n
                 \\begin{appendices}\n
                 %\\include{chapters/appendixA}\n
                 \\end{appendices}\n
                 %\\input{endmatter/personalize}\n
                 \\clearpage\n
                 \\bibliography{references}\n
                 \\addcontentsline{toc}{chapter}{References}\n
                 \\bibliographystyle{apalike}\n
                 %\\include{endmatter/colophon}\n
                 }\n"

                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** Assignment

#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (add-to-list 'org-latex-classes
               '("beyerstry-assignment"
                 "\\documentclass[a4paper]{tufte-handout}
  [NO-DEFAULT-PACKAGES]

  % hyperref setup
  \\usepackage{hyperref}
  \\hypersetup{
      pdffitwindow=false,            % window fit to page
      pdfstartview={Fit},            % fits width of page to window
      pdftitle={\\@title},     % document title
      pdfauthor={André Pascal Beyer},         % author name
      pdfsubject={},                 % document topic(s)
      pdfnewwindow=true,             % links in new window
      colorlinks=true,               % coloured links, not boxed
      linkcolor=DarkScarletRed,      % colour of internal links
      citecolor=DarkChameleon,       % colour of links to bibliography
      filecolor=DarkPlum,            % colour of file links
      urlcolor=DarkSkyBlue           % colour of external links
  }

  % link color
  \\definecolor{DarkSkyBlue}{rgb}{0.12,0.29,0.53}

  % input
  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}

  % packages
  \\usepackage{amsmath}
  \\usepackage{amsfonts}
  \\usepackage{amssymb}
  \\usepackage{bigdelim}
  \\usepackage{booktabs}
  \\usepackage{epsfig}
  \\usepackage{extract}
  \\usepackage{fancyhdr}
  \\usepackage{framed}
  \\usepackage{graphicx}
  \\graphicspath{ {figures/} }
  \\usepackage{multibib}
  \\usepackage{multirow}
  \\usepackage{pdflscape}
  \\usepackage[usenames,dvipsnames]{pstricks}
  \\usepackage{textcomp}
  \\usepackage{url}
  \\usepackage{wrapfig}
  \\usepackage{tipa}
  \\usepackage{textgreek}

  % fonts
  \\setsansfont[Ligatures=TeX, % recommended
                UprightFont={* Light}]{Myriad Pro}

  \\setmonofont{Monaco}
  \\setmathrm{EB Garamond}

  \\setmainfont[Ligatures=TeX, % recommended
    UprightFont={* Light}]{Myriad Pro}

  % header / footer
  \\pagestyle{fancy}
  \\setlength\\parindent{0in}
  \\setlength\\parskip{0.1in}
  \\setlength\\headheight{15pt}

  \\rhead{\\workingDate}
  \\lfoot{\\includegraphics[width=0.1\\textwidth]{logo.png}}
  \\cfoot{~~\\textit{Last modified: \\today}}
  \\rfoot{\\textsc{\\thepage}}

  % new environments
  \\newenvironment{projects}%
      {\\section*{Projects \\& Collaborations}}%
      {\\vspace{2mm}\\hrule\\hspace{\\stretch{1}}}

  \\newcommand{\\exercise}[1]{%
    \\section*{#1}%
  }

  % Define a custom color set.
  \\usepackage{xcolor}
  \\definecolor{tenPercentGrey}{gray}{0.9}


  \\newcommand{\\workingDate}{\\textsc{ \\@date }}
  \\newcommand{\\userName}{\\@seminar}
  \\newcommand{\\institution}{Universität Trier}

  \\title{\\@title}"

                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** Beamer
#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (setq beyerstry-beamer-latex
    (concat "\\documentclass[hyperref={pdfpagelabels=false}]{beamer}"
            "\n\n"
            "[DEFAULT-PACKAGES]\n"
            "%%\n"
            "%% font\n"
            "%%\n"
            "\\usepackage{fontspec}\n"
            "\\setsansfont{EB Garamond}\n"
            "\\setmonofont{Inconsolata}\n\n"
            "%% sizes\n"
            "\\setbeamerfont{title}{size=\\\large, series=\\bfseries}"
            "\n"
            "\\setbeamerfont{author}{size=\\small}\n"
            "\\setbeamerfont{date}{size=\\small}\n"
            "\\setbeamerfont{section title}{size=\\large,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{plain title}{size=\\large,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{block title}{size=\\normalsize,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{block title alerted}{size=\\normalsize,"
            "\n    series=\\bfseries}\n"
            "\\setbeamerfont*{subtitle}{size=\\large}\n"
            "\\setbeamerfont{frametitle}{size=\\large,%\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{caption}{size=\\small}\n"
            "\\setbeamerfont{caption name}{series=\\bfseries}\n"
            "\\setbeamerfont{description item}{series=\\bfseries}\n"
            "\\setbeamerfont{page number in head/foot}{%\n"
            "    size=\\scriptsize}\n"
            "\\setbeamerfont{bibliography entry author}{%\n"
            "    size=\\normalsize, series=\\normalfont}\n"
            "\\setbeamerfont{bibliography entry title}{%\n"
            "    size=\\normalsize,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{bibliography entry location}{%\n"
            "    size=\\normalsize, series=\\normalfont}\n"
            "\\setbeamerfont{bibliography entry note}{size=\\small,\n"
            "    series=\\normalfont}\n\n"
            "%% color\n"
            "\\setbeamercolor{titlelike}{use=normal text,\n"
            "    parent=normal text}\n\n"
            "\\setbeamercolor{author}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{date}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{institute}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{structure}{use=normal text,\n"
            "    fg=normal text.fg}\n\n"
            "\\setbeamercolor{footnote}{fg=normal text.fg!90}\n"
            "\\setbeamercolor{footnote mark}{fg=.}\n"))

  (add-to-list 'org-latex-classes
               (list "beyerstry-beamer" beyerstry-beamer-latex))
#+END_SRC
**** Load All
#+BEGIN_SRC emacs-lisp src/export-templates.el
  (add-to-list 'org-latex-classes
               (list "beyerstry-beamer" beyerstry-beamer-latex))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp :tangle src/custom-org.el
  (add-to-list 'org-modules 'org-habit)

  (setq org-agenda-files (mapcar '(lambda (n) (concatenate 'string "~/Documents/tracking/" n ".org"))
                                 '("agenda" "cv" "ill_neglect" "captain_caveman" "tool_cover"
                                   "finance" "website" "teaching" "application")))

  (setq org-agenda-custom-commands
    '(("c" "Simple agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Hight=priority unfinished tasks:")))
            (agenda "")
            (alltodo ""
                     ((org-agenda-skip-function
                       '(or (apb-org-skip-subtree-if-habit)
                            (apb-org-skip=subtree-if-priority ?A)
                            (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           )))

  (defun apb-org-skip=subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?c."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 100 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
    nil)))

  (defun apb-org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\""
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
    nil)))
#+END_SRC

* Research

  - TODO: Description

** reftex
#+BEGIN_SRC emacs-lisp :tangle src/beyeran-research.el
  ;; beyeran-research -- my approach to manage research papers with emacs
  ;;

  ;;; Commentary:


  ;;; Code:
  ;; Jump to an entry
  (defun org-mode-reftex-search ()
    "Jump to the notes for the paper pointed to."
    (interactive)
    (org-open-link-from-string (format "[[notes:%s]]" (first (reftex-citation t)))))

  (setq org-link-abbrev-alist
        '(("papers" . "~/Documents/research/papers/%s.pdf")
          ("notes" . "~/Documents/research/notes.org::#%s")
          ("summary" . "~/Documents/research/paper.org::#%s")
          ("tasks" . "~/Documents/research/tasks.org::#%s")
          ("bib" . "~/Documents/research/bibliography/bibliography.bib::%s")))

  (setq reftex-default-bibliography
        '("~/Documents/research/bibliography/bibliography.bib"))

  (defun org-mode-reftex-setup ()
    "Not sure why interactive."
    (load-library "reftex")

    (and (buffer-file-name)
         (file-exists-p (buffer-file-name))
         (progn
           ;; enable auto-revert mode to update reftex when bibtex file chagnes
           (global-auto-revert-mode t)
           (reftex-parse-all)
           ;; add custom reftex cite format to insert links
           )
         (reftex-set-cite-format
          '((?b . "[[bib:%l][%l-bib]]")
            (?n . "[[notes:%l][%l-notes]]")
            (?p . "[[papers:%l][%l-paper]]")
            (?t . "%t")
            (?h . "** %t\n   :PROPERTIES:\n   :Custom_ID: %l\n   :END:\n\n   [[papers:%l][%l-paper]]\n\n*** Summary\n    ")))

         (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
         (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search)))

  (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_SRC

** custom agenda view
#+BEGIN_SRC emacs-lisp :tangle src/beyeran-research.el
  (defun org-todo-list-current-file (&optional arg)
    "Like `org-todo-list', but using only the current buffer's file."
    (interactive "P")
    (let ((org-agenda-files (list (buffer-file-name (current-buffer)))))
      (if (null (car org-agenda-files))
          (error "%s is not visiting a file" (buffer-name (current-buffer)))
        (org-todo-list arg))))

  (setq org-priority-faces '((?A . (:foreground "red" :weight 'bold))
                             (?B . (:foreground "yellow"))
                             (?C . (:foreground "green"))))
#+END_SRC
** custom todo color
#+BEGIN_SRC emacs-lisp :tangle src/beyeran-research.el
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning) 
          ("RELEVENT" . "yellow")
          ("WAITING" . "orange")
          ("CANCELED" . (:foreground "red" :weight bold))))

#+END_SRC
* Blog
  - TODO: description

#+BEGIN_SRC emacs-lisp :tangle src/apb-blog.el
  (setq org-publish-project-alist
        '(("beyeran-blog"
           ;; Path to org files
           :base-directory "~/Documents/beyeran-blog/org-content/"
           :base-extension "org"

           ;; Path to hugo project-am
           :publishing-directory "~/Documents/beyeran-blog/content/"
           :recursive t
           :publishing-function gp-org-gfm-publish-to-md
           )))

  (defun gp-org-gfm-publish-to-md (plist fliename pub-dir)
    "Publish an org file to Github Flavoured Markdown.

  FILENAME is the filename of the Org file to be published. PLIST
  is the property list for the given project. PUB-DIR is the
  publishing directory.

  Return output file name."
    (org-publish-org-to 'gfm filename ".md" plist pub-dir))
#+END_SRC

** ox-gfm.el

#+BEGIN_SRC emacs-lisp :tangle src/ox-gfm.el
  ;;; ox-gfm.el --- Github Flavored Markdown Back-End for Org Export Engine

  ;; Copyright (C) 2014 Lars Tveito

  ;; Author: Lars Tveito
  ;; Keywords: org, wp, markdown, github

  ;; This file is not part of GNU Emacs.

  ;; GNU Emacs is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; GNU Emacs is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This library implements a Markdown back-end (github flavor) for Org
  ;; exporter, based on the `md' back-end.

  ;;; Code:

  (require 'ox-md)


  ;;; User-Configurable Variables

  (defgroup org-export-gfm nil
    "Options specific to Markdown export back-end."
    :tag "Org Github Flavored Markdown"
    :group 'org-export
    :version "24.4"
    :package-version '(Org . "8.0"))

  (defcustom org-gfm-lang '(("emacs-lisp" . "lisp") ("elisp" . "lisp"))
    "Alist of languages that are not recognized by Github, to
    languages that are. Emacs lisp is a good example of this, where
    we can use lisp as a nice replacement."
    :group 'org-export-gfm)


  ;;; Define Back-End

  (org-export-define-derived-backend 'gfm 'md
    :filters-alist '((:filter-parse-tree . org-md-separate-elements))
    :menu-entry
    '(?g "Export to Github Flavored Markdown"
         ((?G "To temporary buffer"
              (lambda (a s v b) (org-gfm-export-as-markdown a s v)))
          (?g "To file" (lambda (a s v b) (org-gfm-export-to-markdown a s v)))
          (?o "To file and open"
              (lambda (a s v b)
                (if a (org-gfm-export-to-markdown t s v)
                  (org-open-file (org-gfm-export-to-markdown nil s v)))))))
    :translate-alist '((inner-template . org-gfm-inner-template)
                       (strike-through . org-gfm-strike-through)
                       (src-block . org-gfm-src-block)))


  ;;; Transcode Functions

  ;;;; Src Block

  (defun org-gfm-src-block (src-block contents info)
    "Transcode SRC-BLOCK element into Github Flavored Markdown
  format. CONTENTS is nil.  INFO is a plist used as a communication
  channel."
    (let* ((lang (org-element-property :language src-block))
           (lang (or (assoc-default lang org-gfm-lang) lang))
           (code (org-export-format-code-default src-block info))
           (prefix (concat "```" lang "\n"))
           (suffix "```"))
      (concat prefix code suffix)))


  ;;;; Strike-Through

  (defun org-html-strike-through (strike-through contents info)
    "Transcode STRIKE-THROUGH from Org to Markdown (GFM).
  CONTENTS is the text with strike-through markup.  INFO is a plist
  holding contextual information."
    (format "~~%s~~" contents))

  ;;;; Table of contents

  (defun org-gfm-format-toc (headline)
    "Return an appropriate table of contents entry for HEADLINE. INFO is a
  plist used as a communication channel."
    (let* ((title (org-export-data
                   (org-export-get-alt-title headline info) info))
           (level (1- (org-element-property :level headline)))
           (indent (concat (make-string (* level 2) ? )))
           (ref-str (replace-regexp-in-string " " "-" (downcase title))))
      (concat indent "- [" title "]" "(#" ref-str ")")))


  ;;;; Template

  (defun org-gfm-inner-template (contents info)
    "Return body of document after converting it to Markdown syntax.
  CONTENTS is the transcoded contents string.  INFO is a plist
  holding export options."
    (let* ((depth (plist-get info :with-toc))
           (headlines (and depth (org-export-collect-headlines info depth)))
           (toc-string (or (mapconcat 'org-gfm-format-toc headlines "\n") ""))
           (toc-tail (if headlines "\n\n" "")))
      (concat toc-string toc-tail contents)))


  ;;; Interactive function

  ;;;###autoload
  (defun org-gfm-export-as-markdown (&optional async subtreep visible-only)
    "Export current buffer to a Github Flavored Markdown buffer.

  If narrowing is active in the current buffer, only export its
  narrowed part.

  If a region is active, export that region.

  A non-nil optional argument ASYNC means the process should happen
  asynchronously.  The resulting buffer should be accessible
  through the `org-export-stack' interface.

  When optional argument SUBTREEP is non-nil, export the sub-tree
  at point, extracting information from the headline properties
  first.

  When optional argument VISIBLE-ONLY is non-nil, don't export
  contents of hidden elements.

  Export is done in a buffer named \"*Org GFM Export*\", which will
  be displayed when `org-export-show-temporary-export-buffer' is
  non-nil."
    (interactive)
    (org-export-to-buffer 'gfm "*Org GFM Export*"
      async subtreep visible-only nil nil (lambda () (text-mode))))


  ;;;###autoload
  (defun org-gfm-convert-region-to-md ()
    "Assume the current region has org-mode syntax, and convert it
  to Github Flavored Markdown.  This can be used in any buffer.
  For example, you can write an itemized list in org-mode syntax in
  a Markdown buffer and use this command to convert it."
    (interactive)
    (org-export-replace-region-by 'gfm))


  ;;;###autoload
  (defun org-gfm-export-to-markdown (&optional async subtreep visible-only)
    "Export current buffer to a Github Flavored Markdown file.

  If narrowing is active in the current buffer, only export its
  narrowed part.

  If a region is active, export that region.

  A non-nil optional argument ASYNC means the process should happen
  asynchronously.  The resulting file should be accessible through
  the `org-export-stack' interface.

  When optional argument SUBTREEP is non-nil, export the sub-tree
  at point, extracting information from the headline properties
  first.

  When optional argument VISIBLE-ONLY is non-nil, don't export
  contents of hidden elements.

  Return output file's name."
    (interactive)
    (let ((outfile (org-export-output-file-name ".md" subtreep)))
      (org-export-to-file 'gfm outfile async subtreep visible-only)))

  (provide 'ox-gfm)

  ;; Local variables:
  ;; generated-autoload-file: "org-loaddefs.el"
  ;; End:

  ;;; ox-gfm.el ends here
#+END_SRC

* Programming Languages
** Elixir
   Elixir is a language based on erlang with more or less Ruby syntax. I like it
   very much. It has two extensions - the "normal" =elixir-mode= and a extention
   for it's project management =alchemist=.

#+BEGIN_SRC emacs-lisp :tangle src/apb-elixir.el
  (use-package elixir-mode
    :init
    (add-hook 'elixir-mode-hook 'global-company-mode))

  (use-package alchemist)
#+END_SRC

** Go
   Since Google more and more requires knowledge in =Go= I thought I could give
   it a try.

#+BEGIN_SRC emacs-lisp :tangle src/apb-go.el
  (use-package go-mode-load)
  (use-package go-mode)
#+END_SRC
** Python
   Just some minor things - since I'm mostly using it for small scripts with
   org-mode I don't get too fancy about it

#+BEGIN_SRC emacs-lisp :tangle src/apb-python.el
  (on-win
   (setq python-shell-interpreter "C:/WinPython/python-3.4.3.amd64/Scripts/ipython.exe --pylab=qt"))
#+END_SRC

** Ruby

#+BEGIN_SRC emacs-lisp :tangle src/apb-ruby.el
  (require 'ruby-mode)

  (autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby pathrocess" t)
  (autoload 'inf-ruby-keys "inf-ruby" "" t)

  (eval-after-load 'ruby-mode
    '(add-hook 'ruby-mode-hook 'inf-ruby-keys))

  ;; add additional keys

  (define-key ruby-mode-map (kbd "C-c C-c") 'ruby-send-buffer)
  (define-key ruby-mode-map (kbd "C-c C-r") 'ruby-send-region)
#+END_SRC

** Torch

   For my master's thesis I'm using the scientific computing library
   Torch for Lua. I normally do not use Lua so I just use the lua mode
   as Torch mode:

#+BEGIN_SRC emacs-lisp :tangle src/apb-lua.el
  (setq lua-default-application "th")

  (with-eval-after-load 'lua-mode
    (define-key lua-mode-map (kbd "C-c C-r") 'lua-send-region)
    (define-key lua-mode-map (kbd "C-c C-c") 'lua-send-buffer))

#+END_SRC
** Clojure

#+BEGIN_SRC emacs-lisp :tangle src/apb-clojure.el
  ;; configure cider
  (setq nrepl-hide-special-buffers t
        cider-repl-pop-to-buffer-on-connect nil
        cider-popup-stacktraces nil
        cider-repl-popup-stacktraces t)

  (on-mac
   (setq cider-lein-command "/Users/beyeran/bin/lein"))

  ;; useful keybindings when using clojur from org
  ;; (org-defkey org-mode-map (kbd "C-x C-e") 'cider-eval-last-sexp)
  ;; (org-defkey org-mode-map (kbd "C-c C-d") 'cider-doc)


#+END_SRC
** Elm
#+BEGIN_SRC emacs-lisp :tangle src/apb-elm.el
  (use-package elm-mode
    :init (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)

    (add-to-list 'company-backend 'company-elm))
#+END_SRC

** Julia

   I have no idea where ob-julia.el or the org-contrib in general is to be found.
   Since I've already wasted too much time searching for it, I just paste it here.

#+BEGIN_SRC emacs-lisp :tangle src/ob-julia.el
  ;;; ob-julia.el --- org-babel functions for julia code evaluation

  ;; Copyright (C) 2013, 2014 G. Jay Kerns
  ;; Author: G. Jay Kerns, based on ob-R.el by Eric Schulte and Dan Davison

  ;; This file is not part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs; see the file COPYING.  If not, write to the
  ;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  ;; Boston, MA 02110-1301, USA.

  ;;; Commentary:

  ;; The file provides Org-Babel support for evaluating julia code.
  ;;
  ;; See https://github.com/gjkerns/ob-julia/blob/master/ob-julia-doc.org
  ;; for detailed instructions on how to get started.  The git repository
  ;; contains more documentation: git://github.com/gjkerns/ob-julia.git

  ;;; Code:
  (require 'ob)
  (require 'cl-lib)

  (declare-function orgtbl-to-csv "org-table" (table params))
  (declare-function julia "ext:ess-julia" (&optional start-args))
  (declare-function inferior-ess-send-input "ext:ess-inf" ())
  (declare-function ess-make-buffer-current "ext:ess-inf" ())
  (declare-function ess-eval-buffer "ext:ess-inf" (vis))
  (declare-function org-number-sequence "org-compat" (from &optional to inc))

  (defconst org-babel-header-args:julia
    '((width       . :any)
      (horizontal      . :any)
      (results             . ((file list vector table scalar verbatim)
                  (raw org html latex code pp wrap)
                  (replace silent append prepend)
                  (output value graphics))))
    "julia-specific header arguments.")

  (add-to-list 'org-babel-tangle-lang-exts '("julia" . "jl"))

  (defvar org-babel-default-header-args:julia '())

  (defcustom org-babel-julia-command inferior-julia-program-name
    "Name of command to use for executing julia code."
    :group 'org-babel
    :version "24.4"
    :package-version '(Org . "8.0")
    :type 'string)

  (defvar ess-local-process-name) ; dynamically scoped
  (defun org-babel-edit-prep:julia (info)
    (let ((session (cdr (assq :session (nth 2 info)))))
      (when (and session (string-match "^\\*\\(.+?\\)\\*$" session))
        (save-match-data (org-babel-julia-initiate-session session nil)))))

  (defun org-babel-expand-body:julia (body params &optional graphics-file)
    "Expand BODY according to PARAMS, return the expanded body."
    (let ((graphics-file
       (or graphics-file (org-babel-julia-graphical-output-file params))))
      (mapconcat
       #'identity
       ((lambda (inside)
      (if graphics-file
              inside
        inside))
        (append (org-babel-variable-assignments:julia params)
            (list body))) "\n")))

  (defun org-babel-execute:julia (body params)
    "Execute a block of julia code.
  This function is called by `org-babel-execute-src-block'."
    (save-excursion
      (let* ((result-params (cdr (assq :result-params params)))
         (result-type (cdr (assq :result-type params)))
             (session (org-babel-julia-initiate-session
               (cdr (assq :session params)) params))
         (colnames-p (cdr (assq :colnames params)))
         (rownames-p (cdr (assq :rownames params)))
         (graphics-file (org-babel-julia-graphical-output-file params))
         (full-body (org-babel-expand-body:julia body params graphics-file))
         (result
          (org-babel-julia-evaluate
           session full-body result-type result-params
           (or (equal "yes" colnames-p)
           (org-babel-pick-name
            (cdr (assq :colname-names params)) colnames-p))
           (or (equal "yes" rownames-p)
           (org-babel-pick-name
            (cdr (assq :rowname-names params)) rownames-p)))))
        (if graphics-file nil result))))

  (defun org-babel-prep-session:julia (session params)
    "Prepare SESSION according to the header arguments specified in PARAMS."
    (let* ((session (org-babel-julia-initiate-session session params))
       (var-lines (org-babel-variable-assignments:julia params)))
      (org-babel-comint-in-buffer session
        (mapc (lambda (var)
                (end-of-line 1) (insert var) (comint-send-input nil t)
                (org-babel-comint-wait-for-output session)) var-lines))
      session))

  (defun org-babel-load-session:julia (session body params)
    "Load BODY into SESSION."
    (save-window-excursion
      (let ((buffer (org-babel-prep-session:julia session params)))
        (with-current-buffer buffer
          (goto-char (process-mark (get-buffer-process (current-buffer))))
          (insert (org-babel-chomp body)))
        buffer)))

  ;; helper functions

  (defun org-babel-variable-assignments:julia (params)
    "Return list of julia statements assigning the block's variables."
    (let ((vars (org-babel--get-vars params)))
      (mapcar
       (lambda (pair)
         (org-babel-julia-assign-elisp
      (car pair) (cdr pair)
      (equal "yes" (cdr (assq :colnames params)))
      (equal "yes" (cdr (assq :rownames params)))))
       (mapcar
        (lambda (i)
      (cons (car (nth i vars))
            (org-babel-reassemble-table
             (cdr (nth i vars))
             (cdr (nth i (cdr (assq :colname-names params))))
             (cdr (nth i (cdr (assq :rowname-names params)))))))
        (org-number-sequence 0 (1- (length vars)))))))

  (defun org-babel-julia-quote-csv-field (s)
    "Quote field S for export to julia."
    (if (stringp s)
        (concat "\"" (mapconcat 'identity (split-string s "\"") "\"\"") "\"")
      (format "%S" s)))

  (defun org-babel-julia-assign-elisp (name value colnames-p rownames-p)
    "Construct julia code assigning the elisp VALUE to a variable named NAME."
    (if (listp value)
        (let ((max (apply #'max (mapcar #'length (cl-remove-if-not
                          #'sequencep value))))
          (min (apply #'min (mapcar #'length (cl-remove-if-not
                          #'sequencep value))))
          (transition-file (org-babel-temp-file "julia-import-")))
          ;; ensure VALUE has an orgtbl structure (depth of at least 2)
          (unless (listp (car value)) (setq value (list value)))
          (with-temp-file transition-file
            (insert
         (orgtbl-to-csv value '(:fmt org-babel-julia-quote-csv-field))
         "\n"))
      (let ((file (org-babel-process-file-name transition-file 'noquote))
            (header (if (or (eq (nth 1 value) 'hline) colnames-p)
                "TRUE" "FALSE"))
            (row-names (if rownames-p "1" "NULL")))
        (if (= max min)
            (format "%s = readcsv(\"%s\")" name file)
          (format "%s = readcsv(\"%s\")"
              name file))))
      (format "%s = %s" name (org-babel-julia-quote-csv-field value))))

  (defvar ess-ask-for-ess-directory) ; dynamically scoped

  (defun org-babel-julia-initiate-session (session params)
    "If there is not a current julia process then create one."
    (unless (string= session "none")
      (let ((session (or session "*julia*"))
        (ess-ask-for-ess-directory
         (and (and (boundp 'ess-ask-for-ess-directory) ess-ask-for-ess-directory)
          (not (cdr (assq :dir params))))))
        (if (org-babel-comint-buffer-livep session)
        session
      (save-window-excursion
        (require 'ess) (julia)
        (rename-buffer
         (if (bufferp session)
             (buffer-name session)
           (if (stringp session)
           session
             (buffer-name))))
        (current-buffer))))))

  (defun org-babel-julia-associate-session (session)
    "Associate julia code buffer with a julia session.
  Make SESSION be the inferior ESS process associated with the
  current code buffer."
    (setq ess-local-process-name
      (process-name (get-buffer-process session)))
    (ess-make-buffer-current))

  (defun org-babel-julia-graphical-output-file (params)
    "Name of file to which julia should send graphical output."
    (and (member "graphics" (cdr (assq :result-params params)))
         (cdr (assq :file params))))

  (defvar org-babel-julia-eoe-indicator "print(\"org_babel_julia_eoe\")")
  (defvar org-babel-julia-eoe-output "org_babel_julia_eoe")

  (defvar org-babel-julia-write-object-command "writecsv(\"%s\",%s)")

  ;; The following was a very complicated write object command
  ;; The replacement needs to add error catching
  ;(defvar org-babel-julia-write-object-command "{function(object,transfer.file){object;invisible(if(inherits(try({tfile<-tempfile();write.table(object,file=tfile,sep=\"\\t\",na=\"nil\",row.names=%s,col.names=%s,quote=FALSE);file.rename(tfile,transfer.file)},silent=TRUE),\"try-error\")){if(!file.exists(transfer.file))file.create(transfer.file)})}}(object=%s,transfer.file=\"%s\")")

  (defun org-babel-julia-evaluate
    (session body result-type result-params column-names-p row-names-p)
    "Evaluate julia code in BODY."
    (if session
        (org-babel-julia-evaluate-session
         session body result-type result-params column-names-p row-names-p)
      (org-babel-julia-evaluate-external-process
       body result-type result-params column-names-p row-names-p)))

  (defun org-babel-julia-evaluate-external-process
    (body result-type result-params column-names-p row-names-p)
    "Evaluate BODY in external julia process.
  If RESULT-TYPE equals 'output then return standard output as a
  string.  If RESULT-TYPE equals 'value then return the value of the
  last statement in BODY, as elisp."
    (cl-case result-type
      (value
       (let ((tmp-file (org-babel-temp-file "julia-")))
         (org-babel-eval org-babel-julia-command
                 (format org-babel-julia-write-object-command
                     (org-babel-process-file-name tmp-file 'noquote)
                     (format "begin\n%s\nend" body)))
         (org-babel-julia-process-value-result
      (org-babel-result-cond result-params
        (with-temp-buffer
          (insert-file-contents tmp-file)
          (buffer-string))
        (org-babel-import-elisp-from-file tmp-file '(4)))
      column-names-p)))
      (output (org-babel-eval org-babel-julia-command body))))

  (defun org-babel-julia-evaluate-session
    (session body result-type result-params column-names-p row-names-p)
    "Evaluate BODY in SESSION.
  If RESULT-TYPE equals 'output then return standard output as a
  string.  If RESULT-TYPE equals 'value then return the value of the
  last statement in BODY, as elisp."
    (cl-case result-type
      (value
       (with-temp-buffer
         (insert (org-babel-chomp body))
         (let ((ess-local-process-name
            (process-name (get-buffer-process session)))
           (ess-eval-visibly-p nil))
       (ess-eval-buffer nil)))
       (let ((tmp-file (org-babel-temp-file "julia-")))
         (org-babel-comint-eval-invisibly-and-wait-for-file
      session tmp-file
      (format org-babel-julia-write-object-command
          (org-babel-process-file-name tmp-file 'noquote) "ans"))
         (org-babel-julia-process-value-result
      (org-babel-result-cond result-params
        (with-temp-buffer
          (insert-file-contents tmp-file)
          (buffer-string))
        (org-babel-import-elisp-from-file tmp-file '(4)))
      column-names-p)))
      (output
       (mapconcat
        #'org-babel-chomp
        (butlast
         (delq nil
           (mapcar
            (lambda (line) (when (> (length line) 0) line))
            (mapcar
             (lambda (line) ;; cleanup extra prompts left in output
           (if (string-match
                "^\\([ ]*[>+\\.][ ]?\\)+\\([[0-9]+\\|[ ]\\)" line)
               (substring line (match-end 1))
             line))
             (org-babel-comint-with-output (session org-babel-julia-eoe-output)
           (insert (mapconcat #'org-babel-chomp
                      (list body org-babel-julia-eoe-indicator)
                      "\n"))
           (inferior-ess-send-input)))))) "\n"))))

  (defun org-babel-julia-process-value-result (result column-names-p)
    "julia-specific processing of return value.
  Insert hline if column names in output have been requested."
    (if column-names-p
        (cons (car result) (cons 'hline (cdr result)))
      result))

  (provide 'ob-julia)

  ;;; ob-julia.el ends here
#+END_SRC

* Looks
** Color Theme

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (load-theme 'monokai)
  ;; (load-theme 'org-beautify-theme)
#+END_SRC
** Font

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (on-mac
   (set-face-attribute 'default nil :font "Monaco-10"))

  (on-linux
   (set-face-attribute 'default nil :font "Monaco-9"))
#+END_SRC

** UI
#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  ;; encoding
  (prefer-coding-system 'utf-8-emacs-unix)
  (setq set-buffer-file-coding-system 'utf-8-emacs-unix)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)

  ;; mighty 80 char rule!
  (setq-default fill-column 80)

  (use-package power-line
    :init (powerline-default-theme))

  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (use-package org-bullets-mode
    :init (org-bullets-mode))

  ;; indentation
  (indent-guide-global-mode)

  (define-globalized-minor-mode beyeran-global-highlight-mode highlight-indentation-mode
    (lambda () (highlight-indentation-mode)))

  (beyeran-global-highlight-mode 1)
#+END_SRC
