## -*- Mode: Org-Mode; -*-
#
# emacs.org --- André Beyer <beyeran@gmail.com>
# Time-stamp: <2012-08-27 20:29:32 beyeran>
#
#+STARTUP: indent
#+STARTUP: hidestars

* Essentials
** Macros
#+begin_src emacs-lisp :tangle emacs.el
;;
;; file: emacs.el
;;


;; some macros
(defmacro sys-diversification (gnu/linux &optional darwin win)
  "System diversification for Linux, Mac and Windows, focus on Linux"
  `(cond ((sys-type 'darwin) ,darwin)
         ((sys-type 'gnu/linux) ,gnu/linux)
         ((sys-type 'windows-nt) ,win)
         (t nil)))

(defun sys-type (name)
  (if (eq system-type name)
      t
    nil))

(defmacro require-beyeran (name)
  (let ((require-symbol (intern (concat "beyeran-" name))))
    `(require ',require-symbol)))

(defun flatten (x)
  (cond ((null x) nil)
        ((listp x) (append (flatten (car x))
                           (flatten (cdr x))))
        (t (list x))))
#+end_src
** Init File
#+begin_src emacs-lisp :tangle emacs.el

;; possible differences between paths
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setenv "SHELL" shell-file-name)
(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)

;; functions for loading the right folder
(setq dotfiles-dir (file-name-directory
  (or (buffer-file-name) load-file-name)))

(setq beyeran-dir (concat dotfiles-dir "beyeran/"))
(setq extensions-dir (concat dotfiles-dir "extensions/"))

(setq color-theme-dir (concat dotfiles-dir "custom-color-themes/"))
(setq beyeran-color-theme-dir (concat color-theme-dir "beyeran/"))

(add-to-list 'load-path dotfiles-dir)
(add-to-list 'load-path beyeran-dir)
(add-to-list 'load-path extensions-dir)

(add-to-list 'custom-theme-load-path beyeran-color-theme-dir)
;; testing:
(add-to-list 'custom-theme-load-path (concat color-theme-dir "solarized/"))

(defun add-to-loadpath (name)
  (add-to-list 'load-path (concat extensions-dir name)))

(defun load-multiple (folder-list)
  (mapcar #'(lambda (n)
              (add-to-loadpath n)) folder-list))
#+end_src
** Loading Paths
#+begin_src emacs-lisp :tangle emacs.el

(setq *extension-list* '("color-theme" 
                         "paredit"
                         "org-mode"
                         "org-mode/lisp"
                         "ido"
                         "ruby-mode"
                         "haskell-mode"
                         "haskell-indent"
                         "clojure-mode"
                         "swank-clojure"
                         "prolog"
                         "scheme"
                         "scss-mode"
                         "smex"
                         "ess"
                         "ess/lisp"
                         "coffee-mode"
                         "shen-mode"
                         "maxima"
                         "java"))

(sys-diversification
 (append *extension-list* '("/usr/share/emacs/site-lisp/slime/")))

(load-multiple *extension-list*)
#+end_src
** Requirements
#+begin_src emacs-lisp :tangle emacs.el

;; requiring local files

(require-beyeran "misc")
(require-beyeran "auto-insert")
(require-beyeran "paredit")
(require-beyeran "smex")
(require-beyeran "org")
(require-beyeran "org-babel")
(require-beyeran "org-reftex")
(require-beyeran "org-export-templates")
(require-beyeran "jekyll")
(require-beyeran "ruby-mode")
(require-beyeran "haskell-mode")
(require-beyeran "clojure-mode")
(require-beyeran "prolog-mode")
;(require-beyeran "shen-mode")
;;(require-beyeran "scheme-mode")
;(require-beyeran "scss-mode")
;(require-beyeran "coffee-mode")
(require-beyeran "ess")
(require-beyeran "gtd")
;(require-beyeran "maxima")
;(require-beyeran "java")
(require-beyeran "octave")
;;(require-beyeran "erlang-mode")
(require-beyeran "slime")

#+end_src
* General Stuff
  In here there is some general stuff which means: some settings
  (tool-bar, curser etc).
** HUD & general Information
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;
;; file: beyeran-misc.el
;;

;;;;;;;; general stuff ;;;;;;;
(require 'cl)

(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(show-paren-mode 1)
(fringe-mode 0)

(setq linum-format "%d ")

(setq inhibit-spalsh-screen nil)
(setq completion-cycle-threshold 5)

(custom-set-faces
  '(default ((t (:background "#000000" :foreground "#a6a6a6"
                 :height 80 :family "Droid Sans Mono")))))


(setq inihibit-startup-echo-area-message "André")
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)

;; Alt as Meta for Mac (german keyboard layout fix)

(sys-diversification
 ()
 (progn
   (setq mac-command-modifier 'meta
         mac-option-modifier 'none
         default-input-method "MacOSX")))

#+end_src
** Color Theme
#+begin_src emacs-lisp :tangle custom-color-themes/beyeran/beyeranlinux-theme.el
;;
;; file: beyeranlinux-theme.el
;;

;;;; color-theme ;;;;
(deftheme beyeranlinux
  "a custom theme for which the documentation is still up to be edited")

(let ((class '((class color) (min-colors 89)))
	  ;; everything is completly taken from the zenburn theme
	  ;; only the colors are changed
      (beyeranlinux-fg "#ffffff")
      (beyeranlinux-fg-1 "#c7f464")
      (beyeranlinux-bg-1 "#080808")
      (beyeranlinux-bg-05 "#556270")
      (beyeranlinux-bg "#383838")
      (beyeranlinux-bg+1 "#556270")
      (beyeranlinux-bg+2 "#556270")
      (beyeranlinux-bg+3 "#556270")
      (beyeranlinux-red+1 "#c44d58")
      (beyeranlinux-red   "#c44d58")
      (beyeranlinux-red-1 "#c44d58")
      (beyeranlinux-red-2 "#c44d58")
      (beyeranlinux-red-3 "#c44d58")
      (beyeranlinux-red-4 "#c44d58")
      (beyeranlinux-orange "#ff6b6b")
      (beyeranlinux-yellow "#c44d58")
      (beyeranlinux-yellow-1 "#c44d58")
      (beyeranlinux-yellow-2 "#c44d58")
      (beyeranlinux-green-1 "#5f7f5f")
      (beyeranlinux-green   "#7f9f7f")
      (beyeranlinux-green+1 "#8fb28f")
      (beyeranlinux-green+2 "#9fc59f")
      (beyeranlinux-green+3 "#afd8af")
      (beyeranlinux-green+4 "#bfebbf")
      (beyeranlinux-cyan "#93e0e3")
      (beyeranlinux-blue+1 "#4ecdc4")
      (beyeranlinux-blue "#4ecdc4")
      (beyeranlinux-blue-1 "#4ecdc4")
      (beyeranlinux-blue-2 "#4ecdc4")
      (beyeranlinux-blue-3 "#4ecdc4")
      (beyeranlinux-blue-4 "#4ecdc4")
      (beyeranlinux-blue-5 "#4ecdc4")
      (beyeranlinux-magenta "#dc8cc3"))
  (custom-theme-set-faces
   'beyeranlinux
   '(button ((t (:underline t))))
   `(link ((,class (:foreground ,beyeranlinux-yellow :underline t :weight bold))))
   `(link-visited ((,class (:foreground ,beyeranlinux-yellow-2 :underline t :weight normal))))

   ;;; basic coloring
   `(default ((,class (:foreground ,beyeranlinux-fg :background ,beyeranlinux-bg))))
   `(cursor ((,class (:foreground ,beyeranlinux-fg))))
   `(escape-glyph-face ((,class (:foreground ,beyeranlinux-red))))
   `(fringe ((,class (:foreground ,beyeranlinux-fg :background ,beyeranlinux-bg+1))))
   `(header-line ((,class (:foreground ,beyeranlinux-yellow
                                       :background ,beyeranlinux-bg-1
                                       :box (:line-width -1 :style released-button)))))
   `(highlight ((,class (:background ,beyeranlinux-bg-05))))

   ;;; compilation
   `(compilation-column-face ((,class (:foreground ,beyeranlinux-yellow))))
   `(compilation-enter-directory-face ((,class (:foreground ,beyeranlinux-green))))
   `(compilation-error-face ((,class (:foreground ,beyeranlinux-red-1 :weight bold :underline t))))
   `(compilation-face ((,class (:foreground ,beyeranlinux-fg))))
   `(compilation-info-face ((,class (:foreground ,beyeranlinux-blue))))
   `(compilation-info ((,class (:foreground ,beyeranlinux-green+4 :underline t))))
   `(compilation-leave-directory-face ((,class (:foreground ,beyeranlinux-green))))
   `(compilation-line-face ((,class (:foreground ,beyeranlinux-yellow))))
   `(compilation-line-number ((,class (:foreground ,beyeranlinux-yellow))))
   `(compilation-message-face ((,class (:foreground ,beyeranlinux-blue))))
   `(compilation-warning-face ((,class (:foreground ,beyeranlinux-yellow-1 :weight bold :underline t))))

   ;;; grep
   `(grep-context-face ((,class (:foreground ,beyeranlinux-fg))))
   `(grep-error-face ((,class (:foreground ,beyeranlinux-red-1 :weight bold :underline t))))
   `(grep-hit-face ((,class (:foreground ,beyeranlinux-blue))))
   `(grep-match-face ((,class (:foreground ,beyeranlinux-orange :weight bold))))
   `(match ((,class (:background ,beyeranlinux-bg-1 :foreground ,beyeranlinux-orange :weight bold))))

   ;; faces used by isearch
   `(isearch ((,class (:foreground ,beyeranlinux-yellow :background ,beyeranlinux-bg-1))))
   `(isearch-fail ((,class (:foreground ,beyeranlinux-fg :background ,beyeranlinux-red-4))))
   `(lazy-highlight ((,class (:foreground ,beyeranlinux-yellow :background ,beyeranlinux-bg+2))))

   `(menu ((,class (:foreground ,beyeranlinux-fg :background ,beyeranlinux-bg))))
   `(minibuffer-prompt ((,class (:foreground ,beyeranlinux-yellow))))
   `(mode-line
     ((,class (:foreground ,beyeranlinux-green+1
                           :background ,beyeranlinux-bg-1
                           :box (:line-width -1 :style released-button)))))
   `(mode-line-buffer-id ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(mode-line-inactive
     ((,class (:foreground ,beyeranlinux-green-1
                           :background ,beyeranlinux-bg-05
                           :box (:line-width -1 :style released-button)))))
   `(region ((,class (:background ,beyeranlinux-bg-1))))
   `(secondary-selection ((,class (:background ,beyeranlinux-bg+2))))
   `(trailing-whitespace ((,class (:background ,beyeranlinux-red))))
   `(vertical-border ((,class (:foreground ,beyeranlinux-fg))))

   ;;; font lock
   `(font-lock-builtin-face ((,class (:foreground ,beyeranlinux-blue))))
   `(font-lock-comment-face ((,class (:foreground ,beyeranlinux-green))))
   `(font-lock-comment-delimiter-face ((,class (:foreground ,beyeranlinux-green))))
   `(font-lock-constant-face ((,class (:foreground ,beyeranlinux-green+4))))
   `(font-lock-doc-face ((,class (:foreground ,beyeranlinux-green+1))))
   `(font-lock-doc-string-face ((,class (:foreground ,beyeranlinux-blue+1))))
   `(font-lock-function-name-face ((,class (:foreground ,beyeranlinux-blue))))
   `(font-lock-keyword-face ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(font-lock-negation-char-face ((,class (:foreground ,beyeranlinux-fg))))
   `(font-lock-preprocessor-face ((,class (:foreground ,beyeranlinux-blue))))
   `(font-lock-string-face ((,class (:foreground ,beyeranlinux-red))))
   `(font-lock-type-face ((,class (:foreground ,beyeranlinux-blue))))
   `(font-lock-variable-name-face ((,class (:foreground ,beyeranlinux-orange))))
   `(font-lock-warning-face ((,class (:foreground ,beyeranlinux-yellow-1 :weight bold :underline t))))

   `(c-annotation-face ((,class (:inherit font-lock-constant-face))))

   ;;; newsticker
   `(newsticker-date-face ((,class (:foreground ,beyeranlinux-fg))))
   `(newsticker-default-face ((,class (:foreground ,beyeranlinux-fg))))
   `(newsticker-enclosure-face ((,class (:foreground ,beyeranlinux-green+3))))
   `(newsticker-extra-face ((,class (:foreground ,beyeranlinux-bg+2 :height 0.8))))
   `(newsticker-feed-face ((,class (:foreground ,beyeranlinux-fg))))
   `(newsticker-immortal-item-face ((,class (:foreground ,beyeranlinux-green))))
   `(newsticker-new-item-face ((,class (:foreground ,beyeranlinux-blue))))
   `(newsticker-obsolete-item-face ((,class (:foreground ,beyeranlinux-red))))
   `(newsticker-old-item-face ((,class (:foreground ,beyeranlinux-bg+3))))
   `(newsticker-statistics-face ((,class (:foreground ,beyeranlinux-fg))))
   `(newsticker-treeview-face ((,class (:foreground ,beyeranlinux-fg))))
   `(newsticker-treeview-immortal-face ((,class (:foreground ,beyeranlinux-green))))
   `(newsticker-treeview-listwindow-face ((,class (:foreground ,beyeranlinux-fg))))
   `(newsticker-treeview-new-face ((,class (:foreground ,beyeranlinux-blue :weight bold))))
   `(newsticker-treeview-obsolete-face ((,class (:foreground ,beyeranlinux-red))))
   `(newsticker-treeview-old-face ((,class (:foreground ,beyeranlinux-bg+3))))
   `(newsticker-treeview-selection-face ((,class (:foreground ,beyeranlinux-yellow))))

   ;;; external

   ;; full-ack
   `(ack-separator ((,class (:foreground ,beyeranlinux-fg))))
   `(ack-file ((,class (:foreground ,beyeranlinux-blue))))
   `(ack-line ((,class (:foreground ,beyeranlinux-yellow))))
   `(ack-match ((,class (:foreground ,beyeranlinux-orange :background ,beyeranlinux-bg-1 :weigth bold))))

   ;; auctex
   `(font-latex-bold ((,class (:inherit bold))))
   `(font-latex-warning ((,class (:inherit font-lock-warning))))
   `(font-latex-sedate ((,class (:foreground ,beyeranlinux-yellow :weight bold ))))
   `(font-latex-title-4 ((,class (:inherit variable-pitch :weight bold))))

   ;; auto-complete
   `(ac-candidate-face ((,class (:background ,beyeranlinux-bg+3 :foreground "black"))))
   `(ac-selection-face ((,class (:background ,beyeranlinux-blue-4 :foreground ,beyeranlinux-fg))))
   `(popup-tip-face ((,class (:background ,beyeranlinux-yellow-2 :foreground "black"))))
   `(popup-scroll-bar-foreground-face ((,class (:background ,beyeranlinux-blue-5))))
   `(popup-scroll-bar-background-face ((,class (:background ,beyeranlinux-bg-1))))
   `(popup-isearch-match ((,class (:background ,beyeranlinux-bg :foreground ,beyeranlinux-fg))))

   ;; diff
   `(diff-added ((,class (:foreground ,beyeranlinux-green+4))))
   `(diff-changed ((,class (:foreground ,beyeranlinux-yellow))))
   `(diff-removed ((,class (:foreground ,beyeranlinux-red))))
   `(diff-header ((,class (:background ,beyeranlinux-bg+2))))
   `(diff-file-header
     ((,class (:background ,beyeranlinux-bg+2 :foreground ,beyeranlinux-fg :bold t))))

   ;; ert
   `(ert-test-result-expected ((,class (:foreground ,beyeranlinux-green+4 :background ,beyeranlinux-bg))))
   `(ert-test-result-unexpected ((,class (:foreground ,beyeranlinux-red :background ,beyeranlinux-bg))))

   ;; eshell
   `(eshell-prompt ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(eshell-ls-archive ((,class (:foreground ,beyeranlinux-red-1 :weight bold))))
   `(eshell-ls-backup ((,class (:inherit font-lock-comment))))
   `(eshell-ls-clutter ((,class (:inherit font-lock-comment))))
   `(eshell-ls-directory ((,class (:foreground ,beyeranlinux-blue+1 :weight bold))))
   `(eshell-ls-executable ((,class (:foreground ,beyeranlinux-red+1 :weight bold))))
   `(eshell-ls-unreadable ((,class (:foreground ,beyeranlinux-fg))))
   `(eshell-ls-missing ((,class (:inherit font-lock-warning))))
   `(eshell-ls-product ((,class (:inherit font-lock-doc))))
   `(eshell-ls-special ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(eshell-ls-symlink ((,class (:foreground ,beyeranlinux-cyan :weight bold))))

   ;; flymake
   `(flymake-errline ((,class (:foreground ,beyeranlinux-red-1 :weight bold :underline t))))
   `(flymake-warnline ((,class (:foreground ,beyeranlinux-yellow-1 :weight bold :underline t))))

   ;; flyspell
   `(flyspell-duplicate ((,class (:foreground ,beyeranlinux-yellow-1 :weight bold :underline t))))
   `(flyspell-incorrect ((,class (:foreground ,beyeranlinux-red-1 :weight bold :underline t))))

   ;; erc
   `(erc-action-face ((,class (:inherit erc-default-face))))
   `(erc-bold-face ((,class (:weight bold))))
   `(erc-current-nick-face ((,class (:foreground ,beyeranlinux-blue :weight bold))))
   `(erc-dangerous-host-face ((,class (:inherit font-lock-warning))))
   `(erc-default-face ((,class (:foreground ,beyeranlinux-fg))))
   `(erc-direct-msg-face ((,class (:inherit erc-default))))
   `(erc-error-face ((,class (:inherit font-lock-warning))))
   `(erc-fool-face ((,class (:inherit erc-default))))
   `(erc-highlight-face ((,class (:inherit hover-highlight))))
   `(erc-input-face ((,class (:foreground ,beyeranlinux-yellow))))
   `(erc-keyword-face ((,class (:foreground ,beyeranlinux-blue :weight bold))))
   `(erc-nick-default-face ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(erc-my-nick-face ((,class (:foreground ,beyeranlinux-red :weigth bold))))
   `(erc-nick-msg-face ((,class (:inherit erc-default))))
   `(erc-notice-face ((,class (:foreground ,beyeranlinux-green))))
   `(erc-pal-face ((,class (:foreground ,beyeranlinux-orange :weight bold))))
   `(erc-prompt-face ((,class (:foreground ,beyeranlinux-orange :background ,beyeranlinux-bg :weight bold))))
   `(erc-timestamp-face ((,class (:foreground ,beyeranlinux-green+1))))
   `(erc-underline-face ((t (:underline t))))

   ;; gnus
   `(gnus-group-mail-1 ((,class (:bold t :inherit gnus-group-mail-1-empty))))
   `(gnus-group-mail-1-empty ((,class (:inherit gnus-group-news-1-empty))))
   `(gnus-group-mail-2 ((,class (:bold t :inherit gnus-group-mail-2-empty))))
   `(gnus-group-mail-2-empty ((,class (:inherit gnus-group-news-2-empty))))
   `(gnus-group-mail-3 ((,class (:bold t :inherit gnus-group-mail-3-empty))))
   `(gnus-group-mail-3-empty ((,class (:inherit gnus-group-news-3-empty))))
   `(gnus-group-mail-4 ((,class (:bold t :inherit gnus-group-mail-4-empty))))
   `(gnus-group-mail-4-empty ((,class (:inherit gnus-group-news-4-empty))))
   `(gnus-group-mail-5 ((,class (:bold t :inherit gnus-group-mail-5-empty))))
   `(gnus-group-mail-5-empty ((,class (:inherit gnus-group-news-5-empty))))
   `(gnus-group-mail-6 ((,class (:bold t :inherit gnus-group-mail-6-empty))))
   `(gnus-group-mail-6-empty ((,class (:inherit gnus-group-news-6-empty))))
   `(gnus-group-mail-low ((,class (:bold t :inherit gnus-group-mail-low-empty))))
   `(gnus-group-mail-low-empty ((,class (:inherit gnus-group-news-low-empty))))
   `(gnus-group-news-1 ((,class (:bold t :inherit gnus-group-news-1-empty))))
   `(gnus-group-news-2 ((,class (:bold t :inherit gnus-group-news-2-empty))))
   `(gnus-group-news-3 ((,class (:bold t :inherit gnus-group-news-3-empty))))
   `(gnus-group-news-4 ((,class (:bold t :inherit gnus-group-news-4-empty))))
   `(gnus-group-news-5 ((,class (:bold t :inherit gnus-group-news-5-empty))))
   `(gnus-group-news-6 ((,class (:bold t :inherit gnus-group-news-6-empty))))
   `(gnus-group-news-low ((,class (:bold t :inherit gnus-group-news-low-empty))))
   `(gnus-header-content ((,class (:inherit message-header-other))))
   `(gnus-header-from ((,class (:inherit message-header-from))))
   `(gnus-header-name ((,class (:inherit message-header-name))))
   `(gnus-header-newsgroups ((,class (:inherit message-header-other))))
   `(gnus-header-subject ((,class (:inherit message-header-subject))))
   `(gnus-summary-cancelled ((,class (:foreground ,beyeranlinux-orange))))
   `(gnus-summary-high-ancient ((,class (:foreground ,beyeranlinux-blue))))
   `(gnus-summary-high-read ((,class (:foreground ,beyeranlinux-green :weight bold))))
   `(gnus-summary-high-ticked ((,class (:foreground ,beyeranlinux-orange :weight bold))))
   `(gnus-summary-high-unread ((,class (:foreground ,beyeranlinux-fg :weight bold))))
   `(gnus-summary-low-ancient ((,class (:foreground ,beyeranlinux-blue))))
   `(gnus-summary-low-read ((t (:foreground ,beyeranlinux-green))))
   `(gnus-summary-low-ticked ((,class (:foreground ,beyeranlinux-orange :weight bold))))
   `(gnus-summary-low-unread ((,class (:foreground ,beyeranlinux-fg))))
   `(gnus-summary-normal-ancient ((,class (:foreground ,beyeranlinux-blue))))
   `(gnus-summary-normal-read ((,class (:foreground ,beyeranlinux-green))))
   `(gnus-summary-normal-ticked ((,class (:foreground ,beyeranlinux-orange :weight bold))))
   `(gnus-summary-normal-unread ((,class (:foreground ,beyeranlinux-fg))))
   `(gnus-summary-selected ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(gnus-cite-1 ((,class (:foreground ,beyeranlinux-blue))))
   `(gnus-cite-10 ((,class (:foreground ,beyeranlinux-yellow-1))))
   `(gnus-cite-11 ((,class (:foreground ,beyeranlinux-yellow))))
   `(gnus-cite-2 ((,class (:foreground ,beyeranlinux-blue-1))))
   `(gnus-cite-3 ((,class (:foreground ,beyeranlinux-blue-2))))
   `(gnus-cite-4 ((,class (:foreground ,beyeranlinux-green+2))))
   `(gnus-cite-5 ((,class (:foreground ,beyeranlinux-green+1))))
   `(gnus-cite-6 ((,class (:foreground ,beyeranlinux-green))))
   `(gnus-cite-7 ((,class (:foreground ,beyeranlinux-red))))
   `(gnus-cite-8 ((,class (:foreground ,beyeranlinux-red-1))))
   `(gnus-cite-9 ((,class (:foreground ,beyeranlinux-red-2))))
   `(gnus-group-news-1-empty ((,class (:foreground ,beyeranlinux-yellow))))
   `(gnus-group-news-2-empty ((,class (:foreground ,beyeranlinux-green+3))))
   `(gnus-group-news-3-empty ((,class (:foreground ,beyeranlinux-green+1))))
   `(gnus-group-news-4-empty ((,class (:foreground ,beyeranlinux-blue-2))))
   `(gnus-group-news-5-empty ((,class (:foreground ,beyeranlinux-blue-3))))
   `(gnus-group-news-6-empty ((,class (:foreground ,beyeranlinux-bg+2))))
   `(gnus-group-news-low-empty ((,class (:foreground ,beyeranlinux-bg+2))))
   `(gnus-signature ((,class (:foreground ,beyeranlinux-yellow))))
   `(gnus-x ((,class (:background ,beyeranlinux-fg :foreground ,beyeranlinux-bg))))

   ;; helm
   `(helm-header
     ((,class (:foreground ,beyeranlinux-green
                           :background ,beyeranlinux-bg
                           :underline nil
                           :box nil))))
   `(helm-source-header
     ((,class (:foreground ,beyeranlinux-yellow
                           :background ,beyeranlinux-bg-1
                           :underline nil
                           :weight bold
                           :box (:line-width -1 :style released-button)))))
   `(helm-selection ((,class (:background ,beyeranlinux-bg+1 :underline nil))))
   `(helm-selection-line ((,class (:background ,beyeranlinux-bg+1))))
   `(helm-visible-mark ((,class (:foreground ,beyeranlinux-bg :background ,beyeranlinux-yellow-2))))
   `(helm-candidate-number ((,class (:foreground ,beyeranlinux-green+4 :background ,beyeranlinux-bg-1))))

   ;; hl-line-mode
   `(hl-line-face ((,class (:background ,beyeranlinux-bg-1))))

   ;; ido-mode
   `(ido-first-match ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(ido-only-match ((,class (:foreground ,beyeranlinux-orange :weight bold))))
   `(ido-subdir ((,class (:foreground ,beyeranlinux-yellow))))

   ;; js2-mode
   `(js2-warning-face ((,class (:underline ,beyeranlinux-orange))))
   `(js2-error-face ((,class (:foreground ,beyeranlinux-red :weight bold))))
   `(js2-jsdoc-tag-face ((,class (:foreground ,beyeranlinux-green-1))))
   `(js2-jsdoc-type-face ((,class (:foreground ,beyeranlinux-green+2))))
   `(js2-jsdoc-value-face ((,class (:foreground ,beyeranlinux-green+3))))
   `(js2-function-param-face ((,class (:foreground, beyeranlinux-green+3))))
   `(js2-external-variable-face ((,class (:foreground ,beyeranlinux-orange))))

   ;; jabber-mode
   `(jabber-roster-user-away ((,class (:foreground ,beyeranlinux-green+2))))
   `(jabber-roster-user-online ((,class (:foreground ,beyeranlinux-blue-1))))
   `(jabber-roster-user-dnd ((,class (:foreground ,beyeranlinux-red+1))))
   `(jabber-rare-time-face ((,class (:foreground ,beyeranlinux-green+1))))
   `(jabber-chat-prompt-local ((,class (:foreground ,beyeranlinux-blue-1))))
   `(jabber-chat-prompt-foreign ((,class (:foreground ,beyeranlinux-red+1))))
   `(jabber-activity-face((,class (:foreground ,beyeranlinux-red+1))))
   `(jabber-activity-personal-face ((,class (:foreground ,beyeranlinux-blue+1))))
   `(jabber-title-small ((,class (:height 1.1 :weight bold))))
   `(jabber-title-medium ((,class (:height 1.2 :weight bold))))
   `(jabber-title-large ((,class (:height 1.3 :weight bold))))

   ;; linum-mode
   `(linum ((,class (:foreground ,beyeranlinux-green+2 :background ,beyeranlinux-bg))))

   ;; magit
   `(magit-section-title ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(magit-branch ((,class (:foreground ,beyeranlinux-orange :weight bold))))
   `(magit-item-highlight ((,class (:background ,beyeranlinux-bg+1))))

   ;; message-mode
   `(message-cited-text ((,class (:inherit font-lock-comment))))
   `(message-header-name ((,class (:foreground ,beyeranlinux-green+1))))
   `(message-header-other ((,class (:foreground ,beyeranlinux-green))))
   `(message-header-to ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(message-header-from ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(message-header-cc ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(message-header-newsgroups ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(message-header-subject ((,class (:foreground ,beyeranlinux-orange :weight bold))))
   `(message-header-xheader ((,class (:foreground ,beyeranlinux-green))))
   `(message-mml ((,class (:foreground ,beyeranlinux-yellow :weight bold))))
   `(message-separator ((,class (:inherit font-lock-comment))))

   ;; mew
   `(mew-face-header-subject ((,class (:foreground ,beyeranlinux-orange))))
   `(mew-face-header-from ((,class (:foreground ,beyeranlinux-yellow))))
   `(mew-face-header-date ((,class (:foreground ,beyeranlinux-green))))
   `(mew-face-header-to ((,class (:foreground ,beyeranlinux-red))))
   `(mew-face-header-key ((,class (:foreground ,beyeranlinux-green))))
   `(mew-face-header-private ((,class (:foreground ,beyeranlinux-green))))
   `(mew-face-header-important ((,class (:foreground ,beyeranlinux-blue))))
   `(mew-face-header-marginal ((,class (:foreground ,beyeranlinux-fg :weight bold))))
   `(mew-face-header-warning ((,class (:foreground ,beyeranlinux-red))))
   `(mew-face-header-xmew ((,class (:foreground ,beyeranlinux-green))))
   `(mew-face-header-xmew-bad ((,class (:foreground ,beyeranlinux-red))))
   `(mew-face-body-url ((,class (:foreground ,beyeranlinux-orange))))
   `(mew-face-body-comment ((,class (:foreground ,beyeranlinux-fg :slant italic))))
   `(mew-face-body-cite1 ((,class (:foreground ,beyeranlinux-green))))
   `(mew-face-body-cite2 ((,class (:foreground ,beyeranlinux-blue))))
   `(mew-face-body-cite3 ((,class (:foreground ,beyeranlinux-orange))))
   `(mew-face-body-cite4 ((,class (:foreground ,beyeranlinux-yellow))))
   `(mew-face-body-cite5 ((,class (:foreground ,beyeranlinux-red))))
   `(mew-face-mark-review ((,class (:foreground ,beyeranlinux-blue))))
   `(mew-face-mark-escape ((,class (:foreground ,beyeranlinux-green))))
   `(mew-face-mark-delete ((,class (:foreground ,beyeranlinux-red))))
   `(mew-face-mark-unlink ((,class (:foreground ,beyeranlinux-yellow))))
   `(mew-face-mark-refile ((,class (:foreground ,beyeranlinux-green))))
   `(mew-face-mark-unread ((,class (:foreground ,beyeranlinux-red-2))))
   `(mew-face-eof-message ((,class (:foreground ,beyeranlinux-green))))
   `(mew-face-eof-part ((,class (:foreground ,beyeranlinux-yellow))))

   ;; mic-paren
   `(paren-face-match ((,class (:foreground ,beyeranlinux-cyan :background ,beyeranlinux-bg :weight bold))))
   `(paren-face-mismatch ((,class (:foreground ,beyeranlinux-bg :background ,beyeranlinux-magenta :weight bold))))
   `(paren-face-no-match ((,class (:foreground ,beyeranlinux-bg :background ,beyeranlinux-red :weight bold))))

   ;; nav
   `(nav-face-heading ((,class (:foreground ,beyeranlinux-yellow))))
   `(nav-face-button-num ((,class (:foreground ,beyeranlinux-cyan))))
   `(nav-face-dir ((,class (:foreground ,beyeranlinux-green))))
   `(nav-face-hdir ((,class (:foreground ,beyeranlinux-red))))
   `(nav-face-file ((,class (:foreground ,beyeranlinux-fg))))
   `(nav-face-hfile ((,class (:foreground ,beyeranlinux-red-4))))

   ;; mumamo
   `(mumamo-background-chunk-major ((,class (:background nil))))
   `(mumamo-background-chunk-submode1 ((,class (:background ,beyeranlinux-bg-1))))
   `(mumamo-background-chunk-submode2 ((,class (:background ,beyeranlinux-bg+2))))
   `(mumamo-background-chunk-submode3 ((,class (:background ,beyeranlinux-bg+3))))
   `(mumamo-background-chunk-submode4 ((,class (:background ,beyeranlinux-bg+1))))

   ;; org-mode
   `(org-agenda-date-today
     ((,class (:foreground "white" :slant italic :weight bold))) t)
   `(org-agenda-structure
     ((,class (:inherit font-lock-comment-face))))
   `(org-archived ((,class (:foreground ,beyeranlinux-fg :weight bold))))
   `(org-checkbox ((,class (:background ,beyeranlinux-bg+2 :foreground "white"
                                   :box (:line-width 1 :style released-button)))))
   `(org-date ((,class (:foreground ,beyeranlinux-blue :underline t))))
   `(org-deadline-announce ((,class (:foreground ,beyeranlinux-red-1))))
   `(org-done ((,class (:bold t :weight bold :foreground ,beyeranlinux-green+3))))
   `(org-formula ((,class (:foreground ,beyeranlinux-yellow-2))))
   `(org-headline-done ((,class (:foreground ,beyeranlinux-green+3))))
   `(org-hide ((,class (:foreground ,beyeranlinux-bg-1))))
   `(org-level-1 ((,class (:foreground ,beyeranlinux-orange))))
   `(org-level-2 ((,class (:foreground ,beyeranlinux-green+1))))
   `(org-level-3 ((,class (:foreground ,beyeranlinux-blue-1))))
   `(org-level-4 ((,class (:foreground ,beyeranlinux-yellow-2))))
   `(org-level-5 ((,class (:foreground ,beyeranlinux-cyan))))
   `(org-level-6 ((,class (:foreground ,beyeranlinux-green-1))))
   `(org-level-7 ((,class (:foreground ,beyeranlinux-red-4))))
   `(org-level-8 ((,class (:foreground ,beyeranlinux-blue-4))))
   `(org-link ((,class (:foreground ,beyeranlinux-yellow-2 :underline t))))
   `(org-scheduled ((,class (:foreground ,beyeranlinux-green+4))))
   `(org-scheduled-previously ((,class (:foreground ,beyeranlinux-red-4))))
   `(org-scheduled-today ((,class (:foreground ,beyeranlinux-blue+1))))
   `(org-special-keyword ((,class (:foreground ,beyeranlinux-yellow-1))))
   `(org-table ((,class (:foreground ,beyeranlinux-green+2))))
   `(org-tag ((,class (:bold t :weight bold))))
   `(org-time-grid ((,class (:foreground ,beyeranlinux-orange))))
   `(org-todo ((,class (:bold t :foreground ,beyeranlinux-red :weight bold))))
   `(org-upcoming-deadline ((,class (:inherit font-lock-keyword-face))))
   `(org-warning ((,class (:bold t :foreground ,beyeranlinux-red :weight bold :underline nil))))
   `(org-column ((,class (:background ,beyeranlinux-bg-1))))
   `(org-column-title ((,class (:background ,beyeranlinux-bg-1 :underline t :weight bold))))

   ;; outline
   `(outline-8 ((,class (:inherit default))))
   `(outline-7 ((,class (:inherit outline-8 :height 1.0))))
   `(outline-6 ((,class (:inherit outline-7 :height 1.0))))
   `(outline-5 ((,class (:inherit outline-6 :height 1.0))))
   `(outline-4 ((,class (:inherit outline-5 :height 1.0))))
   `(outline-3 ((,class (:inherit outline-4 :height 1.0))))
   `(outline-2 ((,class (:inherit outline-3 :height 1.0))))
   `(outline-1 ((,class (:inherit outline-2 :height 1.0))))

   ;; rainbow-delimiters
   `(rainbow-delimiters-depth-1-face ((,class (:foreground ,beyeranlinux-cyan))))
   `(rainbow-delimiters-depth-2-face ((,class (:foreground ,beyeranlinux-yellow))))
   `(rainbow-delimiters-depth-3-face ((,class (:foreground ,beyeranlinux-blue+1))))
   `(rainbow-delimiters-depth-4-face ((,class (:foreground ,beyeranlinux-red+1))))
   `(rainbow-delimiters-depth-5-face ((,class (:foreground ,beyeranlinux-orange))))
   `(rainbow-delimiters-depth-6-face ((,class (:foreground ,beyeranlinux-blue-1))))
   `(rainbow-delimiters-depth-7-face ((,class (:foreground ,beyeranlinux-green+4))))
   `(rainbow-delimiters-depth-8-face ((,class (:foreground ,beyeranlinux-red-3))))
   `(rainbow-delimiters-depth-9-face ((,class (:foreground ,beyeranlinux-yellow-2))))
   `(rainbow-delimiters-depth-10-face ((,class (:foreground ,beyeranlinux-green+2))))
   `(rainbow-delimiters-depth-11-face ((,class (:foreground ,beyeranlinux-blue+1))))
   `(rainbow-delimiters-depth-12-face ((,class (:foreground ,beyeranlinux-red-4))))

   ;; rpm-mode
   `(rpm-spec-dir-face ((,class (:foreground ,beyeranlinux-green))))
   `(rpm-spec-doc-face ((,class (:foreground ,beyeranlinux-green))))
   `(rpm-spec-ghost-face ((,class (:foreground ,beyeranlinux-red))))
   `(rpm-spec-macro-face ((,class (:foreground ,beyeranlinux-yellow))))
   `(rpm-spec-obsolete-tag-face ((,class (:foreground ,beyeranlinux-red))))
   `(rpm-spec-package-face ((,class (:foreground ,beyeranlinux-red))))
   `(rpm-spec-section-face ((,class (:foreground ,beyeranlinux-yellow))))
   `(rpm-spec-tag-face ((,class (:foreground ,beyeranlinux-blue))))
   `(rpm-spec-var-face ((,class (:foreground ,beyeranlinux-red))))

   ;; rst-mode
   `(rst-level-1-face ((,class (:foreground ,beyeranlinux-orange))))
   `(rst-level-2-face ((,class (:foreground ,beyeranlinux-green+1))))
   `(rst-level-3-face ((,class (:foreground ,beyeranlinux-blue-1))))
   `(rst-level-4-face ((,class (:foreground ,beyeranlinux-yellow-2))))
   `(rst-level-5-face ((,class (:foreground ,beyeranlinux-cyan))))
   `(rst-level-6-face ((,class (:foreground ,beyeranlinux-green-1))))

   ;; show-paren
   `(show-paren-mismatch ((,class (:foreground ,beyeranlinux-red-3 :background ,beyeranlinux-bg :weight bold))))
   `(show-paren-match ((,class (:foreground ,beyeranlinux-blue-1 :background ,beyeranlinux-bg :weight bold))))

   ;; SLIME
   `(slime-repl-inputed-output-face ((,class (:foreground ,beyeranlinux-red))))

   ;; volatile-highlights
   `(vhl/default-face ((,class (:background ,beyeranlinux-bg+1))))

   ;; whitespace-mode
   `(whitespace-space ((,class (:background ,beyeranlinux-bg :foreground ,beyeranlinux-bg+1))))
   `(whitespace-hspace ((,class (:background ,beyeranlinux-bg :foreground ,beyeranlinux-bg+1))))
   `(whitespace-tab ((,class (:background ,beyeranlinux-bg :foreground ,beyeranlinux-red))))
   `(whitespace-newline ((,class (:foreground ,beyeranlinux-bg+1))))
   `(whitespace-trailing ((,class (:foreground ,beyeranlinux-red :background ,beyeranlinux-bg))))
   `(whitespace-line ((,class (:background ,beyeranlinux-bg-05 :foreground ,beyeranlinux-magenta))))
   `(whitespace-space-before-tab ((,class (:background ,beyeranlinux-orange :foreground ,beyeranlinux-orange))))
   `(whitespace-indentation ((,class (:background ,beyeranlinux-yellow :foreground ,beyeranlinux-red))))
   `(whitespace-empty ((,class (:background ,beyeranlinux-yellow :foreground ,beyeranlinux-red))))
   `(whitespace-space-after-tab ((,class (:background ,beyeranlinux-yellow :foreground ,beyeranlinux-red))))

   ;; wanderlust
   `(wl-highlight-folder-few-face ((,class (:foreground ,beyeranlinux-red-2))))
   `(wl-highlight-folder-many-face ((,class (:foreground ,beyeranlinux-red-1))))
   `(wl-highlight-folder-path-face ((,class (:foreground ,beyeranlinux-orange))))
   `(wl-highlight-folder-unread-face ((,class (:foreground ,beyeranlinux-blue))))
   `(wl-highlight-folder-zero-face ((,class (:foreground ,beyeranlinux-fg))))
   `(wl-highlight-folder-unknown-face ((,class (:foreground ,beyeranlinux-blue))))
   `(wl-highlight-message-citation-header ((,class (:foreground ,beyeranlinux-red-1))))
   `(wl-highlight-message-cited-text-1 ((,class (:foreground ,beyeranlinux-red))))
   `(wl-highlight-message-cited-text-2 ((,class (:foreground ,beyeranlinux-green+2))))
   `(wl-highlight-message-cited-text-3 ((,class (:foreground ,beyeranlinux-blue))))
   `(wl-highlight-message-cited-text-4 ((,class (:foreground ,beyeranlinux-blue+1))))
   `(wl-highlight-message-header-contents-face ((,class (:foreground ,beyeranlinux-green))))
   `(wl-highlight-message-headers-face ((,class (:foreground ,beyeranlinux-red+1))))
   `(wl-highlight-message-important-header-contents ((,class (:foreground ,beyeranlinux-green+2))))
   `(wl-highlight-message-header-contents ((,class (:foreground ,beyeranlinux-green+1))))
   `(wl-highlight-message-important-header-contents2 ((,class (:foreground ,beyeranlinux-green+2))))
   `(wl-highlight-message-signature ((,class (:foreground ,beyeranlinux-green))))
   `(wl-highlight-message-unimportant-header-contents ((,class (:foreground ,beyeranlinux-fg))))
   `(wl-highlight-summary-answered-face ((,class (:foreground ,beyeranlinux-blue))))
   `(wl-highlight-summary-disposed-face ((,class (:foreground ,beyeranlinux-fg
                                                         :slant italic))))
   `(wl-highlight-summary-new-face ((,class (:foreground ,beyeranlinux-blue))))
   `(wl-highlight-summary-normal-face ((,class (:foreground ,beyeranlinux-fg))))
   `(wl-highlight-summary-thread-top-face ((,class (:foreground ,beyeranlinux-yellow))))
   `(wl-highlight-thread-indent-face ((,class (:foreground ,beyeranlinux-magenta))))
   `(wl-highlight-summary-refiled-face ((,class (:foreground ,beyeranlinux-fg))))
   `(wl-highlight-summary-displaying-face ((,class (:underline t :weight bold))))

   ;; which-func-mode
   `(which-func ((,class (:foreground ,beyeranlinux-green+4))))

   ;; yascroll
   `(yascroll:thumb-text-area ((,class (:background ,beyeranlinux-bg-1))))
   `(yascroll:thumb-fringe ((,class (:background ,beyeranlinux-bg-1 :foreground ,beyeranlinux-bg-1))))))


(provide-theme 'beyeranlinux)
#+end_src

#+begin_src emacs-lisp :tangle custom-color-themes/beyeran/zenburn-theme.el
(deftheme zenburn "The Zenburn color theme")

(let ((class '((class color) (min-colors 89)))
      ;; Zenburn palette
      ;; colors with +x are lighter, colors with -x are darker
      (zenburn-fg "#dcdccc")
      (zenburn-fg-1 "#656555")
      (zenburn-bg-1 "#2b2b2b")
      (zenburn-bg-05 "#383838")
      (zenburn-bg "#3f3f3f")
      (zenburn-bg+1 "#4f4f4f")
      (zenburn-bg+2 "#5f5f5f")
      (zenburn-bg+3 "#6f6f6f")
      (zenburn-red+1 "#dca3a3")
      (zenburn-red "#cc9393")
      (zenburn-red-1 "#bc8383")
      (zenburn-red-2 "#ac7373")
      (zenburn-red-3 "#9c6363")
      (zenburn-red-4 "#8c5353")
      (zenburn-orange "#dfaf8f")
      (zenburn-yellow "#f0dfaf")
      (zenburn-yellow-1 "#e0cf9f")
      (zenburn-yellow-2 "#d0bf8f")
      (zenburn-green-1 "#5f7f5f")
      (zenburn-green "#7f9f7f")
      (zenburn-green+1 "#8fb28f")
      (zenburn-green+2 "#9fc59f")
      (zenburn-green+3 "#afd8af")
      (zenburn-green+4 "#bfebbf")
      (zenburn-cyan "#93e0e3")
      (zenburn-blue+1 "#94bff3")
      (zenburn-blue "#8cd0d3")
      (zenburn-blue-1 "#7cb8bb")
      (zenburn-blue-2 "#6ca0a3")
      (zenburn-blue-3 "#5c888b")
      (zenburn-blue-4 "#4c7073")
      (zenburn-blue-5 "#366060")
      (zenburn-magenta "#dc8cc3"))
  (custom-theme-set-faces
   'zenburn
   '(button ((t (:underline t))))
   `(link ((,class (:foreground ,zenburn-yellow :underline t :weight bold))))
   `(link-visited ((,class (:foreground ,zenburn-yellow-2 :underline t :weight normal))))

   ;;; basic coloring
   `(default ((,class (:foreground ,zenburn-fg :background ,zenburn-bg))))
   `(cursor ((,class (:foreground ,zenburn-fg))))
   `(escape-glyph-face ((,class (:foreground ,zenburn-red))))
   `(fringe ((,class (:foreground ,zenburn-fg :background ,zenburn-bg+1))))
   `(header-line ((,class (:foreground ,zenburn-yellow
                                       :background ,zenburn-bg-1
                                       :box (:line-width -1 :style released-button)))))
   `(highlight ((,class (:background ,zenburn-bg-05))))

   ;;; compilation
   `(compilation-column-face ((,class (:foreground ,zenburn-yellow))))
   `(compilation-enter-directory-face ((,class (:foreground ,zenburn-green))))
   `(compilation-error-face ((,class (:foreground ,zenburn-red-1 :weight bold :underline t))))
   `(compilation-face ((,class (:foreground ,zenburn-fg))))
   `(compilation-info-face ((,class (:foreground ,zenburn-blue))))
   `(compilation-info ((,class (:foreground ,zenburn-green+4 :underline t))))
   `(compilation-leave-directory-face ((,class (:foreground ,zenburn-green))))
   `(compilation-line-face ((,class (:foreground ,zenburn-yellow))))
   `(compilation-line-number ((,class (:foreground ,zenburn-yellow))))
   `(compilation-message-face ((,class (:foreground ,zenburn-blue))))
   `(compilation-warning-face ((,class (:foreground ,zenburn-yellow-1 :weight bold :underline t))))

   ;;; grep
   `(grep-context-face ((,class (:foreground ,zenburn-fg))))
   `(grep-error-face ((,class (:foreground ,zenburn-red-1 :weight bold :underline t))))
   `(grep-hit-face ((,class (:foreground ,zenburn-blue))))
   `(grep-match-face ((,class (:foreground ,zenburn-orange :weight bold))))
   `(match ((,class (:background ,zenburn-bg-1 :foreground ,zenburn-orange :weight bold))))

   ;; faces used by isearch
   `(isearch ((,class (:foreground ,zenburn-yellow :background ,zenburn-bg-1))))
   `(isearch-fail ((,class (:foreground ,zenburn-fg :background ,zenburn-red-4))))
   `(lazy-highlight ((,class (:foreground ,zenburn-yellow :background ,zenburn-bg+2))))

   `(menu ((,class (:foreground ,zenburn-fg :background ,zenburn-bg))))
   `(minibuffer-prompt ((,class (:foreground ,zenburn-yellow))))
   `(mode-line
     ((,class (:foreground ,zenburn-green+1
                           :background ,zenburn-bg-1
                           :box (:line-width -1 :style released-button)))))
   `(mode-line-buffer-id ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(mode-line-inactive
     ((,class (:foreground ,zenburn-green-1
                           :background ,zenburn-bg-05
                           :box (:line-width -1 :style released-button)))))
   `(region ((,class (:background ,zenburn-bg-1))))
   `(secondary-selection ((,class (:background ,zenburn-bg+2))))
   `(trailing-whitespace ((,class (:background ,zenburn-red))))
   `(vertical-border ((,class (:foreground ,zenburn-fg))))

   ;;; font lock
   `(font-lock-builtin-face ((,class (:foreground ,zenburn-blue))))
   `(font-lock-comment-face ((,class (:foreground ,zenburn-green))))
   `(font-lock-comment-delimiter-face ((,class (:foreground ,zenburn-green))))
   `(font-lock-constant-face ((,class (:foreground ,zenburn-green+4))))
   `(font-lock-doc-face ((,class (:foreground ,zenburn-green+1))))
   `(font-lock-doc-string-face ((,class (:foreground ,zenburn-blue+1))))
   `(font-lock-function-name-face ((,class (:foreground ,zenburn-blue))))
   `(font-lock-keyword-face ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(font-lock-negation-char-face ((,class (:foreground ,zenburn-fg))))
   `(font-lock-preprocessor-face ((,class (:foreground ,zenburn-blue))))
   `(font-lock-string-face ((,class (:foreground ,zenburn-red))))
   `(font-lock-type-face ((,class (:foreground ,zenburn-blue))))
   `(font-lock-variable-name-face ((,class (:foreground ,zenburn-orange))))
   `(font-lock-warning-face ((,class (:foreground ,zenburn-yellow-1 :weight bold :underline t))))

   `(c-annotation-face ((,class (:inherit font-lock-constant-face))))

   ;;; newsticker
   `(newsticker-date-face ((,class (:foreground ,zenburn-fg))))
   `(newsticker-default-face ((,class (:foreground ,zenburn-fg))))
   `(newsticker-enclosure-face ((,class (:foreground ,zenburn-green+3))))
   `(newsticker-extra-face ((,class (:foreground ,zenburn-bg+2 :height 0.8))))
   `(newsticker-feed-face ((,class (:foreground ,zenburn-fg))))
   `(newsticker-immortal-item-face ((,class (:foreground ,zenburn-green))))
   `(newsticker-new-item-face ((,class (:foreground ,zenburn-blue))))
   `(newsticker-obsolete-item-face ((,class (:foreground ,zenburn-red))))
   `(newsticker-old-item-face ((,class (:foreground ,zenburn-bg+3))))
   `(newsticker-statistics-face ((,class (:foreground ,zenburn-fg))))
   `(newsticker-treeview-face ((,class (:foreground ,zenburn-fg))))
   `(newsticker-treeview-immortal-face ((,class (:foreground ,zenburn-green))))
   `(newsticker-treeview-listwindow-face ((,class (:foreground ,zenburn-fg))))
   `(newsticker-treeview-new-face ((,class (:foreground ,zenburn-blue :weight bold))))
   `(newsticker-treeview-obsolete-face ((,class (:foreground ,zenburn-red))))
   `(newsticker-treeview-old-face ((,class (:foreground ,zenburn-bg+3))))
   `(newsticker-treeview-selection-face ((,class (:foreground ,zenburn-yellow))))

   ;;; external

   ;; full-ack
   `(ack-separator ((,class (:foreground ,zenburn-fg))))
   `(ack-file ((,class (:foreground ,zenburn-blue))))
   `(ack-line ((,class (:foreground ,zenburn-yellow))))
   `(ack-match ((,class (:foreground ,zenburn-orange :background ,zenburn-bg-1 :weigth bold))))

   ;; auctex
   `(font-latex-bold ((,class (:inherit bold))))
   `(font-latex-warning ((,class (:inherit font-lock-warning))))
   `(font-latex-sedate ((,class (:foreground ,zenburn-yellow :weight bold ))))
   `(font-latex-title-4 ((,class (:inherit variable-pitch :weight bold))))

   ;; auto-complete
   `(ac-candidate-face ((,class (:background ,zenburn-bg+3 :foreground "black"))))
   `(ac-selection-face ((,class (:background ,zenburn-blue-4 :foreground ,zenburn-fg))))
   `(popup-tip-face ((,class (:background ,zenburn-yellow-2 :foreground "black"))))
   `(popup-scroll-bar-foreground-face ((,class (:background ,zenburn-blue-5))))
   `(popup-scroll-bar-background-face ((,class (:background ,zenburn-bg-1))))
   `(popup-isearch-match ((,class (:background ,zenburn-bg :foreground ,zenburn-fg))))

   ;; diff
   `(diff-added ((,class (:foreground ,zenburn-green+4))))
   `(diff-changed ((,class (:foreground ,zenburn-yellow))))
   `(diff-removed ((,class (:foreground ,zenburn-red))))
   `(diff-header ((,class (:background ,zenburn-bg+2))))
   `(diff-file-header
     ((,class (:background ,zenburn-bg+2 :foreground ,zenburn-fg :bold t))))

   ;; ert
   `(ert-test-result-expected ((,class (:foreground ,zenburn-green+4 :background ,zenburn-bg))))
   `(ert-test-result-unexpected ((,class (:foreground ,zenburn-red :background ,zenburn-bg))))

   ;; eshell
   `(eshell-prompt ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(eshell-ls-archive ((,class (:foreground ,zenburn-red-1 :weight bold))))
   `(eshell-ls-backup ((,class (:inherit font-lock-comment))))
   `(eshell-ls-clutter ((,class (:inherit font-lock-comment))))
   `(eshell-ls-directory ((,class (:foreground ,zenburn-blue+1 :weight bold))))
   `(eshell-ls-executable ((,class (:foreground ,zenburn-red+1 :weight bold))))
   `(eshell-ls-unreadable ((,class (:foreground ,zenburn-fg))))
   `(eshell-ls-missing ((,class (:inherit font-lock-warning))))
   `(eshell-ls-product ((,class (:inherit font-lock-doc))))
   `(eshell-ls-special ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(eshell-ls-symlink ((,class (:foreground ,zenburn-cyan :weight bold))))

   ;; flymake
   `(flymake-errline ((,class (:foreground ,zenburn-red-1 :weight bold :underline t))))
   `(flymake-warnline ((,class (:foreground ,zenburn-yellow-1 :weight bold :underline t))))

   ;; flyspell
   `(flyspell-duplicate ((,class (:foreground ,zenburn-yellow-1 :weight bold :underline t))))
   `(flyspell-incorrect ((,class (:foreground ,zenburn-red-1 :weight bold :underline t))))

   ;; erc
   `(erc-action-face ((,class (:inherit erc-default-face))))
   `(erc-bold-face ((,class (:weight bold))))
   `(erc-current-nick-face ((,class (:foreground ,zenburn-blue :weight bold))))
   `(erc-dangerous-host-face ((,class (:inherit font-lock-warning))))
   `(erc-default-face ((,class (:foreground ,zenburn-fg))))
   `(erc-direct-msg-face ((,class (:inherit erc-default))))
   `(erc-error-face ((,class (:inherit font-lock-warning))))
   `(erc-fool-face ((,class (:inherit erc-default))))
   `(erc-highlight-face ((,class (:inherit hover-highlight))))
   `(erc-input-face ((,class (:foreground ,zenburn-yellow))))
   `(erc-keyword-face ((,class (:foreground ,zenburn-blue :weight bold))))
   `(erc-nick-default-face ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(erc-my-nick-face ((,class (:foreground ,zenburn-red :weigth bold))))
   `(erc-nick-msg-face ((,class (:inherit erc-default))))
   `(erc-notice-face ((,class (:foreground ,zenburn-green))))
   `(erc-pal-face ((,class (:foreground ,zenburn-orange :weight bold))))
   `(erc-prompt-face ((,class (:foreground ,zenburn-orange :background ,zenburn-bg :weight bold))))
   `(erc-timestamp-face ((,class (:foreground ,zenburn-green+1))))
   `(erc-underline-face ((t (:underline t))))

   ;; gnus
   `(gnus-group-mail-1 ((,class (:bold t :inherit gnus-group-mail-1-empty))))
   `(gnus-group-mail-1-empty ((,class (:inherit gnus-group-news-1-empty))))
   `(gnus-group-mail-2 ((,class (:bold t :inherit gnus-group-mail-2-empty))))
   `(gnus-group-mail-2-empty ((,class (:inherit gnus-group-news-2-empty))))
   `(gnus-group-mail-3 ((,class (:bold t :inherit gnus-group-mail-3-empty))))
   `(gnus-group-mail-3-empty ((,class (:inherit gnus-group-news-3-empty))))
   `(gnus-group-mail-4 ((,class (:bold t :inherit gnus-group-mail-4-empty))))
   `(gnus-group-mail-4-empty ((,class (:inherit gnus-group-news-4-empty))))
   `(gnus-group-mail-5 ((,class (:bold t :inherit gnus-group-mail-5-empty))))
   `(gnus-group-mail-5-empty ((,class (:inherit gnus-group-news-5-empty))))
   `(gnus-group-mail-6 ((,class (:bold t :inherit gnus-group-mail-6-empty))))
   `(gnus-group-mail-6-empty ((,class (:inherit gnus-group-news-6-empty))))
   `(gnus-group-mail-low ((,class (:bold t :inherit gnus-group-mail-low-empty))))
   `(gnus-group-mail-low-empty ((,class (:inherit gnus-group-news-low-empty))))
   `(gnus-group-news-1 ((,class (:bold t :inherit gnus-group-news-1-empty))))
   `(gnus-group-news-2 ((,class (:bold t :inherit gnus-group-news-2-empty))))
   `(gnus-group-news-3 ((,class (:bold t :inherit gnus-group-news-3-empty))))
   `(gnus-group-news-4 ((,class (:bold t :inherit gnus-group-news-4-empty))))
   `(gnus-group-news-5 ((,class (:bold t :inherit gnus-group-news-5-empty))))
   `(gnus-group-news-6 ((,class (:bold t :inherit gnus-group-news-6-empty))))
   `(gnus-group-news-low ((,class (:bold t :inherit gnus-group-news-low-empty))))
   `(gnus-header-content ((,class (:inherit message-header-other))))
   `(gnus-header-from ((,class (:inherit message-header-from))))
   `(gnus-header-name ((,class (:inherit message-header-name))))
   `(gnus-header-newsgroups ((,class (:inherit message-header-other))))
   `(gnus-header-subject ((,class (:inherit message-header-subject))))
   `(gnus-summary-cancelled ((,class (:foreground ,zenburn-orange))))
   `(gnus-summary-high-ancient ((,class (:foreground ,zenburn-blue))))
   `(gnus-summary-high-read ((,class (:foreground ,zenburn-green :weight bold))))
   `(gnus-summary-high-ticked ((,class (:foreground ,zenburn-orange :weight bold))))
   `(gnus-summary-high-unread ((,class (:foreground ,zenburn-fg :weight bold))))
   `(gnus-summary-low-ancient ((,class (:foreground ,zenburn-blue))))
   `(gnus-summary-low-read ((t (:foreground ,zenburn-green))))
   `(gnus-summary-low-ticked ((,class (:foreground ,zenburn-orange :weight bold))))
   `(gnus-summary-low-unread ((,class (:foreground ,zenburn-fg))))
   `(gnus-summary-normal-ancient ((,class (:foreground ,zenburn-blue))))
   `(gnus-summary-normal-read ((,class (:foreground ,zenburn-green))))
   `(gnus-summary-normal-ticked ((,class (:foreground ,zenburn-orange :weight bold))))
   `(gnus-summary-normal-unread ((,class (:foreground ,zenburn-fg))))
   `(gnus-summary-selected ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(gnus-cite-1 ((,class (:foreground ,zenburn-blue))))
   `(gnus-cite-10 ((,class (:foreground ,zenburn-yellow-1))))
   `(gnus-cite-11 ((,class (:foreground ,zenburn-yellow))))
   `(gnus-cite-2 ((,class (:foreground ,zenburn-blue-1))))
   `(gnus-cite-3 ((,class (:foreground ,zenburn-blue-2))))
   `(gnus-cite-4 ((,class (:foreground ,zenburn-green+2))))
   `(gnus-cite-5 ((,class (:foreground ,zenburn-green+1))))
   `(gnus-cite-6 ((,class (:foreground ,zenburn-green))))
   `(gnus-cite-7 ((,class (:foreground ,zenburn-red))))
   `(gnus-cite-8 ((,class (:foreground ,zenburn-red-1))))
   `(gnus-cite-9 ((,class (:foreground ,zenburn-red-2))))
   `(gnus-group-news-1-empty ((,class (:foreground ,zenburn-yellow))))
   `(gnus-group-news-2-empty ((,class (:foreground ,zenburn-green+3))))
   `(gnus-group-news-3-empty ((,class (:foreground ,zenburn-green+1))))
   `(gnus-group-news-4-empty ((,class (:foreground ,zenburn-blue-2))))
   `(gnus-group-news-5-empty ((,class (:foreground ,zenburn-blue-3))))
   `(gnus-group-news-6-empty ((,class (:foreground ,zenburn-bg+2))))
   `(gnus-group-news-low-empty ((,class (:foreground ,zenburn-bg+2))))
   `(gnus-signature ((,class (:foreground ,zenburn-yellow))))
   `(gnus-x ((,class (:background ,zenburn-fg :foreground ,zenburn-bg))))

   ;; helm
   `(helm-header
     ((,class (:foreground ,zenburn-green
                           :background ,zenburn-bg
                           :underline nil
                           :box nil))))
   `(helm-source-header
     ((,class (:foreground ,zenburn-yellow
                           :background ,zenburn-bg-1
                           :underline nil
                           :weight bold
                           :box (:line-width -1 :style released-button)))))
   `(helm-selection ((,class (:background ,zenburn-bg+1 :underline nil))))
   `(helm-selection-line ((,class (:background ,zenburn-bg+1))))
   `(helm-visible-mark ((,class (:foreground ,zenburn-bg :background ,zenburn-yellow-2))))
   `(helm-candidate-number ((,class (:foreground ,zenburn-green+4 :background ,zenburn-bg-1))))

   ;; hl-line-mode
   `(hl-line-face ((,class (:background ,zenburn-bg-1))))

   ;; ido-mode
   `(ido-first-match ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(ido-only-match ((,class (:foreground ,zenburn-orange :weight bold))))
   `(ido-subdir ((,class (:foreground ,zenburn-yellow))))

   ;; js2-mode
   `(js2-warning-face ((,class (:underline ,zenburn-orange))))
   `(js2-error-face ((,class (:foreground ,zenburn-red :weight bold))))
   `(js2-jsdoc-tag-face ((,class (:foreground ,zenburn-green-1))))
   `(js2-jsdoc-type-face ((,class (:foreground ,zenburn-green+2))))
   `(js2-jsdoc-value-face ((,class (:foreground ,zenburn-green+3))))
   `(js2-function-param-face ((,class (:foreground, zenburn-green+3))))
   `(js2-external-variable-face ((,class (:foreground ,zenburn-orange))))

   ;; jabber-mode
   `(jabber-roster-user-away ((,class (:foreground ,zenburn-green+2))))
   `(jabber-roster-user-online ((,class (:foreground ,zenburn-blue-1))))
   `(jabber-roster-user-dnd ((,class (:foreground ,zenburn-red+1))))
   `(jabber-rare-time-face ((,class (:foreground ,zenburn-green+1))))
   `(jabber-chat-prompt-local ((,class (:foreground ,zenburn-blue-1))))
   `(jabber-chat-prompt-foreign ((,class (:foreground ,zenburn-red+1))))
   `(jabber-activity-face((,class (:foreground ,zenburn-red+1))))
   `(jabber-activity-personal-face ((,class (:foreground ,zenburn-blue+1))))
   `(jabber-title-small ((,class (:height 1.1 :weight bold))))
   `(jabber-title-medium ((,class (:height 1.2 :weight bold))))
   `(jabber-title-large ((,class (:height 1.3 :weight bold))))

   ;; linum-mode
   `(linum ((,class (:foreground ,zenburn-green+2 :background ,zenburn-bg))))

   ;; magit
   `(magit-section-title ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(magit-branch ((,class (:foreground ,zenburn-orange :weight bold))))
   `(magit-item-highlight ((,class (:background ,zenburn-bg+1))))

   ;; message-mode
   `(message-cited-text ((,class (:inherit font-lock-comment))))
   `(message-header-name ((,class (:foreground ,zenburn-green+1))))
   `(message-header-other ((,class (:foreground ,zenburn-green))))
   `(message-header-to ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(message-header-from ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(message-header-cc ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(message-header-newsgroups ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(message-header-subject ((,class (:foreground ,zenburn-orange :weight bold))))
   `(message-header-xheader ((,class (:foreground ,zenburn-green))))
   `(message-mml ((,class (:foreground ,zenburn-yellow :weight bold))))
   `(message-separator ((,class (:inherit font-lock-comment))))

   ;; mew
   `(mew-face-header-subject ((,class (:foreground ,zenburn-orange))))
   `(mew-face-header-from ((,class (:foreground ,zenburn-yellow))))
   `(mew-face-header-date ((,class (:foreground ,zenburn-green))))
   `(mew-face-header-to ((,class (:foreground ,zenburn-red))))
   `(mew-face-header-key ((,class (:foreground ,zenburn-green))))
   `(mew-face-header-private ((,class (:foreground ,zenburn-green))))
   `(mew-face-header-important ((,class (:foreground ,zenburn-blue))))
   `(mew-face-header-marginal ((,class (:foreground ,zenburn-fg :weight bold))))
   `(mew-face-header-warning ((,class (:foreground ,zenburn-red))))
   `(mew-face-header-xmew ((,class (:foreground ,zenburn-green))))
   `(mew-face-header-xmew-bad ((,class (:foreground ,zenburn-red))))
   `(mew-face-body-url ((,class (:foreground ,zenburn-orange))))
   `(mew-face-body-comment ((,class (:foreground ,zenburn-fg :slant italic))))
   `(mew-face-body-cite1 ((,class (:foreground ,zenburn-green))))
   `(mew-face-body-cite2 ((,class (:foreground ,zenburn-blue))))
   `(mew-face-body-cite3 ((,class (:foreground ,zenburn-orange))))
   `(mew-face-body-cite4 ((,class (:foreground ,zenburn-yellow))))
   `(mew-face-body-cite5 ((,class (:foreground ,zenburn-red))))
   `(mew-face-mark-review ((,class (:foreground ,zenburn-blue))))
   `(mew-face-mark-escape ((,class (:foreground ,zenburn-green))))
   `(mew-face-mark-delete ((,class (:foreground ,zenburn-red))))
   `(mew-face-mark-unlink ((,class (:foreground ,zenburn-yellow))))
   `(mew-face-mark-refile ((,class (:foreground ,zenburn-green))))
   `(mew-face-mark-unread ((,class (:foreground ,zenburn-red-2))))
   `(mew-face-eof-message ((,class (:foreground ,zenburn-green))))
   `(mew-face-eof-part ((,class (:foreground ,zenburn-yellow))))

   ;; mic-paren
   `(paren-face-match ((,class (:foreground ,zenburn-cyan :background ,zenburn-bg :weight bold))))
   `(paren-face-mismatch ((,class (:foreground ,zenburn-bg :background ,zenburn-magenta :weight bold))))
   `(paren-face-no-match ((,class (:foreground ,zenburn-bg :background ,zenburn-red :weight bold))))

   ;; nav
   `(nav-face-heading ((,class (:foreground ,zenburn-yellow))))
   `(nav-face-button-num ((,class (:foreground ,zenburn-cyan))))
   `(nav-face-dir ((,class (:foreground ,zenburn-green))))
   `(nav-face-hdir ((,class (:foreground ,zenburn-red))))
   `(nav-face-file ((,class (:foreground ,zenburn-fg))))
   `(nav-face-hfile ((,class (:foreground ,zenburn-red-4))))

   ;; mumamo
   `(mumamo-background-chunk-major ((,class (:background nil))))
   `(mumamo-background-chunk-submode1 ((,class (:background ,zenburn-bg-1))))
   `(mumamo-background-chunk-submode2 ((,class (:background ,zenburn-bg+2))))
   `(mumamo-background-chunk-submode3 ((,class (:background ,zenburn-bg+3))))
   `(mumamo-background-chunk-submode4 ((,class (:background ,zenburn-bg+1))))

   ;; org-mode
   `(org-agenda-date-today
     ((,class (:foreground "white" :slant italic :weight bold))) t)
   `(org-agenda-structure
     ((,class (:inherit font-lock-comment-face))))
   `(org-archived ((,class (:foreground ,zenburn-fg :weight bold))))
   `(org-checkbox ((,class (:background ,zenburn-bg+2 :foreground "white"
                                   :box (:line-width 1 :style released-button)))))
   `(org-date ((,class (:foreground ,zenburn-blue :underline t))))
   `(org-deadline-announce ((,class (:foreground ,zenburn-red-1))))
   `(org-done ((,class (:bold t :weight bold :foreground ,zenburn-green+3))))
   `(org-formula ((,class (:foreground ,zenburn-yellow-2))))
   `(org-headline-done ((,class (:foreground ,zenburn-green+3))))
   `(org-hide ((,class (:foreground ,zenburn-bg-1))))
   `(org-level-1 ((,class (:foreground ,zenburn-orange))))
   `(org-level-2 ((,class (:foreground ,zenburn-green+1))))
   `(org-level-3 ((,class (:foreground ,zenburn-blue-1))))
   `(org-level-4 ((,class (:foreground ,zenburn-yellow-2))))
   `(org-level-5 ((,class (:foreground ,zenburn-cyan))))
   `(org-level-6 ((,class (:foreground ,zenburn-green-1))))
   `(org-level-7 ((,class (:foreground ,zenburn-red-4))))
   `(org-level-8 ((,class (:foreground ,zenburn-blue-4))))
   `(org-link ((,class (:foreground ,zenburn-yellow-2 :underline t))))
   `(org-scheduled ((,class (:foreground ,zenburn-green+4))))
   `(org-scheduled-previously ((,class (:foreground ,zenburn-red-4))))
   `(org-scheduled-today ((,class (:foreground ,zenburn-blue+1))))
   `(org-special-keyword ((,class (:foreground ,zenburn-yellow-1))))
   `(org-table ((,class (:foreground ,zenburn-green+2))))
   `(org-tag ((,class (:bold t :weight bold))))
   `(org-time-grid ((,class (:foreground ,zenburn-orange))))
   `(org-todo ((,class (:bold t :foreground ,zenburn-red :weight bold))))
   `(org-upcoming-deadline ((,class (:inherit font-lock-keyword-face))))
   `(org-warning ((,class (:bold t :foreground ,zenburn-red :weight bold :underline nil))))
   `(org-column ((,class (:background ,zenburn-bg-1))))
   `(org-column-title ((,class (:background ,zenburn-bg-1 :underline t :weight bold))))

   ;; outline
   `(outline-8 ((,class (:inherit default))))
   `(outline-7 ((,class (:inherit outline-8 :height 1.0))))
   `(outline-6 ((,class (:inherit outline-7 :height 1.0))))
   `(outline-5 ((,class (:inherit outline-6 :height 1.0))))
   `(outline-4 ((,class (:inherit outline-5 :height 1.0))))
   `(outline-3 ((,class (:inherit outline-4 :height 1.0))))
   `(outline-2 ((,class (:inherit outline-3 :height 1.0))))
   `(outline-1 ((,class (:inherit outline-2 :height 1.0))))

   ;; rainbow-delimiters
   `(rainbow-delimiters-depth-1-face ((,class (:foreground ,zenburn-cyan))))
   `(rainbow-delimiters-depth-2-face ((,class (:foreground ,zenburn-yellow))))
   `(rainbow-delimiters-depth-3-face ((,class (:foreground ,zenburn-blue+1))))
   `(rainbow-delimiters-depth-4-face ((,class (:foreground ,zenburn-red+1))))
   `(rainbow-delimiters-depth-5-face ((,class (:foreground ,zenburn-orange))))
   `(rainbow-delimiters-depth-6-face ((,class (:foreground ,zenburn-blue-1))))
   `(rainbow-delimiters-depth-7-face ((,class (:foreground ,zenburn-green+4))))
   `(rainbow-delimiters-depth-8-face ((,class (:foreground ,zenburn-red-3))))
   `(rainbow-delimiters-depth-9-face ((,class (:foreground ,zenburn-yellow-2))))
   `(rainbow-delimiters-depth-10-face ((,class (:foreground ,zenburn-green+2))))
   `(rainbow-delimiters-depth-11-face ((,class (:foreground ,zenburn-blue+1))))
   `(rainbow-delimiters-depth-12-face ((,class (:foreground ,zenburn-red-4))))

   ;; rpm-mode
   `(rpm-spec-dir-face ((,class (:foreground ,zenburn-green))))
   `(rpm-spec-doc-face ((,class (:foreground ,zenburn-green))))
   `(rpm-spec-ghost-face ((,class (:foreground ,zenburn-red))))
   `(rpm-spec-macro-face ((,class (:foreground ,zenburn-yellow))))
   `(rpm-spec-obsolete-tag-face ((,class (:foreground ,zenburn-red))))
   `(rpm-spec-package-face ((,class (:foreground ,zenburn-red))))
   `(rpm-spec-section-face ((,class (:foreground ,zenburn-yellow))))
   `(rpm-spec-tag-face ((,class (:foreground ,zenburn-blue))))
   `(rpm-spec-var-face ((,class (:foreground ,zenburn-red))))

   ;; rst-mode
   `(rst-level-1-face ((,class (:foreground ,zenburn-orange))))
   `(rst-level-2-face ((,class (:foreground ,zenburn-green+1))))
   `(rst-level-3-face ((,class (:foreground ,zenburn-blue-1))))
   `(rst-level-4-face ((,class (:foreground ,zenburn-yellow-2))))
   `(rst-level-5-face ((,class (:foreground ,zenburn-cyan))))
   `(rst-level-6-face ((,class (:foreground ,zenburn-green-1))))

   ;; show-paren
   `(show-paren-mismatch ((,class (:foreground ,zenburn-red-3 :background ,zenburn-bg :weight bold))))
   `(show-paren-match ((,class (:foreground ,zenburn-blue-1 :background ,zenburn-bg :weight bold))))

   ;; SLIME
   `(slime-repl-inputed-output-face ((,class (:foreground ,zenburn-red))))

   ;; volatile-highlights
   `(vhl/default-face ((,class (:background ,zenburn-bg+1))))

   ;; whitespace-mode
   `(whitespace-space ((,class (:background ,zenburn-bg :foreground ,zenburn-bg+1))))
   `(whitespace-hspace ((,class (:background ,zenburn-bg :foreground ,zenburn-bg+1))))
   `(whitespace-tab ((,class (:background ,zenburn-bg :foreground ,zenburn-red))))
   `(whitespace-newline ((,class (:foreground ,zenburn-bg+1))))
   `(whitespace-trailing ((,class (:foreground ,zenburn-red :background ,zenburn-bg))))
   `(whitespace-line ((,class (:background ,zenburn-bg-05 :foreground ,zenburn-magenta))))
   `(whitespace-space-before-tab ((,class (:background ,zenburn-orange :foreground ,zenburn-orange))))
   `(whitespace-indentation ((,class (:background ,zenburn-yellow :foreground ,zenburn-red))))
   `(whitespace-empty ((,class (:background ,zenburn-yellow :foreground ,zenburn-red))))
   `(whitespace-space-after-tab ((,class (:background ,zenburn-yellow :foreground ,zenburn-red))))

   ;; wanderlust
   `(wl-highlight-folder-few-face ((,class (:foreground ,zenburn-red-2))))
   `(wl-highlight-folder-many-face ((,class (:foreground ,zenburn-red-1))))
   `(wl-highlight-folder-path-face ((,class (:foreground ,zenburn-orange))))
   `(wl-highlight-folder-unread-face ((,class (:foreground ,zenburn-blue))))
   `(wl-highlight-folder-zero-face ((,class (:foreground ,zenburn-fg))))
   `(wl-highlight-folder-unknown-face ((,class (:foreground ,zenburn-blue))))
   `(wl-highlight-message-citation-header ((,class (:foreground ,zenburn-red-1))))
   `(wl-highlight-message-cited-text-1 ((,class (:foreground ,zenburn-red))))
   `(wl-highlight-message-cited-text-2 ((,class (:foreground ,zenburn-green+2))))
   `(wl-highlight-message-cited-text-3 ((,class (:foreground ,zenburn-blue))))
   `(wl-highlight-message-cited-text-4 ((,class (:foreground ,zenburn-blue+1))))
   `(wl-highlight-message-header-contents-face ((,class (:foreground ,zenburn-green))))
   `(wl-highlight-message-headers-face ((,class (:foreground ,zenburn-red+1))))
   `(wl-highlight-message-important-header-contents ((,class (:foreground ,zenburn-green+2))))
   `(wl-highlight-message-header-contents ((,class (:foreground ,zenburn-green+1))))
   `(wl-highlight-message-important-header-contents2 ((,class (:foreground ,zenburn-green+2))))
   `(wl-highlight-message-signature ((,class (:foreground ,zenburn-green))))
   `(wl-highlight-message-unimportant-header-contents ((,class (:foreground ,zenburn-fg))))
   `(wl-highlight-summary-answered-face ((,class (:foreground ,zenburn-blue))))
   `(wl-highlight-summary-disposed-face ((,class (:foreground ,zenburn-fg
                                                         :slant italic))))
   `(wl-highlight-summary-new-face ((,class (:foreground ,zenburn-blue))))
   `(wl-highlight-summary-normal-face ((,class (:foreground ,zenburn-fg))))
   `(wl-highlight-summary-thread-top-face ((,class (:foreground ,zenburn-yellow))))
   `(wl-highlight-thread-indent-face ((,class (:foreground ,zenburn-magenta))))
   `(wl-highlight-summary-refiled-face ((,class (:foreground ,zenburn-fg))))
   `(wl-highlight-summary-displaying-face ((,class (:underline t :weight bold))))

   ;; which-func-mode
   `(which-func ((,class (:foreground ,zenburn-green+4))))

   ;; yascroll
   `(yascroll:thumb-text-area ((,class (:background ,zenburn-bg-1))))
   `(yascroll:thumb-fringe ((,class (:background ,zenburn-bg-1 :foreground ,zenburn-bg-1))))
   )

  ;;; custom theme variables
  (custom-theme-set-variables
   'zenburn
   `(ansi-color-names-vector [,zenburn-bg ,zenburn-red ,zenburn-green ,zenburn-yellow
                                          ,zenburn-blue ,zenburn-magenta ,zenburn-cyan ,zenburn-fg])

   ;; fill-column-indicator
   `(fci-rule-color ,zenburn-bg-05))

  ;;; colors for the ansi-term
  (eval-after-load 'term
    `(setq ansi-term-color-vector
         (vector 'unspecified ,zenburn-bg ,zenburn-red ,zenburn-green ,zenburn-yellow
		   ,zenburn-blue ,zenburn-magenta ,zenburn-cyan ,zenburn-fg))))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'zenburn)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(load-theme 'zenburn t)
#+end_src

** Cursor
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;;; cursor ;;;;
(setq-default cursor-type 'box)
(setq messages-buffer-max-lines 400)
(setq blink-cursor-delay 0.2)
(setq blink-cursor-interval 0.3)
#+end_src
** General Variables
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;;;;;;; general variables ;;;;;;

(define-key global-map (kbd "C-c f") 'find-function)
(setq-default tab-width 4)
#+end_src
** Comments and Timestamps
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;;; comments ;;;;
(setf comment-style 'indent)

(add-hook 'emacs-lisp-mode-hook #'imenu-add-menubar-index)
(global-set-key [mouse-3] 'mouse-popup-menubar-stuff)

;;;; time ;;;;
(display-time)
(setf display-time-day-and-date nil)
(setf display-time-24hr-format t)

;;;; timestamp ;;;;
(defvar iso-date-format "%Y-%m-%dT%H:%M:%S:z"
  "Format string for ISO dates.")

(defun iso-timestamp (&optional time)
  (format-time-sting iso-date-format
		     (or time (current-time))))

(defun insert-iso-timestamp ()
  (interactive)
  (insert (iso-timestamp)))

(defun iso-timestamp-sexp (&optional time)
  (parse-time-string (iso-timestamp)))

(require 'time-stamp)
(add-hook 'before-save-hook 'time-stamp)
(setf time-stamp-active t)
#+end_src

** Misc Functions
*** Lorem
   Webdesign is a kind of a hobby for me so I often encounter
   situations where I need to use text columns for veryfing my layout
   settings. The commonly used "lorem ipsum" seems like a standart
   text to do that, here's a function which generates it:

#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(defun lorem ()
  "Insert a lorem ipsum."
  (interactive)
  (insert "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "
          "eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim"
          "ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut "
          "aliquip ex ea commodo consequat. Duis aute irure dolor in "
          "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla "
          "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in "
          "culpa qui officia deserunt mollit anim id est laborum."))
#+end_src
*** html umlaute
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;;; Custom Functions ;;;;
(defun html-umlaute ()
  "replaces iso-umlaute with html-umlaute"
  (interactive)
  (let ((case-fold-search nil))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward
              (mapconcat '(lambda (x) (car x)) *html-entities* "\\|")
              nil t)
        (replace-match (cdr (assoc (match-string 0) *html-entities*)))))))

;;;; Variables ;;;;
(setf *html-entities*
  '(("Ä" . "&Auml;")
    ("ä" . "&auml;")
    ("Ö" . "&Ouml;")
    ("ö" . "&ouml;")
    ("Ü" . "&Uuml;")
    ("ü" . "&Uuml;")
    ("ß" . "&szling;")))
#+end_src
*** massive-shrink
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(defmacro defshrink (system space)
  `(defun ,system ()
     (interactive)
     (shrink-window ,space)))

(defshrink massive-shrink-darwin 20)
(defshrink massive-shrink-linux 14)
(defshrink massive-shrink-win 25)

(global-set-key (kbd "C-x C-q")
                (sys-diversification
                 'massive-shrink-linux
                 'massive-shrink-darwin))

#+end_src
*** make header (filestamp)
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(setq *filestamp-seperator* "-")
(setq *filestamp-seperator-repetition* 46)

(setq *filestamp-user-name* "André Beyer")
(setq *filestamp-user-email* "beyeran@gmail.com")

(defun filestamp-make-seperator (times)
  (if (= 0 times)
      ""
    (concat *filestamp-seperator* (filestamp-make-seperator (- times 1)))))

(setq *filestamp-seperator-builded* (filestamp-make-seperator *filestamp-seperator-repetition*))

(defun filestamp-header-finished (comment-sign)
  (concat comment-sign *filestamp-seperator-builded* "\n"
          comment-sign " file: " "\n"
          comment-sign " author: " *filestamp-user-name* " <" *filestamp-user-email* ">" "\n"
          comment-sign " Time-stamp: <>" "\n"
          comment-sign *filestamp-seperator-builded* "\n"))

(setq filestamp-auto-insert-alist '((("\\.\\(tex\\|sty\\|cls\\)\\'" . "LaTeX Comment") .
                                     (insert (filestamp-header-finished "%")))
                                    (("\\.\\(lisp\\|lsp\\)\\'" . "Lisp Comment") .
                                     (insert (filestamp-header-finished ";;")))
                                    (("\\.\\(hs\\)\\'" . "Haskell Comment") .
                                     (insert (filestamp-header-finished "--")))
                                    (("\\.\\(rb\\|irb\\)\\'" . "Ruby Comment") .
                                     (insert (filestamp-header-finished "##")))
                                    (("\\.\\(sh\\|zsh\\)\\'" . "Shell Comment") .
                                     (insert (filestamp-header-finished "##")))))

(defun filestamp-insert ()
  (interactive)
  (insert (filestamp-header-finished ";;")))

(add-hook 'write-file-hooks 'time-stamp)
(add-hook 'find-file-hooks 'auto-insert)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(provide 'beyeran-misc)
#+end_src
** Paredit
#+begin_src emacs-lisp :tangle beyeran/beyeran-paredit.el
;;
;; file: beyeran-paredit.el
;;

;;;;;;;; paredit ;;;;;;;;
(require 'paredit)

(when (require 'paredit "paredit" t)
  (mapc (lambda (hook) (add-hook hook (lambda () (paredit-mode 1))))
        '(emacs-lisp-mode-hook
          slime-repl-mode-hook
          slime-mode-hook
          inferior-qi-mode-hook
          qi-mode-hook
          scheme-mode
          clojure-mode-hook)))
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-paredit.el
(provide 'beyeran-paredit)
#+end_src

** smex
#+begin_src emacs-list :tangle beyeran/beyeran-smex.el
;;
;; file: beyeran-smex.el
;;

(and (require 'ido "ido" t)
     (ido-mode t)
     (require 'smex "smex" t)
     (smex-initialize)
     (setq smex-save-file "~/.smex")
     (smex-auto-update))

(provide 'beyeran-smex)
#+end_src
** auto-insert
#+begin_src emacs-lisp :tangle beyeran/beyeran-auto-insert.el
;;
;; file: beyeran-auto-insert.el
;;

(require 'autoinsert)

(auto-insert-mode)
(setq auto-insert-query nil)
(setq auto-insert-directory (expand-file-name "~/.emacs.d/auto-complete/"))

(add-hook 'find-file-hooks 'auto-insert)

(setq auto-insert-alist
      '(("\\.lisp$" . ["insert.lisp" auto-update-file])
        ("\\.rb$" . [ "ruby.rb" auto-update-file ])))


(defun insert-today ()
  "Insert today's date into buffer"
  (interactive)
  (insert (format-time-string "%A, %B %e %Y" (current-time))))

(defun auto-update-file ()
  (save-excursion
	;; Replace @@@ with file name
	(while (search-forward "@@@" nil t)
	  (save-restriction
	    (narrow-to-region (match-beginning 0) (match-end 0))
	    (replace-match (file-name-nondirectory buffer-file-name))))))

(define-auto-insert "\.rb" "ruby.rb")

(provide 'beyeran-auto-insert)
#+end_src

* Org-Mode
** generall settings
#+begin_src emacs-lisp :tangle beyeran/beyeran-org.el
;;
;; file: beyeran-org.el
;;

(require 'org)

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

(setq org-log-done t)
(setq org-support-shift-select t)
(setq org-src-fontify-natively t)

(defun org-cycle-global ()
  (interactive)
  (org-cycle t))

(defun org-cycle-local ()
  (interactive)
  (save-excursion
    (move-beginning-of-line nil)
    (org-cycle)))

(setq org-export-with-section-numbers nil)

(provide 'beyeran-org)

#+end_src
** Org Babel
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-babel.el
;;
;; file: beyeran-org-babel.el
;;

;;; fontification ;;;
(setq org-src-fontify-natively t)

;;; org babel ;;;
(require 'ob)
(require 'ob-eval)
(require 'ob-lisp)
(require 'ob-ruby)
(require 'ob-R)
(require 'ob-maxima)

(setq org-src-fontify-natevely t)
(setq org-confirm-babel-evaluate nil)

(setq org-babel-load-languages (quote ((emacs-lisp . t)
				       (dot . t)
				       (ditaa . t)
				       (R . t)
				       (python . t)
				       (ruby . t)
                       (maxima . t)
				       (gnuplot . t)
				       (clojure . t)
				       (sh . t))))
(setq org-confirm-babel-evaluate nil)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-org-babel.el
(provide 'beyeran-org-babel)
#+end_src

** reftex
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-reftex.el
;;
;; file: beyeran-org-reftex.el
;;

(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name) (file-exists-p (buffer-file-name))
       (progn
	 ;enable auto-revert-mode to update reftex when bibtex file changes on disk
	 (global-auto-revert-mode t)
	 (reftex-parse-all)
	 ;add a custom reftex cite format to insert links
	 (reftex-set-cite-format
	  '((?b . "[[bib:%l][%l-bib]]")
	    (?n . "[[notes:%l][%l-notes]]")
	    (?p . "[[papers:%l][%l-paper]]")
	    (?t . "%t")
	    (?h . "** %t\n:PROPERTIES:\n:Custom_ID:
  %l\n:END:\n[[papers:%l][%l-paper]]")))))

(define-key org-mode-map (kbd "C-c )") 'reftex-citation)
(define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

(add-hook 'org-mode-hook 'org-mode-reftex-setup)

(defun org-mode-reftex-search ()
  ;;jump to the notes for the paper pointed to at from reftex search
  (interactive)
  (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))

(setq org-link-abbrev-alist
      '(("bib" . "~/research/refs.bib::%s")
	("notes" . "~/research/org/notes.org::#%s")
	("papers" . "~/research/papers/%s.pdf")))
#+end_src
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-reftex.el
(provide 'beyeran-org-reftex)
#+end_src
** Org Mode Export Templates
*** Koma
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-export-templates.el
;; #+LaTeX_CLASS: beamer
(unless (boundp 'org-export-latex-classes)
 (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
             '("koma"
               "\\documentclass[a4paper,12pt]{scrartcl}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
*** Beamer
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-export-templates.el
;; Beamer
;; #+LaTeX_CLASS: beamer in org files
(add-to-list 'org-export-latex-classes
	     ;; beamer class, for presentations
	     '("beamer"
	       "\\documentclass[10pt]{beamer}\n
      \\mode<{{{beamermode}}}>\n
      \\usetheme{{{{beamertheme}}}}\n
      \\usecolortheme{{{{beamercolortheme}}}}\n
      \\beamertemplateballitem\n
      \\setbeameroption{show notes}
      \\usepackage[utf8]{inputenc}\n
      \\usepackage{hyperref}\n
      \\usepackage{color}
      \\usepackage{listings}
      \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
  frame=single,
  basicstyle=\\small,
  showspaces=false,showstringspaces=false,
  showtabs=false,
  keywordstyle=\\color{blue}\\bfseries,
  commentstyle=\\color{red},
  }\n
      \\usepackage{verbatim}\n
      \\institute{{{{beamerinstitute}}}}\n          
       \\subject{{{{beamersubject}}}}\n"

	       ("\\section{%s}" . "\\section*{%s}")

	       ("\\begin{frame}[fragile]\\frametitle{%s}"
          "\\end{frame}"
          "\\begin{frame}[fragile]\\frametitle{%s}"
          "\\end{frame}")))
#+end_src
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-export-templates.el
(provide 'beyeran-org-export-templates)
#+end_src
** Jekyll
#+begin_src emacs-lisp :tangle beyeran/beyeran-jekyll.el
;;
;; file: beyeran-jekyll.el
;;

(sys-diversification
 (setq *jekyll-path* "~/projects/beyeran/")
 (setq *jekyll-path* "~/Projects/beyeran/"))

(setq org-publish-project-alist
      '(("beyeran-website-jekyll"
        ;; Path to org files
        :base-directory (concat *jekyll-path* "org/")
        :base-extension "org"

        ;; Path to Jekyll project.
        :publishing-directory (concat *jekyll-path* "jekyll/")
        :recursive t
        :publishing-function org-publish-org-to-html
        :headline-levels 4
        :html-extension "html"
        :body-only t ;; Only export section between <body> </body>
        )

        ("beyeran-website-static"
         :base-directory (concat *jekyll-path* "org/")
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf"
         :publishing-directory "~/Projects/beyeran-jekyll/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("beyeran-website" :components ("beyeran-website-jekyll" "beyeran-website-static"))))

(provide 'beyeran-jekyll)
#+end_src
** GTD


#+begin_src emacs-lisp :tangle beyeran/beyeran-gtd.el
;;
;; file: beyeran-gtd.el
;;

(setq calendar-date-style 'iso
      diary-show-holidays-flag nil
      calendar-week-start-day 1
      calendar-mark-diary-entries-flag t)

#+end_src
Most parts of the following configuration I've taken from:
http://doc.norang.ca/org-mode.html

thanks!


The org-data are stored in different categorys:

| Category        | File                       | Explaination                                            |
|-----------------+----------------------------+---------------------------------------------------------|
| general         | todo.org                   | generall todo's                                         |
|                 | systems-theory.org         | generall notes I take on my interest in Systems Theory  |
|                 | website.org                | tasks and notes on my planned website                   |
|                 | finances.org               | keeping track of my finances                            |
|-----------------+----------------------------+---------------------------------------------------------|
| term-paper      | term-paper-risk.org        | several notes and tasks on term papers I have to write  |
|                 | term-paper-game-theory.org | over this summer. They are labled by the name of the    |
|                 | term-paper-qa.org          | course.                                                 |
|-----------------+----------------------------+---------------------------------------------------------|
| revision        | statistics-revision.org    | notes and tasks I took to revise my statistics knowlege |
|-----------------+----------------------------+---------------------------------------------------------|
| university-work | motifs-research.org        | planning and organizing my research on Motifs           |
|                 | hiwi-soz.org               | tasks related to my job in the sociology department     |
|-----------------+----------------------------+---------------------------------------------------------|

Every category has a subfolder on my computer. The files itself are
named as described in the table column. E.g.: "general/todo.org"

#+begin_src emacs-lisp :tangle beyeran/beyeran-gtd.el

;; general gtd path
(setq org-directory
      (sys-diversification (expand-file-name "~/projects/gtd")
                           (expand-file-name "~/Projects/gtd")))

;; paths as described:
(setq *gtd-paths* '(("general" ("todo.org"
                                "systems-theory.org"
                                "website.org"
                                "finances.org"))
                    ("term-paper" ("term-paper-risk.org"
                                   "term-paper-game-theory.org"
                                   "term-paper-qa.org"))
                    ("revision" ("statistics-revision.org"))
                    ("university-work" ("motifs-research.org"
                                        "hiwi-soz.org"))))

;; functions to make paths available
(defun append-folder-with-files (folder-file-structure)
  "Appends one folder with it's containing files. FOLDER-FILE-STRUCTURE
is the folder's name which contains the files to associate"
  (mapcar #'(lambda (entry) (format "%s/%s/%s" org-directory (first folder-file-structure) entry))
          (first (rest folder-file-structure))))

(defun append-folders (path-structure)
  "Generates a list of path names from a PATH-STRUCTURE. See *gtd-paths* 
for the structure"
  (flatten (mapcar #'append-folder-with-files path-structure)))

;; setting structure to agenda list
(setq org-agenda-files (append-folders *gtd-paths*))
;; added refill
;;(setq org-agenda-files (append org-agenda-files
;;                               (list (format "%s%s" org-directory "refill.org"))))

;; key settings (testing)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c b") 'org-iswitchb)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-M-r") 'org-capture)
(global-set-key (kbd "C-c r") 'org-capture)

(global-set-key (kbd "C-M-h") 'bh/hide-other)
(global-set-key (kbd "C-M-c") 'org-cycle-agenda-files)

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

;; todo customization
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

(setq org-todo-keyword-faces
      '(("TODO" :foreground "red" :weight bold)
        ("NEXT" :foreground "blue" :weight bold)
        ("DONE" :foreground "forest green" :weight bold)
        ("WAITING" :foreground "orange" :weight bold)
        ("HOLD" :foreground "magenta" :weight bold)
        ("CANCELLED" :foreground "forest green" :weight bold)))

(setq org-todo-state-tags-triggers
      '(("CANCELLED" ("CANCELLED" . t))
        ("WAITING" ("WAITING" . t))
        ("HOLD" ("WAITING") ("HOLD"))
        (done ("WAITING") ("CANCELLED") ("HOLD"))
        ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
        ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
        ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))))
#+end_src

The following section specifies templates which can be choosen when
assigning tasks. It's organized as follows:

  - a new task (t)
  - a new note (n)
  - a new habit (h)
  - issues to assign (for e.g. bitbucket repos) (i)
  - books to lent (b)
  - papers to read (p)

#+begin_src emacs-lisp :tangle beyeran/beyeran-gtd.el
(setq org-default-notes-file (format "%s%s" org-directory "refill.org"))

(setq org-capture-templates
      '(("t" "todo" entry (file org-default-notes-file)
         "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
        ("n" "note" entry (file org-default-notes-file)
         "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("h" "habit" entry (file org-defalut-notes-file)
         "* NEXT %?\n%U\n%a\nSCHEDULED: %t .+1d/3d\:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
        ("i" "issue" entry (file org-default-notes-file)
         "* TODO %? :ISSUE:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("b" "books" entry (file org-default-notes-file)
         "* TODO %? :BOOK:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("p" "paper" entry (file org-default-notes-file)
         "* TODO %? :PAPER:\n%U\n%a\n" :clock-in t :clock-resume t)))

;; using ido to manage refill.org notes and move them to the files they needet to be in
(setq org-refile-targets '((org-agenda-files :maxlevel . 9)))
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps t)
(setq org-refile-allow-creating-parent-nodes 'confirm)

;; use ido for both buffer and file completion and ido-everywhere
(setq org-completion-use-ido t)
(setq ido-everywere t)
(setq ido-max-directory-size 100000)
(ido-mode 'both)

(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; task treatment
(setq org-use-fast-todo-selection t) ;; C-c C-t KEY -> defined in org-todo-keywords

(provide 'beyeran-gtd)
#+end_src

* Statistics
#+begin_src emacs-lisp :tangle beyeran/beyeran-ess.el
;;
;; file: beyeran-ess.el
;;

(require 'ess-site)

(provide 'beyeran-ess)
#+end_src
* Programming Languages
** Haskell 
#+begin_src emacs-lisp :tangle beyeran/beyeran-haskell-mode.el
(add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))

;;;; Variables ;;;;
(setq haskell-program-name "ghci"
      haskell-font-lock-symbols t)

(defun custom-haskell-mode ()
  (haskell-indentation-mode -1)
  (haskell-indent-mode 1)
  (flyspell-prog-mode))

(add-hook 'haskell-mode-hook 'custom-haskell-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

;;;; Hooks and Keys ;;;;
(setq haskell-hoogle-command "hoogle")

(defun add-haskell-hooks ()
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-font-lock)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-decl-scan)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  (add-hook 'haskell-mode-hook 
	    (lambda ()
	      (define-keys haskell-mode-map
		'(("RET" newline)
		  ("TAB" haskell-indent-cycle)
		  ("C-c =" haskell-indent-insert-equal)
		  ("C-c |" haskell-indent-insert-guard)
		  ("C-c o" haskell-indent-insert-otherwise)
		  ("C-c w" haskell-indent-insert-where)
		  ("C-c ." haskell-indent-align-guards-and-rhs)
		  ("C-c i" inferior-haskell-info)))))
  (add-hook 'inferior-haskell-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-c h") 'haskell-hoogle)
	      (turn-on-haskell-doc-mode 1))))


;;;; Requirements ;;;;
(when (and (require 'haskell-mode "haskell-mode" t)
	   (require 'inf-haskell "inf-haskell" t)
       (require 'haskell-indent "haskell-indent" t))
  (add-haskell-hooks))

(provide 'beyeran-haskell-mode)
#+end_src

** Ruby
#+begin_src emacs-lisp :tangle beyeran/beyeran-ruby-mode.el
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)

(require 'inf-ruby)

(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))

(autoload 'run-ruby "inf-ruby" "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")

(add-hook 'ruby-mode-hook
  '(lambda () (inf-ruby-keys)))
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-ruby-mode.el
(provide 'beyeran-ruby-mode)
#+end_src
** Clojure
#+begin_src emacs-lisp :tangle beyeran/beyeran-clojure-mode.el
(setq clojure-src-root (expand-file-name "~/.emacs.d/extensions"))

(autoload 'clojure-mode "clojure-mode" t)
(autoload 'clojure-test-mode "clojure-test-mode" nil t)

(progn
  (autoload 'swank-clojure-init "swank-clojure")
  (autoload 'swank-clojure-slime-mode-hook "swank-clojure")
  (autoload 'swank-clojure-cmd "swank-clojure")
  (autoload 'swank-clojure-project "swank-clojure"))

;; Java starves programs by default
(setq swank-clojure-extra-vm-args (list "-Xmx1024m"))

(add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))

(provide 'beyeran-clojure-mode)
#+end_src

** Prolog
#+begin_src emacs-lisp :tangle beyeran/beyeran-prolog-mode.el
(autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs." t)

(setq prolog-system 'swi)
(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
                                ("\\.m$" . mercury-mode))
                                 auto-mode-alist))

(setq prolog-program-name "/usr/bin/gprolog")

(provide 'beyeran-prolog-mode)
#+end_src
** Shen
#+begin_src emacs-lisp :tangle beyeran/beyeran-shen-mode.el
(require 'shen-mode)
(require 'inf-shen)

(add-to-list 'auto-mode-alist '("\\.shen$" . shen-mode)
                              '("\\.kl$" . shen-mode))

(setq inferior-shen-program "/usr/bin/shen")

(provide 'beyeran-shen-mode)
#+end_src
** Scheme
#+begin_src emacs-lisp :tangle beyeran/beyeran-scheme-mode.el
(require 'quack)
(add-to-list 'auto-mode-alist '("\\.scm$" . scheme-mode))

(setq scheme-program-name "guile")

(add-to-list 'Info-default-directory-list (concat extensions-dir "scheme/info/"))

(add-hook 'scheme-mode-hook
          (lambda ()
            (define-key scheme-mode-map [f1]
              '(lambda ()
                 (interactive)
                 (ignore-errors
                   (let ((symbol (thing-at-point 'symbol)))
                        (info "(r5rs)")
                        (Info-index symbol)))))))

(provide 'beyeran-scheme-mode)
#+end_src
** Python
#+begin_src emacs-lisp :tangle beyeran/beyeran-python-mode.el
(add-to-list 'interpreter-mode-alist '("/usr/bin/python2" . python-mode))

(provide 'beyeran-python-mode)
#+end_src

** Scss
#+begin_src emacs-lisp :tangle beyeran/beyeran-scss-mode.el
(require 'scss-mode)

(sys-diversification
 ()
 (setq scss-sass-command "~/.rvm/gems/ruby-1.9.3-p0/bin/sass"))

(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
(add-to-list 'auto-mode-alist '("\\.sass\\'" . scss-mode))

(provide 'beyeran-scss-mode)
#+end_src
** Coffee-Script

#+begin_src emacs-lisp :tangle beyeran/beyeran-coffee-mode.el
(require 'coffee-mode)

(add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
(add-to-list 'auto-mode-alist '("Cakefile" . coffee-mode))

(defun coffee-custon ()
  "coffee-mode-hook"
  (set (make-local-variable 'tab-width) 2))

(add-hook 'coffee-mode-hook
  '(lambda () (coffee-custom)))

(provide 'beyeran-coffee-mode)
#+end_src
** Erlang
#+begin_src emacs-lisp :tangle beyeran/beyeran-erlang-mode.el
(setq load-path (cons "/usr/lib/erlang/lib/tools-2.6.7/emacs/" load-path))

(setq erlang-root-dir "/usr/lib/erlang/")

(setq exec-path (cons "/usr/bin/" exec-path))

(require 'erlang-start)


(provide 'beyeran-erlang-mode)
#+end_src
** Slime
  I've installed quicklisp and in one documentation for it I've found
  this "slime helper" which works quite fine. There will be some
  additions for Scheme and Clojure development.

  ;;;;;;;; slime helper (from quicklisp)
  (load (expand-file-name "~/.config/quicklisp/slime-helper.el"))
  ;; (setq inferior-lisp-program "/Applications/CCL/dx86cl64")
  ;; (setq inferior-lisp-program "/Applications/AllegroCL/alisp")
  (setq inferior-lisp-program "/usr/bin/ccl")

#+begin_src emacs-lisp :tangle beyeran/beyeran-slime.el
(load (expand-file-name "~/.quicklisp/slime-helper.el"))

(require 'slime "slime" t)
(require 'w3m-load)

(setq browse-url-browser-function 'w3m)

;; (defun w3m-browse-url-other-window (url &optional new-window)
;;   (interactive (browse-url-interactive-arg "w3m URL: "))
;;   (let ((pop-up-frames nil))
;; 	(switch-to-buffer-other-window
;; 	 (w3m-get-buffer-create *w3m*))
;; 	(w3m-browse-url url)))
;; 
;; (setq browse-url-browser-function
;;   (list (cons "^ftp:/.*" (lambda (url &optional nf)
;; 						   (call-interactively #'find-file-at-point url)))
;; 		(cons "." #'w3m-browse-url-other-window)))


(slime-setup '(slime-fancy slime-asdf slime-references slime-indentation))

(setq slime-enable-evaluate-in-emacs t slime-net-coding-system 'utf-8-unix)

(add-hook 'slime-mode-hook
          (lambda ()
            (define-keys slime-mode-map
                '(("C-c s" slime-selector)
                  ("C-j" newline-and-indent)
                  ("TAB" slime-indent-and-complete-symbol)
                  ("C-c C-d c" cltl2-lookup)))))

(add-hook 'slime-repl-mode-hook
          (lambda ()
            (define-keys slime-repl-mode-map
                '(("C-c s" slime-selector)
                  ("C-c C-d c" cltl2-lookup)))))

(defun clojure-slime-config ()
  (require 'slime-autoloads)
  
  (slime-setup '(slime-fancy))

  (setq swank-clojure-classpath
        (list
         (concat clojure-src-root "/clojure/clojure.jar")
         (concat clojure-src-root "/clojure-contrib/target/clojure-contrib-1.2.0-SNAPSHOT.jar")
         (concat clojure-src-root "/swank-clojure/src")
         (concat clojure-src-root "/clojure/test/clojure/test_clojure")))

  (eval-after-load 'slime
    '(progn (require 'swank-clojure)
            (setq slime-lisp-implementations
                  (cons `(clojure ,(swank-clojure-cmd) :init
                                  swank-clojure-init)
                        (remove-if #'(lambda (x) (eq (car x) 'clojure))
                                   slime-lisp-implementations))))))

;; http://groups.google.com/group/clojure/browse_thread/thread/e70ac373b47d7088 
(add-to-list 'slime-lisp-implementations
             (sys-diversification 
              '(sbcl ("/usr/bin/sbcl"))
              '(ccl ("/Applications/CCL/dx86cl"))))


(defun pre-slime-clj (&optional clj-p)
  "Stuff to do before SLIME runs" 
  (unless (eq clj-p nil)
    (clojure-slime-config))
  (slime-setup '(slime-fancy)))


(defun run-clojure () 
  "Starts clojure in Slime" 
  (interactive)
  (pre-slime-clj t)
  (slime 'clojure))

(defun run-lisp () 
  "Starts SBCL in Slime" 
  (interactive) 
;;  (pre-slime-clj)
  (sys-diversification
   (slime 'sbcl)
   (slime 'ccl)))

#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-slime.el
(provide 'beyeran-slime)
#+end_src
** Maxima
#+begin_src emacs-lisp :tangle beyeran/beyeran-maxima.el
(autoload 'imaxima "imaxima" "maxima frontend" t)
(autoload 'imath "imath" "interactive math mode" t)

(provide 'beyeran-maxima)
#+end_src
** Java
#+begin_src emacs-lisp :tangle beyeran/beyeran-java.el
(require 'javarun)
(add-hook 'java-mode-hook (lambda () (javarun-mode 1)))
(setq javarun-java-path "/usr/bin")

(provide 'beyeran-java)
#+end_src

** Octave
#+begin_src emacs-lisp :tangle beyeran/beyeran-octave.el
(autoload 'octave-mode "octave-mod" nil t)

(sys-diversification ()
  (setq inferior-octave-program "/Applications/Octave.app/Contents/Resources/bin/octave"))

(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))

(add-hook 'octave-mode-hook
          (lambda () 
            (abbrev-mode 1)
            (auto-fill-mode 1)
            (if (eq window-system 'x)
                (font-lock-mode 1))))

(provide 'beyeran-octave)
#+end_src
