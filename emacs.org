#+TITLE: Emacs Config
#+AUTHOR: André Pascal Beyer
#+EMAIL: beyeran@gmail.com

Before the whole configuration a few notes for Windows must be said. Gnutils32 must be
installed and all *.dll from the =bin= directory must be copied into the =bin= directory
of Emacs. E.g.:

#+BEGIN_SRC sh
  cp c:/gnutils/bin/*.dll c:/emacs/bin/
#+END_SRC

  - libpng!

* Initializing

  I finally gave up: after diverse packages (e.g. epl, el-get) did not do the trick,
  I now use =package=.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (package-initialize)
#+END_SRC

  Loading needed packages - mostly stolen from:
  http://y.tsutsumi.io/emacs-from-scratch-part-2-package-management.html

#+BEGIN_SRC emacs-lisp :tangle init.el
  (defvar required-packages
    '(;; usability
      magit
      swiper
      powerline
      helm
      helm-company
      helm-ag
      helm-projectile
      smartparens
      cask
      use-package
      projectile
      textmate
      multiple-cursors
      ;; programming modes
      elixir-mode
      alchemist
      web-mode
      lua-mode
      php-mode
      ess
      go-mode
      inf-ruby
      flycheck
      clojure-mode
      cider
      flycheck-clojure
      ;; eyecandy
      monokai-theme
      exec-path-from-shell
      org-beautify-theme
      org-bullets))

  (require 'cl)

  (defun packages-installed-p ()
    (loop for p in required-packages
          when (not (package-installed-p p)) do (return nil)
          finally (return t)))

  (unless (packages-installed-p)
    ;; check for new package versions
    (message "%s" "Emacs is now refresing its package database...")
    (package-refresh-contents)
    (message " done.")
    ;; install missing packages
    (dolist (p required-packages)
      (when (not (package-installed-p p))
        (package-install p))))

  (require 'use-package)

  ;;
  ;; helper
  ;;
  (defmacro on-win (&rest body)
    `(when (equal system-type 'windows-nt)
       (progn 
         ,@body)))
    
  (defmacro on-linux (&rest body)
    `(when (equal system-type 'gnu/linux)
       (progn 
         ,@body)))

  (defmacro on-mac (&rest body)
    `(when (equal system-type 'darwin)
       (progn
         ,@body)))

  (mapc #'load (directory-files "~/.emacs.d/src/" t "\\.el$"))

  (setq package-enable-at-startup nil)
  (package-initialize)

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

* Packages
** Usability
*** Helm and swipe:

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (require 'helm-config)
  (require 'helm-ag)
  (require 'helm-projectile)

  (define-key helm-command-map (kbd "o") 'helm-occur)
  (define-key helm-command-map (kbd "g") 'helm-do-grep)
  (define-key helm-command-map (kbd "SPC") 'helm-all-mark-rings)
  (define-key helm-map (kbd "M-k") 'helm-next-line)
  (define-key helm-map (kbd "M-i") 'helm-previous-line)
  (define-key helm-map (kbd "M-v") 'yank)
  (define-key helm-find-files-map (kbd "M-k") 'helm-next-line)
  (define-key helm-find-files-map (kbd "M-i") 'helm-previous-line)
  (define-key helm-find-files-map (kbd "M-v") 'yank)
  ;; rebind tab to run persistent action
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  ;; make TAB works in terminal
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)

  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

  (setq helm-split-window-in-side-p           t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t
        helm-ag-fuzzy-match                   t)

  (substitute-key-definition 'find-tag 'helm-etags-select global-map)
  (setq projectile-completion-system 'helm)
  (helm-mode 1)

  (require 'helm-files)
  (setq helm-idle-delay 0.1)
  (setq helm-input-idle-delay 0.1)
  (define-key global-map (kbd "C-x b") 'helm-for-files)
  (define-key global-map (kbd "C-x C-f") 'helm-find-files)

  ;; Turn on helm-projectile key bindings
  (helm-projectile-on)

  ;; Display helm buffers always at the bottom
  ;; Source: http://www.lunaryorn.com/2015/04/29/the-power-of-display-buffer-alist.html
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*helm" (* not-newline) "*" eos)
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (reusable-frames . visible)
                 (side            . bottom)
                 (window-height   . 0.4)))

  (use-package swiper
    :init
    (global-set-key "\C-s" 'swiper))

  ;; Keys
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c i") 'fill-region)
#+END_SRC

*** Fringe Mode

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  ;; A small minor mode to use a big fringe
  (defvar bzg-big-fringe-mode nil)

  (define-minor-mode bzg-big-fringe-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable bzg-big-fringe-mode
    :group 'editing-basics
    (if (not bzg-big-fringe-mode)
        (set-fringe-style nil)
      (set-fringe-mode
       (/ (- (frame-pixel-width)
             (* 100 (frame-char-width)))
          2))))

  ;; Now activate this global minor mode
  (global-set-key (kbd "<f12>") 'bzg-big-fringe-mode)
#+END_SRC

*** German Quotation Marks
#+BEGIN_SRC emacs-lisp :tangle src/marks.el

#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (projectile-global-mode)

#+END_SRC

*** Company
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (global-company-mode)

#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (use-package smartparens-config
    :ensure smartparens
    :config
    (progn
      (show-smartparens-global-mode t)))

  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)

  (bind-keys
   :map smartparens-mode-map
   ("C-M-a" . sp-beginning-of-sexp)
   ("C-M-e" . sp-end-of-sexp)
   
   ("C-<down>" . sp-down-sexp)
   ("C-<up>"   . sp-up-sexp)
   ("M-<down>" . sp-backward-down-sexp)
   ("M-<up>"   . sp-backward-up-sexp)
   
   ("C-M-f" . sp-forward-sexp)
   ("C-M-b" . sp-backward-sexp)
   
   ("C-M-n" . sp-next-sexp)
   ("C-M-p" . sp-previous-sexp)
   
   ("C-S-f" . sp-forward-symbol)
   ("C-S-b" . sp-backward-symbol)
   
   ("C-<right>" . sp-forward-slurp-sexp)
   ("M-<right>" . sp-forward-barf-sexp)
   ("C-<left>"  . sp-backward-slurp-sexp)
   ("M-<left>"  . sp-backward-barf-sexp)
   
   ("C-M-t" . sp-transpose-sexp)
   ("C-M-k" . sp-kill-sexp)
   ("C-k"   . sp-kill-hybrid-sexp)
   ("M-k"   . sp-backward-kill-sexp)
   ("C-M-w" . sp-copy-sexp)
   
   ("C-M-d" . delete-sexp)
   
   ("M-<backspace>" . backward-kill-word)
   ("C-<backspace>" . sp-backward-kill-word)
   ([remap sp-backward-kill-word] . backward-kill-word)
   
   ("M-[" . sp-backward-unwrap-sexp)
   ("M-]" . sp-unwrap-sexp)
   
   ("C-x C-t" . sp-transpose-hybrid-sexp)
   
   ("C-c ("  . wrap-with-parens)
   ("C-c ["  . wrap-with-brackets)
   ("C-c {"  . wrap-with-braces)
   ("C-c \"" . wrap-with-double-quotes)
   ("C-c _"  . wrap-with-underscores)
   ("C-c `"  . wrap-with-back-quotes))
#+END_SRC
*** Neotree
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (setq neo-theme 'nerd)

  (global-set-key [f8] 'neotree-toggle)

  (setq projectile-switch-project-action 'neotree-projectile-action)
#+END_SRC
** Org
   
   Different programming/scripting languages for org babel.

#+BEGIN_SRC emacs-lisp :tangle src/custom-org.el
  ;; preview fragments via imagemagick
  (setq org-latex-create-formula-image-program 'imagemagick)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (R . t)
     (lisp . t)
     (scheme . t)
     (ruby . t)
     (R . t)
     (clojure .t )
     (python . t)))

  ;; ess
  (use-package ess
    :init
    (autoload 'R-mode "ess-site.el" "ESS" t)
    (add-to-list 'auto-mode-alist '("\\.R$" . R-mode)))


  ;; enable selecting
  (setq org-support-shift-select t)

  ;; cider as clojure backend
  (setq org-babel-clojure-backend 'cider)

  ;; blocks
  (setq org-edit-src-content-intendation 0
        org-src-tab-acts-natively t
        org-src-fontify-natively t
        org-confirm-babel-evaluate nil)
#+END_SRC

*** Export Templates
    Some general variables for Latex Exports:

**** Text
#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (require 'ox-latex)

  (add-to-list 'org-latex-packages-alist '("" "minted"))

  (setq org-latex-listings 'minted)

  (setq org-latex-minted-options
        '(("frame" "lines")
          ("linenos" "")))

  (on-linux
   (setq org-export-latex-default-packages-alist
         '(("AUTO" "inputenc" t)
           ("T1"   "fontenc"   t)
           (""     "fixltx2e"  nil)
           (""     "wrapfig"   nil)
           (""     "soul"      t)
           (""     "textcomp"  t)
           (""     "amsmath"   t)
           (""     "marvosym"  t)
           (""     "wasysym"   t)
           (""     "latexsym"  t)
           (""     "amssymb"   t)
           (""     "hyperref"  nil))))

  (on-win
   (setq org-export-latex-default-packages-alist
         '(("latin1" "inputenc" t)
           ("T1"   "fontenc"   t)
           (""     "fixltx2e"  nil)
           (""     "wrapfig"   nil)
           (""     "soul"      t)
           (""     "textcomp"  t)
           (""     "amsmath"   t)
           (""     "marvosym"  t)
           (""     "wasysym"   t)
           (""     "latexsym"  t)
           (""     "amssymb"   t)
           (""     "hyperref"  nil))))

  (add-to-list 'org-latex-classes
                '("documentation"
                  "\\documentclass[12pt,oneside]{article}
                       [NO-DEFAULT-PACKAGES]

   \\usepackage[T1]{fontenc} 
   \\usepackage{longtable} 
   \\usepackage{float}
   \\usepackage{wrapfig}
   \\usepackage{amsmath}
   \\usepackage{hyperref}
   \\usepackage{minted}
   \\usepackage{fontspec}
   \\usepackage{geometry}
   \\geometry{a4paper, textwidth=6.5in, textheight=10in, marginparsep=7pt,
       marginparwidth=.6in}
   \\pagestyle{empty}
           \\setsansfont{Lato}
            \\setmonofont[Scale=0.8]{Inconsolata}
  %% \\setmonofont[Scale=0.75]{Source Code Pro}
   %%\\setmainfont{Adobe Garamond Pro} % Main document font
   %% \\setsansfont{Gill Sans Std} 
   %% Used in the from address line above the to address
   \\renewcommand{\\normalsize}{\\fontsize{12.5}{17}\\selectfont}
   %% Sets the font size and leading 
   \\usepackage[german, english]{babel}
   \\usemintedstyle{tango}
   \\makeatletter
   \\renewcommand{\\maketitle}{\\bgroup\\setlength{\\parindent}{0pt}
   \\begin{flushleft}
   \\textbf{{\\LARGE \\@title}}
   \\par
   \\@author
   \\end{flushleft}\\egroup }
   \\makeatother"

                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("beamer-simple"
                 "\\documentclass[hyperref={pdfpagelabels=false}]{beamer}
                  [DEFAULT-PACKAGES]

  \\usepackage[ngerman, english]{babel}
  \\usepackage{graphicx}
  \\usepackage{lmodern}
  \\usetheme{Kalgan}
  "
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("tufte-handout"
                 "\\documentclass{tufte-handout}
                       [NO-DEFAULT-PACKAGES]

   \\usepackage[utf8]{inputenc}
   \\usepackage[T1]{fontenc}
   \\usepackage[german, english]{babel}
   \\usepackage{graphicx}
     \\setkeys{Gin}{width=\\linewidth,totalheight=\\textheight,keepaspectratio}
   \\usepackage{amsmath}
   \\usepackage{booktabs}
   \\usepackage{units}
   \\usepackage{multicol}
   \\usepackage{lipsum}
   \\usepackage{fancyvrb}
     \\fvset{fontsize=\\normalsize}

   \\newcommand{\\doccmd}[1]{\\texttt{\\textbackslash#1}}
   % command name -- adds backslash automatically
   \\newcommand{\\docopt}[1]{\\ensuremath{\\langle}\\textrm{\\textit{#1}}\\ensuremath{\\rangle}}% optional command argument
   \\newcommand{\\docarg}[1]{\\textrm{\\textit{#1}}}% (required) command argument
   \\newcommand{\\docenv}[1]{\\textsf{#1}}% environment name
   \\newcommand{\\docpkg}[1]{\\texttt{#1}}% package name
   \\newcommand{\\doccls}[1]{\\texttt{#1}}% document class name
   \\newcommand{\\docclsopt}[1]{\\texttt{#1}}% document class option name
   \\newenvironment{docspec}{\\begin{quote}\\noindent}{\\end{quote}}% command specification environment
   "
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("thesis"
                 "\\documentclass[11pt]{memoir}
  [DEFALT-PACKAGES]
  [PACKAGES]
  [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[presentation]{beamer}
                  [DEFAULT-PACKAGES]"
           
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  ;; (setq org-latex-to-pdf-process
  ;;       ;; '("latexmk -pdflatex='xelatex -shell-escape %O'
  ;;       ;; -interaction=nonstopmode -f %f")
  ;;       '("xelatex --shell-escape -interaction=nonstopmode -f %f"))

  (setq org-latex-pdf-process 
        '("xelatex --shell-escape -interaction=nonstopmode %f"
          "xelatex --shell-escape -interaction=nonstopmode %f"))

  (setq beyerstry-summary
        (concat "\\documentclass[12pt,letterpaper]{article}\n"
          "[DEFAULT-PACKAGES]\n"
          "\\usepackage{amsmath,amsthm,amsfonts,amssymb,amscd}\n"
          "\\usepackage{multirow,booktabs}\n"
          "\\usepackage[table]{xcolor}\n"
          "\\usepackage{fullpage}\n"
          "\\usepackage{lastpage}\n"
          "\\usepackage{enumitem}\n"
          "\\usepackage{fancyhdr}\n"
          "\\usepackage{mathrsfs}\n"
          "\\usepackage{wrapfig}\n"
          "\\usepackage{setspace}\n"
          "\\usepackage{calc}\n"
          "\\usepackage{multicol}\n"
          "\\usepackage{cancel}\n"
          "% \\usepackage[retainorgcmds]{IEEEtrantools}\n"
          "\\usepackage[margin=3cm]{geometry}\n"
          "\\usepackage{floatrow}\n"
          "\\newlength{\\tabcont}\n"
          "\\setlength{\\parindent}{0.0in}\n"
          "\\setlength{\\parskip}{0.05in}\n"
          "\n"
          "\\headheight 32pt\n"
          "\\lhead{\\author\\ \\vspace{0.1cm} \\\\ \\title}\n"
          "\n"
          "\\chead{\\textbf{\\title}}\n"
          "\\rhead{\\date}\n"
          "\\cfoot{summary}\n"
          "\n"
          "\\textheight 580pt\n"
          "\\headsep 10pt\n"
          "\\footskip 40pt\n"
          "\\topmargin = 7pt\n"))

  (add-to-list 'org-latex-classes
               (list "beyerstry-summary" beyerstry-summary))


  (add-to-list 'org-latex-classes
               '("beyerstry-thesis"
                 
                 "\\documentclass[12pt,oneside,a4paper]{book}\n

                 [DEFAULT-PACKAGES]

                 \\usepackage[width=5.75in, a4paper]{geometry}\n
                 \\parindent 12pt\n
                 \\usepackage{fontspec}\n
                 \\usepackage{setspace}\n
                 \\setsansfont{Lato Regular}\n
                 \\setmonofont{Source Code Pro}\n
                 \\setmathrm{EB Garamond}\n
                 \\widowpenalty=300\n
                 \\clubpenalty=300\n
                 \\setromanfont[Numbers=OldStyle, Ligatures={Common, TeX}, Scale=1.0]{EB Garamond}\n
                 \\newfontfamily{\\smallcaps}[RawFeature={+c2sc,+scmp}]{EB Garamond}\n
                 \\usepackage{caption}\n
                 \\renewcommand{\\thefootnote}{\\fnsymbol{footnote}}\n
                 \\usepackage{fancyhdr}\n
                 \\usepackage[tiny,md,sc]{titlesec}\n
                 \\setlength{\\headheight}{15pt}\n
                 \\pagestyle{plain}\n
                 \\usepackage{titling}\n
                 \\usepackage[labelfont={bf,sf,footnotesize,singlespacing},justification={justified,RaggedRight},textfont={sf,footnotesize,singlespacing},figurewithin=chapter,margin=0pt,tablewithin=chapter,singlelinecheck=false]{caption}\n
                 \\usepackage{color}\n
                 \\usepackage{xcolor}\n
                 \\definecolor{SchoolColor}{rgb}{0.1084, 0.1098, 0.6458} % Crimson\n
                 \\definecolor{chaptergrey}{rgb}{0.6471, 0.1098, 0.1882} % for chapter numbers\n
                 \\hypersetup{colorlinks,citecolor=SchoolColor,filecolor=black,linkcolor=black,urlcolor=SchoolColor}\n
                 \\renewcommand{\\frontmatter}{\n
                 \\input{frontmatter/personalize}\n
                 \\maketitle\n
                 \\copyrightpage\n
                 \\abstractpage\n
                 \\tableofcontents\n
                 \\listoffigures % optional\n
                 \\dedicationpage\n
                 \\acknowledgments\n
                 }\n
                 \\renewcommand{\\maketitle}{\n
                 \\thispagestyle{empty}\n
                 \\vspace*{\\fill}\n
                 \\vspace{100pt}\n
                 \\begin{center}\n
                 \\Huge \\textcolor{SchoolColor}{\\thetitle} \\normalsize \\\\\n
                 \\vspace{100pt}\n
                 \\textsc{Master's Thesis} \\\\\n
                 Andre Pascal Beyer\n
                 \\vspace{12pt}\n
                 \\vspace{12pt}\n
                 Trier University \\\\ Trier \\\\\n
                 \\today\n
                 \\end{center} \\vspace*{\\fill}\n
                 }\n
                 \\newcommand{\\copyrightpage}{\n
                 \\newpage\n
                 \\thispagestyle{empty}\n
                 \\vspace*{\\fill}\n
                 \\scshape \\noindent \\small \\copyright \\small 2014\\hspace{3pt}-- André Pascal Beyer \\\\\n
                 \\noindent all rights reserved.\n
                 \\vspace*{\\fill}\n
                 \\newpage\n
                 \\rm\n
                 }\n
                 \\renewcommand{\\backmatter}{\n
                 \\begin{appendices}\n
                 %\\include{chapters/appendixA}\n
                 \\end{appendices}\n
                 %\\input{endmatter/personalize}\n
                 \\clearpage\n
                 \\bibliography{references}\n
                 \\addcontentsline{toc}{chapter}{References}\n
                 \\bibliographystyle{apalike}\n
                 %\\include{endmatter/colophon}\n
                 }\n"

                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** Beamer
#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (setq beyerstry-beamer-latex
    (concat "\\documentclass[hyperref={pdfpagelabels=false}]{beamer}"
            "\n\n"
            "[DEFAULT-PACKAGES]\n"
            "%%\n"
            "%% font\n"
            "%%\n"
            "\\usepackage{fontspec}\n"
            "\\setsansfont{Lato Light}\n"
            "\\setmonofont{Inconsolata}\n\n"
            "%% sizes\n"
            "\\setbeamerfont{title}{size=\\\large, series=\\bfseries}"
            "\n"
            "\\setbeamerfont{author}{size=\\small}\n"
            "\\setbeamerfont{date}{size=\\small}\n"
            "\\setbeamerfont{section title}{size=\\large,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{plain title}{size=\\large,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{block title}{size=\\normalsize,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{block title alerted}{size=\\normalsize,"
            "\n    series=\\bfseries}\n"
            "\\setbeamerfont*{subtitle}{size=\\large}\n"
            "\\setbeamerfont{frametitle}{size=\\large,%\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{caption}{size=\\small}\n"
            "\\setbeamerfont{caption name}{series=\\bfseries}\n"
            "\\setbeamerfont{description item}{series=\\bfseries}\n"
            "\\setbeamerfont{page number in head/foot}{%\n"
            "    size=\\scriptsize}\n"
            "\\setbeamerfont{bibliography entry author}{%\n"
            "    size=\\normalsize, series=\\normalfont}\n"
            "\\setbeamerfont{bibliography entry title}{%\n"
            "    size=\\normalsize,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{bibliography entry location}{%\n"
            "    size=\\normalsize, series=\\normalfont}\n"
            "\\setbeamerfont{bibliography entry note}{size=\\small,\n"
            "    series=\\normalfont}\n\n"
            "%% color\n"
            "\\setbeamercolor{titlelike}{use=normal text,\n"
            "    parent=normal text}\n\n"
            "\\setbeamercolor{author}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{date}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{institute}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{structure}{use=normal text,\n"
            "    fg=normal text.fg}\n\n"
            "\\setbeamercolor{footnote}{fg=normal text.fg!90}\n"
            "\\setbeamercolor{footnote mark}{fg=.}\n"))

  (add-to-list 'org-latex-classes
               (list "beyerstry-beamer" beyerstry-beamer-latex))
#+END_SRC
**** Load All
#+BEGIN_SRC emacs-lisp src/export-templates.el
  (add-to-list 'org-latex-classes
               (list "beyerstry-beamer" beyerstry-beamer-latex))
#+END_SRC

* Programming Languages
** Elixir
   Elixir is a language based on erlang with more or less Ruby syntax. I like it
   very much. It has two extensions - the "normal" =elixir-mode= and a extention
   for it's project management =alchemist=.

#+BEGIN_SRC emacs-lisp :tangle src/apb-elixir.el
  (use-package elixir-mode
    :init
    (add-hook 'elixir-mode-hook 'apb-elixir-mode-hook)
    (add-hook 'elixir-mode-hook 'global-company-mode))

  (use-package alchemist)
#+END_SRC

** Go
   Since Google more and more requires knowledge in =Go= I thought I could give
   it a try.

#+BEGIN_SRC emacs-lisp :tangle src/apb-go.el
  (use-package go-mode-load)
  (use-package go-mode)
#+END_SRC
** Python
   Just some minor things - since I'm mostly using it for small scripts with
   org-mode I don't get too fancy about it

#+BEGIN_SRC emacs-lisp :tangle src/apb-python.el
  (on-win
   (setq python-shell-interpreter "C:/WinPython/python-3.4.3.amd64/Scripts/ipython.exe --pylab=qt"))
#+END_SRC

** Ruby

#+BEGIN_SRC emacs-lisp :tangle src/apb-ruby.el
  (require 'ruby-mode)

  (autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby pathrocess" t)
  (autoload 'inf-ruby-keys "inf-ruby" "" t)

  (eval-after-load 'ruby-mode
    '(add-hook 'ruby-mode-hook 'inf-ruby-keys))

  ;; add additional keys

  (define-key ruby-mode-map (kbd "C-c C-c") 'ruby-send-buffer)
  (define-key ruby-mode-map (kbd "C-c C-r") 'ruby-send-region)
#+END_SRC

** Torch

   For my master's thesis I'm using the scientific computing library
   Torch for Lua. I normally do not use Lua so I just use the lua mode
   as Torch mode:

#+BEGIN_SRC emacs-lisp :tangle src/apb-lua.el
  (setq lua-default-application "th")

  (with-eval-after-load 'lua-mode
    (define-key lua-mode-map (kbd "C-c C-r") 'lua-send-region)
    (define-key lua-mode-map (kbd "C-c C-c") 'lua-send-buffer))

#+END_SRC
** Clojure

#+BEGIN_SRC emacs-lisp :tangle src/apb-clojure.el
  ;; configure cider
  (setq nrepl-hide-special-buffers t
        cider-repl-pop-to-buffer-on-connect nil
        cider-popup-stacktraces nil
        cider-repl-popup-stacktraces t)

  (on-mac
   (setq cider-lein-command "/Users/beyeran/bin/lein"))

  ;; useful keybindings when using clojur from org
  ;; (org-defkey org-mode-map (kbd "C-x C-e") 'cider-eval-last-sexp)
  ;; (org-defkey org-mode-map (kbd "C-c C-d") 'cider-doc)


#+END_SRC
* Looks
** Color Theme

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (load-theme 'monokai)
  ;; (load-theme 'org-beautify-theme)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (set-face-attribute 'default nil :font "Monaco-10")
#+END_SRC

** UI
#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  ;; encoding
  (prefer-coding-system 'utf-8-emacs-unix)
  (setq set-buffer-file-coding-system 'utf-8-emacs-unix)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)

  ;; mighty 80 char rule!
  (setq-default fill-column 80)

  (use-package power-line
    :init (powerline-default-theme))

  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (use-package org-bullets-mode
    :init (org-bullets-mode))

#+END_SRC
