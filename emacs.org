#+TITLE: emacs.org
#+AUTHOR: Andre Pascal Beyer
#+EMAIL: beyeran@gmail.com

* Globals, Functions and Settings
** Globals
#+begin_src emacs-lisp :tangle emacs.el
  (require 'eldoc)

  (prefer-coding-system 'utf-8)

  (setq user-mail-address "beyeran@gmail.com")
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)

  (defmacro with-module (symbol name-string &rest body)
    `(condition-case nil
         (progn
           (add-to-load-path  ,(format "%s%s" *modules-dir* name-string))
           (autoload ',symbol ,name-string ,name-string t)
           ,@body)
   
       (error (message (format " => problem loading %s" ',symbol))
              nil)))

  (defmacro with-library (symbol &rest body)
    `(condition-case nil
         (progn
           (add-to-load-path ,(format "%s%s" *modules-dir* symbol))
           (require ',symbol)
           ,@body)))

  (defun require-special-theme (symbol variant)
    (condition-case nil
        (progn
          (add-to-load-path (format "~/.emacs.d/color-theme/%s" symbol))
          (require (intern (format "%s-theme" symbol)))
          (load-theme (intern (format "%s-%s" symbol variant)) t))
    
      (error (message (format " => problem loading %s" symbol))
              nil)))

  (defun add-to-load-path (path)
    "Wrapps the ADD-TO-LIST function for the LOAD-PATH variable"
    (add-to-list 'load-path path))

  (defun add-theme (path)
    "Wrapps the ADD-TO-LIST function for the CUSTOM-THEME-LOAD-PATH variable"
    (add-to-list 'custom-theme-load-path (format "~/.emacs.d/color-theme/%s"
                             path)))

  (defun add-to-alist (suffix-mode-list)
    "Wrapps the ADD-TO-LIST function for the AUTO-MODE-ALIST variable"
    (add-to-list 'auto-mode-alist suffix-mode-list))

  ;; remember tangle files before!
  (mapc #'load (directory-files "~/.emacs.d/src/" t "\\.el$"))

  (add-to-load-path "~/.emacs.d/src/")
#+end_src
** Settings
#+begin_src emacs-lisp :tangle src/settings.el
  (put 'with-module 'lisp-indent-function 1)

  (defun pretty-lambdas ()
    (font-lock-add-keywords
     nil `(("(\\(lambda\\>\\)"
            (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                      ,(make-char 'greek-iso8859-7 107))
                      nil))))))

  (font-lock-add-keywords 'emacs-lisp-mode
                          '(("(\\(lambda\\)\\>" (0 (prog1 ()
                                                (compose-region (match-beginning 1)
                                                                (match-end 1)
                                                                λ))))))

  (font-lock-add-keywords 'python
                          '(("lambda" (0 (prog1 ()
                                           (compose-region (match-beginning 1)
                                                           (match-end 1)
                                                           λ))))))

  ;; (add-hook 'lisp-mode-hook (prettify-symbols-mode))
  ;; (add-hook 'emacs-lisp-mode-hook (prettify-symbols-mode))

  (case system-type
    (windows-nt
     (setenv "CYGWIN" (concat (getenv "CYGWIN") " nodosfilewarning"))
     (mapc (apply-partially 'add-to-list 'exec-path)
           `("C:/Perl/bin"
             "C:/cygwin/bin"))
     (setenv "PATH"
             (mapconcat 'identity
                        `(
                          "C:/cygwin/bin"
                          "C:/MinGW/bin"
                          ,(getenv "PATH"))
                        ";")))
    (gnu/linux
     (setenv "LC_MESSAGES" "C")
     (setenv "MANWIDTH" "72")))
#+end_src
* Programming
** ESS
#+BEGIN_SRC emacs-lisp :tangle src/ess.el
  ;; ESS mode

  (load "~/.emacs.d/modules/ess-site/lisp/ess-site")
  (setq inferior-julia-program-name "c:/Program Files/Julia/bin/julia.exe")
#+END_SRC
** web development
#+begin_src emacs-lisp :tangle src/modules.el
  (with-library js2-mode)
  (with-library simple-httpd)
  (with-library skewer-mode
                (add-hook 'js2-mode-hook 'skewer-mode))

  (add-to-alist '("\\.\\(js\\|json\\)$" . js2-mode))

  (define-key js2-mode-map (kbd "\C-c\C-r") 'skewer-eval-region)
  (define-key js2-mode-map (kbd "\C-c\C-e") 'skewer-eval-last-expression)

  (with-library skewer-repl)
  (with-library skewer-bower)

  (defun skewer-eval-region (start end)
    "Evaluate the region as JavaScript code."
    (interactive "r")
    (skewer-eval (buffer-substring-no-properties start end)
                 #'skewer-post-minibuffer))
#+end_src
** python
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; python
  ;;
  ;; copied from github.com/danlei/emacs
  ;; Thanks Daniel!
  ;;

  (require 'python nil t)
  ;; (setq python-process-kill-without-query t
  ;; python-default-version 3)

  (add-hook 'python-mode-hook
            (lambda ()
                                          ; (local-set-key (kbd "<C-tab>") 'symbol-complete)
              (local-set-key (kbd "C-c d") 'pydoc)
                                          ; (setq parens-require-spaces nil)
              (eldoc-mode 1)))

  (add-hook 'inferior-python-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c d") 'pydoc)))

  (setq dhl-python-command
        (if (eq system-type 'windows-nt)
            "C:/Python34/python.exe"
          "python3"))

  (setq-default python-shell-interpreter dhl-python-command
                python-shell-interpreter-args "-ui"
                                          ; python-command dhl-python-command
                                          ; python-python-command dhl-python-command
                )

  (defadvice python-describe-symbol
    (after dhl-python-describe-symbol-advice last () activate)
    "Switch to the python help buffer after invocation."
    (other-window 1))

  ;; modified from http://ubuntuforums.org/showthread.php?t=1363999
  (defun pydoc (word)
    "Launch pydoc on the word at point"
    (interactive
     (list (let* ((word (thing-at-point 'word))
                  (input (read-string
                          (format "pydoc entry%s: "
                                  (if word
                                      (format " (default %s)" word)
                                    "")))))
             (if (string= input "")
                 (or word (error "No pydoc args given"))
               input))))
    (save-window-excursion
      (shell-command (concat "pydoc " word) "*PYDOC*"))
    (view-buffer "*PYDOC*" 'bury-buffer))

  (define-key python-mode-map (kbd "C-c C-c") 'python-shell-send-defun)
  (define-key python-mode-map (kbd "C-c C-r") 'python-shell-send-region)

  ;;
  ;; projectile
  ;;

  ;; (add-hook 'python-mode-hook 'projectile-mode)
#+end_src
** ruby
 #+begin_src emacs-lisp :tangle src/modules.el
 ;;
 ;; inf-ruby
 ;;

 (with-library inf-ruby
               (define-key ruby-mode-map (kbd "C-c C-c") 'ruby-send-definition)
               (define-key ruby-mode-map (kbd "C-c C-r") 'ruby-send-region)
               (define-key ruby-mode-map (kbd "C-c C-b") 'ruby-send-buffer))
 #+end_src
** perl
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; perl
;;

;; (with-library sepia
;;               (setq sepia-perl5lib (list (expand-file-name "~/.emacs.d/modules/sepia/lib")))
;;               (defalias 'perl-mode 'sepia-mode))

#+end_src
** chicken
#+begin_src emacs-lisp :tangle src/modules.el
(require 'autoinsert)
(add-hook 'find-file-hooks 'auto-insert)

(setq auto-insert-alist
      '(("\\.scm" .
         (insert "#!/usr/bin/csi -s\n\n"))))

(setf scheme-program-name "c:/cygwin/bin/csi.exe -:c")
#+end_src
** haskell
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; haskell mode
  ;;
  ;; (with-library haskell-mode
  ;;               (require 'haskell-mode-autoloads)
  ;;               (add-to-list 'Info-default-directory-list "~/.emacs.d/modules/haskell-mode/")

  ;;               (add-to-alist '("\\.\\(hs\\|lhs\\)$" . haskell-mode))

  ;;               (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))


#+end_src
** lisp
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; lisp
;;
(setq inferior-lisp-program (case system-type
                                  ((windows-nt cygwin) "c:/ccl/wx86cl -K utf-8")))

#+end_src
** picolisp
#+begin_src emacs-lisp :tangle src/modules.el
  (add-to-load-path (concat *modules-dir* "picolisp-mode"))
  (require 'picolisp)

  (add-to-list 'auto-mode-alist '("\\.l$" . picolisp-mode))

  (add-hook 'picolisp-mode-hook
            (lambda ()
              (paredit-mode +1) ;; Loads paredit mode automatically
              (tsm-mode) ;; Enables TSM
              (define-key picolisp-mode-map (kbd "RET") 'newline-and-indent)
              (define-key picolisp-mode-map (kbd "C-h") 'paredit-backward-delete)))
#+end_src
** clojure
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; clojure
  ;;

  (with-library clojure-mode
                (add-to-alist '("\\.\\(clj\\)$" . clojure-mode)))

  ;;
  ;; needed for cider
  ;;
  ;; (with-library epl)
  ;; (with-library dash)
  ;; (with-library pkg-info)

  ;; (with-library cider
  ;;               (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  ;;               (setq nrepl-hide-special-buffers t)
  ;;               (setq cider-repl-pop-to-buffer-on-connect nil)
  ;;               (setq cider-repl-results-prefix ";; => "))

#+end_src
** julia
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; julia
  ;;

  ;; (with-library julia-mode)

#+end_src

** APL
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; APL
;;

(add-to-list 'load-path "~/.emacs.d/modules/apl")

(when (require 'gnu-apl-mode nil t)
  (dolist (hook '(gnu-apl-mode-hook gnu-apl-interactive-mode-hook))
    (add-hook hook (lambda ()
                     (eldoc-mode)
                     (setq buffer-face-mode-face 'gnu-apl-default)
                     (buffer-face-mode))))
  (set-face-attribute 'gnu-apl-default nil
                      :family "DejaVu Sans Mono")
  (add-to-list 'auto-mode-alist '("\\.apl$" . gnu-apl-mode)))

(setq gnu-apl-show-keymap-on-startup t)

(add-hook 'gnu-apl-interactive-mode-hook 
          '(lambda ()
             (setq buffer-face-mode 'gnu-apl-default)
             (buffer-face-mode)))

#+end_src
** elm
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; ELM
  ;;

  ;; (with-library elm-mode
  ;;               (cond ((eq system-type 'windows-nt) 
  ;;                      (progn
  ;;                        (let ((path "C:\\Program Files (x86)\\Elm Platform\\0.14.1\\bin"))
  ;;                          (setenv "PATH" (concat (getenv "PATH") (format ";%s" path)))
  ;;                          (setq exec-path (append exec-path '(path))))))))
#+end_src
** erlang
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; erlang
  ;;

  ;; (setq load-path (cons "C:/Program Files/erl/lib/tools-2.7.2/emacs/" load-path))
  ;; (setq erlang-root-dir "C:/Program Files/erl")
  ;; (setq exec-path (cons "C:/Program Files/erl/bin" exec-path))

  ;; (require 'erlang-start)
  ;; (require 'erlang-flymake)
#+end_src
** lfe
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; LFE Mode
  ;;
    
  (with-library lfe-mode)
  (with-library lfe-start)
  (with-library inferior-lfe)
  
  (setq inferior-lfe-program (case system-type
                               ((windows-nt cygwin) "c:/Program Files/erl6.3/bin/erl.exe")))
  
  (setq inferior-lfe-program-options (case system-type
                                      ((windows-nt cygwin) '("-pa c:/cygwin/home/Hans/opt/lfe/ebin -noshell -s lfe_shell start"))))
#+end_src
** Elixir
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; Elixir Mode
  ;;

  (with-library elixir-mode)

#+end_src

* Org
** General Settings
*** General
#+begin_src emacs-lisp :tangle src/myorg.el
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/modules/org-mode/lisp"))
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
  
  ;; hide stars:
  (setq org-hide-leading-stars 'hidestars)
  
  ;; "Enter" key follows links
  (setq org-return-follows-link t)
  
  ;; diverse general settings
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)

#+end_src
*** Babel
#+begin_src emacs-lisp :tangle src/myorg.el
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)
     (ditaa . t)
     ;; (R . t)
     (ledger . t)
     (perl . t)
     (octave . t)
     (picolisp . t)
     (ruby . t)
     (python . t)
     (js . t)
     (lisp . t)
     (haskell . t)))

  ;; speaciality for R
  (add-to-list 'org-src-lang-modes
               '("r" . ess-mode)
               '("jl" . ess-mode))

  ;; nice bullets
  (with-library org-bullets
                (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; ledger mode
  ;; (with-library ledger-mode)
#+end_src
** Org Export Templates
*** Latex
#+BEGIN_SRC emacs-lisp :tangle src/myorg.el 
  (require 'ox-latex)

  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[presentation]{beamer}
                 [DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
           
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))


  (add-to-list 'org-latex-classes
                '("documentation"
                  "\\documentclass[12pt,oneside]{article}
                       [NO-DEFAULT-PACKAGES]

   \\usepackage[T1]{fontenc}
   \\usepackage{longtable}
   \\usepackage{float}
   \\usepackage{wrapfig}
   \\usepackage{amsmath}
   \\usepackage{hyperref}
   \\usepackage{minted}
   \\usepackage{fontspec}
   \\usepackage{geometry}
   \\geometry{a4paper, textwidth=6.5in, textheight=10in, marginparsep=7pt, marginparwidth=.6in}
   \\pagestyle{empty}
   \\setmonofont[Scale=0.8]{Source Code Pro}
   \\setmainfont{Adobe Garamond Pro} % Main document font
   \\setsansfont{Gill Sans Std} % Used in the from address line above the to address
   \\renewcommand{\\normalsize}{\\fontsize{12.5}{17}\\selectfont} % Sets the font size and leading
   \\usepackage[german, english]{babel}
   \\usemintedstyle{tango}
   \\makeatletter
   \\renewcommand{\\maketitle}{\\bgroup\\setlength{\\parindent}{0pt}
   \\begin{flushleft}
     \\textbf{{\\LARGE \\@title}}\\par
       \\@author
     \\end{flushleft}\\egroup
     }
     \\makeatother"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("beamer-simple"
                 "\\documentclass[hyperref={pdfpagelabels=false}]{beamer}
                  [NO-DEFAULT-PACKAGES]

  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}
  \\usepackage[german, english]{babel}
  \\usepackage{graphicx}
  \\usepackage{lmodern}
  \\usetheme{Kalgan}
  "

                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
                    '("tufte-handout"
                      "\\documentclass{tufte-handout}
                       [NO-DEFAULT-PACKAGES]

   \\usepackage[utf8]{inputenc}
   \\usepackage[T1]{fontenc}
   \\usepackage[german, english]{babel}
   \\usepackage{graphicx}
     \\setkeys{Gin}{width=\\linewidth,totalheight=\\textheight,keepaspectratio}
   \\usepackage{amsmath}
   \\usepackage{booktabs}
   \\usepackage{units}
   \\usepackage{multicol}
   \\usepackage{lipsum}
   \\usepackage{fancyvrb}
     \\fvset{fontsize=\\normalsize}

   \\newcommand{\\doccmd}[1]{\\texttt{\\textbackslash#1}}% command name -- adds backslash automatically
   \\newcommand{\\docopt}[1]{\\ensuremath{\\langle}\\textrm{\\textit{#1}}\\ensuremath{\\rangle}}% optional command argument
   \\newcommand{\\docarg}[1]{\\textrm{\\textit{#1}}}% (required) command argument
   \\newcommand{\\docenv}[1]{\\textsf{#1}}% environment name
   \\newcommand{\\docpkg}[1]{\\texttt{#1}}% package name
   \\newcommand{\\doccls}[1]{\\texttt{#1}}% document class name
   \\newcommand{\\docclsopt}[1]{\\texttt{#1}}% document class option name
   \\newenvironment{docspec}{\\begin{quote}\\noindent}{\\end{quote}}% command specification environment
   "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (setq org-latex-to-pdf-process 
    '("latexmk.exe -pdflatex='xelatex -shell-escape -interaction nonstopmode' -pdf -f %f"
      "latexmk.exe -pdflatex='xelatex -shell-escape -interaction nonstopmode' -pdf -f %f"))
#+END_SRC
** Org Reveal
#+begin_src emacs-lisp :tangle src/myorg.el
  ;;
  ;; org reveal for presentations
  ;;

  ;; (with-library ox-reveal)

  ;; (setq org-reveal-root "file:///c:/Users/beyeran/opt/reveal.js")

#+end_src
** Reftex for Research
#+BEGIN_SRC emacs-lisp :tangle src/myorg.el 
  ;; reftex setup
  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (and (buffer-file-name) (file-exists-p (buffer-file-name))
         (progn
           ;; enable auto-rever-mode to update reftex when bibtex file changes
           ;; on disk
           (global-auto-revert-mode t)
           (reftex-parse-all)
           ;; add a custom reftex cite format to insert links
           (reftex-set-cite-format
            '((?b . "[[bib:%l][%l-bib]]")
              (?n . "[[notes:%l][%l-notes]]")
              (?p . "[[papers:%l][%l-paper]]")
              (?t . "%t")
              (?h . "** %t\n   :PROPERTIES:\n   Custom_ID: %l\n   :END:\n   [[papers:%l][%l-paper]]\n\n")))
           (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
           (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))))

  (add-hook 'org-mode-hook 'org-mode-reftex-setup)

  ;; jump to an entry
  (defun org-mode-reftex-search ()
    ;; jump to the notes for the paper pointed to at from reftex search
    (interactive)
    (org-open-link-from-string (format "[[notes:%s]]" (first (reftex-citation t)))))

  ;; add abbreviations
  (setq org-link-abbrev-alist
        '(("bib" . "c:/Users/beyeran/Dropbox/MA/bib/ma.bib::%s")
          ("notes" . "c:/Users/beyeran/Dropbox/MA/notes/notes.org")
          ("papers" . "c:/Users/beyeran/Dropbox/MA/pdf/%s.pdf")))
#+END_SRC

** GTD
#+BEGIN_SRC emacs-lisp :tangle src/myorg.el
  ;;
  ;; general
  ;;
  (setq org-export-coding-system 'utf-8)

  ;;
  ;; agenda usability
  ;;
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)


  (setq org-agenda-files '("~/.org/calendar.org"
                           "~/.org/ssl.org"
                           "~/.org/tasks.org")
        org-todo-keywords '((sequence "TODO(t)n" "NEXT(n)" "|" "DONE(d)")
                            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|"
                                      "CANCELLED(c@/!)"))
        org-use-fast-todo-selection t
        org-directory "~/.org/"
        org-default-notes-file "~/.org/tasks.org"
        org-capture-templates '(("t" "ToDo" entry (file "~/.org/tasks.org")
                                 "** TODO %?\n   %U\n")
                                ("s" "Project ToDo" entry (file "~/.org/tasks.org")
                                 "** TODO %? :PROJECT:\n   %U\n")
                                ("w" "Work ToDo" entry (file "~/.org/tasks.org")
                                 "** TODO %? :PROJECT:WORK:\n   %U\n")
                                ("p" "Phone Call" entry (file "~/.org/tasks.org")
                                 "** TODO %? :PHONE:\n   %U"  :clock-resume t)
                                ("h" "Habit" entry (file "~/.org/tasks.org")
                                 "** TODO %?\n   %U\n")
                                ("d" "Date" entry (file "~/.org/calendar.org")
                                 "** DATE at %? :DATE:\n   %U")
                                ("k" "Concert" entry (file "~/.org/calendar.org")
                                 "** DATE at %? :DATE:CONCERT:\n   %U")
                                ("l" "Lesson Learned" entry (file "~/.org/ssl.org")
                                 "* Lesson on: %?\n"))
        org-log-done t)

  ;;
  ;; refiling
  ;;
  (setq org-refile-use-outline-path t
        org-outline-path-complete-in-steps nil
        org-refile-allow-creating-parent-nodes 'confirm
        org-completion-use-ido t
        ido-everywhere t
        ido-mode 'both
        ido-default-buffer-method 'selected-window
        ido-default-file-method 'selected-window
        org-indirect-buffer-display 'current-window)

  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (setq org-refile-target-verify-function 'bh/verify-refile-target)


  ;;
  ;; agenda view
  ;;
  (setq org-agenda-dim-blocked-tasks nil
        org-agenda-compact-blocks t)

  (setq org-agenda-custom-commands
        '(("P" "Project List" ((tags "PROJECT")))
          ("O" "Work" ((agenda) (tags-todo "WORK")))
          ("K" "Concerts" ((tags "CONCERT")))
          ("W" "Weekly Plan" ((agenda) (todo "TODO") (tags "PROJECT")))
          ("H" "Home NA Lists" ((agenda)
                                (tags-todo "HOME")
                                (tags-todo "COMPUTER")))))

  ;;
  ;; archives
  ;;
  (setq org-archive-mark-done nil
        org-archive-location "%s_archive::* Archived Tasks")

  ;;
  ;; flyspell
  ;;
  (add-hook 'org-mode-hook 'turn-on-flyspell 'append)

  ;;
  ;; mobile
  ;;
  (setq org-mobile-directory "~/.org/mobile/"
        org-mobile-inbox-for-pull "~/.org/mobile/from-mobile.org"
        org-mobile-files (org-agenda-files))

  ;;
  ;; habits
  ;;
  (require 'org-habit)
#+END_SRC

* Mail
#+BEGIN_SRC emacs-lisp :tangle ~/.gnus
  (setq gnus-select-method
        '(nnimap "gmail"
                 (nnimap-address "imap.gmail.com")  ; it could also be imap.googlemail.com if that's your server.
                 (nnimap-server-port "imaps")
                 (nnimap-stream ssl)))

  (setq smtpmail-smtp-service 587
        gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
#+END_SRC
* Usability
** HUD
#+begin_src emacs-lisp :tangle "src/eyecandy.el"
  ;;
  ;; hud
  ;;
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (toggle-frame-fullscreen)

  ;; stripping more
  (setq initial-scratch-message "")
  (setq visible-bell t)

  ;; hide modeline
  (defvar-local hidden-mode-line-mode nil)
  (defvar-local hide-mode-line nil)

  (define-minor-mode hidden-mode-line-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global nil
    :variable hidden-mode-line-mode
    :group 'editing-basics
    (if hidden-mode-line-mode
        (setq hide-mode-line mode-line-format mode-line-format nil)
      (setq mode-line-format hide-mode-line hide-mode-line nil))
    (force-mode-line-update)
    ;; Apparently force-mode-line-update is not always enough to
    ;; redisplay th mode-line
    (redraw-display)
    (when (and (called-interactively-p 'interactive)
               hide-mode-line-mode)
      (run-with-idle-timer 0 nil 'message
                           (concat "Hidden mode Line Mode enabled.   "
                                   "Use M-x hidden-mode-line-mode to make the mode line appear."))))

  (hidden-mode-line-mode 1)
  (add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)


  ;; big fringe mode
  ;; (defvar big-fringe-mode nil)
  ;; (define-minor-mode big-fringe-mode
  ;;   "Minor mode to use big fringe in the current buffer."
  ;;   :init-value nil
  ;;   :global t
  ;;   :variable big-fringe-mode
  ;;   :group 'editing-basics
  ;;   (if (not big-fringe-mode)
  ;;       (set-fringe-style nil)
  ;;     (set-fringe-mode
  ;;      (/ (- (frame-pixel-width)
  ;;            (* 100 (frame-char-width)))
  ;;         1))))


  ;; (add-hook 'window-configuration-change-hook
  ;;           (lambda ()
  ;;             (if (delq nil
  ;;                       (let ((fw (frame-width)))
  ;;                         (mapcar (lambda (w) (< (window-width w) fw)) (window-list))))
  ;;                 (big-fringe-mode 0)
  ;;               (big-fringe-mode 1))))

  ;; (mapcar (lambda (fb) (set-fringe-bitmap-face fb 'org-hide))
  ;;         fringe-bitmaps)


  (global-visual-line-mode 1)
  (show-paren-mode 1)
  (global-hl-line-mode 1)
  (setq inhibit-splash-screen t)
  (setq visible-bell t)

  ;;
  ;; golden ratio
  ;;
  (with-library golden-ratio)
  (setq golden-ratio-auto-scale t)

  (golden-ratio-mode 1)
#+end_src
** Font
#+begin_src emacs-lisp :tangle "src/eyecandy.el"
  ;;
  ;; font
  ;;
  (set-face-attribute 'default nil :font "Source Code Pro-10")
  ;; (set-default-font "Droid Sans Mono-9")
#+end_src

** Usage
*** paredit
 #+begin_src emacs-lisp :tangle src/modules.el
   ;;
   ;; paredit
   ;;
   (defun add-paredit (mode)
     "Wrapps the function used for adding paredit to mode hooks"
     (add-hook mode #'enable-paredit-mode))
  
   (with-module enable-paredit-mode "paredit"
                (add-paredit 'emacs-lisp-mode)
                (add-paredit 'eval-expression-minibuffer-setup-hook)
                (add-paredit 'ielm-mode-hook)
                (add-paredit 'lisp-mode-hook)
                (add-paredit 'clojure-mode-hook)
                (add-paredit 'clojure-interaction-mode-hook)
                (add-paredit 'lfe-mode-hook)
                (add-paredit 'lisp-interaction-mode-hook)
                (add-paredit 'scheme-mode-hook))
  
   (eldoc-add-command
    'paredit-backward-delete
    'paredit-close-round)
  
 #+end_src
*** company
 #+BEGIN_SRC emacs-lisp :tangle src/modules.el
   ;;
   ;; company
   ;;

   (with-library company
                 (add-hook 'after-init-hook 'global-company-mode))

   (defun custom-erlang-mode-hook ()
     (define-key erlang-mode-map (kbd "M-,") 'alchemist-goto-jump-back))

   (add-hook 'erlang-mode-hook 'custom-erlang-mode-hook)
 #+END_SRC
*** iBuffer
 #+begin_src emacs-lisp :tangle src/modules.el
 ;;;;
 ;;;; ibuffer
 ;;;;

 (require 'ibuffer nil t)

 (setq ibuffer-show-empty-filter-groups nil
       ibuffer-expert t)

 (setq ibuffer-saved-filter-groups
       '(("default"
          ("elisp" (or (name . "\\.el$")
                       (mode . emacs-lisp-mode)))
          ("cl" (or (name . "\\.lisp$")
                    (name . "\\.asdf$")
                    (mode . lisp-mode)
                    (mode . slime-mode)))
          ("scheme" (or (name . "\\.scm$")
                        (mode . scheme-mode)
                        (mode . geiser-mode)))
          ("clojure" (or (name . "\\.clj$")
                         (mode . clojure-mode)))
          ("python" (or (name . "\\.py$")
                        (mode . python-mode)
                        (mode . python-2-mode)
                        (mode . python-3-mode)))
          ("ruby" (or (name . "\\.rb$")))
          ("perl" (mode . cperl-mode))
          ("shell" (or (name . "\\.sh$")
                       (name . "^\\.zshrc$")
                       (name . "^\\.profile")
                       (mode . shell-script-mode)))
          ("R" (name . "\\.R$"))
          ("julia" (name . "\\.jl$"))
          ("haskell" (or (name . "\\.hs$")
                         (mode . haskell-mode)))
          ("C" (or (name . "\\.c$")
                   (name . "\\.h$")
                   (mode . c-mode)))
          ("C++" (or (name . "\\.cpp$")
                     (name . "\\.hpp$")
                     (mode . c++-mode)))
          ("java" (or (name . "\\.java$")
                      (mode . java-mode)))
          ("css" (or (name . "\\.css$")
                     (mode . css-mode)))
          ("javascript" (or (name . "\\.js$")
                            (name . "\\.json$")
                            (mode . js2-mode)))
          ("tex" (or (name . "\\.tex$")
                     (mode . tex-mode)))
          ("org" (or (name . "\\.org$")
                     (mode . org-mode)))
          ("text" (or (name . "\\.txt$")
                      (mode . text-mode)))
          ("dired" (mode . dired-mode)))))

 (add-hook 'ibuffer-mode-hook
           (lambda ()
             (ibuffer-switch-to-saved-filter-groups "default")
             (ibuffer-auto-mode 1)))

 #+end_src
*** Artist
 #+BEGIN_SRC emacs-lisp :tangle src/xartist.el
   ;;
   ;; artist mode
   ;;

   (with-library artist)
 #+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp :tangle src/helm.el
  (add-to-load-path "~/.emacs.d/modules/helm")

  (require 'helm)
  (require 'helm-config)

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-in-side-p t
        helm-move-to-line-cycle-in-source t
        helm-ff-search-library-in-sexp t
        helm-scroll-amount t
        helm-ff-file-name-history-use-recentf t)

  (ido-mode 0)
  (helm-mode 1)

  (defun apb/helm-alive-p ()
    (if (boundp 'helm-alive-p)
        (symbol-value 'helm-alive-p)))

  (add-to-list 'golden-ratio-inhibit-functions 'apb/helm-alive-p)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp :tangle src/projectile.el
  ;; (with-library projectile
  ;;               (projectile-global-mode)
  ;;               (setq projectile-completion-system 'helm)
  ;;               (setq projectile-enable-caching t)
  ;;               ;; special for windows:
  ;;               (setq projectile-indexing-method 'alien))

  ;; ;; add projectile support
  ;; (with-library helm-projectile)
  ;; (helm-projectile-on)

  ;; (projectile-global-mode)
#+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp :tangle src/gutter.el
  (add-to-load-path "~/.emacs.d/modules/emacs-git-gutter")

  (require 'git-gutter)

  ;; enable global
  (global-git-gutter-mode t)

  ;; keys
  (global-set-key (kbd "C-x C-g") 'git-gutter:toggle)
  (global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
  (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
  (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)

  ;; live update
  (custom-set-variables '(git-gutter:update-interval 2))
#+END_SRC
*** Flymake
#+BEGIN_SRC emacs-lisp :tangle src/flymake.el
  (with-library flymake)

  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pylint-init))
#+END_SRC
** Color Theme
#+begin_src emacs-lisp :tangle "src/zeyecandy.el"
  ;;
  ;; color theme
  ;;

  (defvar color-themes-in-theme-directory (rest (rest (directory-files "~/.emacs.d/color-theme/"))))

  (mapcar (lambda (n) (add-theme n))
          color-themes-in-theme-directory)

  (require-special-theme 'hemisu 'dark)

#+end_src
