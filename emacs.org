#+TITLE: Emacs Config
#+AUTHOR: André Pascal Beyer
#+EMAIL: mail@beyeran.site

* Initializing
  
  I finally gave up: after diverse packages (e.g. epl, el-get) did not do the trick,
  I now use =package=.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'package)

  (defun add-package-archive (entry)
    (add-to-list 'package-archives entry t))

  (defun add-package-archives (archive-list)
    (mapcar 'add-package-archive archive-list))

  (package-initialize)

  (add-package-archives '(("melpa" . "https://melpa.org/packages/")
                          ("marmalade" . "http://marmalade-repo.org/packages/")
                          ("org" . "http://orgmode.org/elpa/")))

#+END_SRC

  Loading needed packages - mostly stolen from:
  http://y.tsutsumi.io/emacs-from-scratch-part-2-package-management.html

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq required-packages
        '(;; org
          org-plus-contrib
          ;; usability
          undo-tree
          magit
          swiper
          powerline
          smartparens
          cask
          use-package
          projectile
          textmate
          multiple-cursors
          git-gutter-fringe+
          bookmark+
          ;; helm
          helm
          helm-company
          helm-ag
          helm-projectile
          ;; templating
          yasnippet
          elixir-yasnippets
          elm-yasnippets
          ;; programming modes
          ensime
          elixir-mode
          alchemist
          web-mode
          lua-mode
          php-mode
          ess
          go-mode
          inf-ruby
          flycheck
          clojure-mode
          cider
          flycheck-clojure
          elm-mode
          ;; eyecandy
          highlight-indentation
          indent-guide
          soothe-theme
          noctilux-theme
          moe-theme
          mellow-theme
          monokai-theme
          exec-path-from-shell
          org-beautify-theme
          org-bullets))

  (require 'cl)

  (defun packages-installed-p ()
    (loop for p in required-packages
          when (not (package-installed-p p)) do (return nil)
          finally (return t)))

  (unless (packages-installed-p)
    ;; check for new package versions
    (message "%s" "Emacs is now refresing its package database...")
    (package-refresh-contents)
    (message " done.")
    ;; install missing packages
    (dolist (p required-packages)
      (when (not (package-installed-p p))
        (package-install p))))

  (require 'use-package)

  ;;
  ;; helper
  ;;
  (defmacro def-on-system (name type)
    `(defun ,(intern (concatenate 'string "on-" (symbol-name name))) (&rest @body)
       (when (equal system-type ,type)
         (progn @body))))

  (def-on-system win 'windows-nt)
  (def-on-system linux 'gnu/linux)
  (def-on-system mac 'darwin)

  (mapc #'load (directory-files "~/.emacs.d/src/" t "\\.el$"))

  (setq package-enable-at-startup nil)
  (package-initialize)

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

  (set-language-environment "UTF-8")
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq-default default-buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+END_SRC

* Usability
*** Helm and swipe:
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (require 'helm-config)
  (require 'helm-ag)
  (require 'helm-projectile)

  (define-key helm-command-map (kbd "o") 'helm-occur)
  (define-key helm-command-map (kbd "g") 'helm-do-grep)
  (define-key helm-command-map (kbd "SPC") 'helm-all-mark-rings)
  (define-key helm-map (kbd "M-k") 'helm-next-line)
  (define-key helm-map (kbd "M-i") 'helm-previous-line)
  (define-key helm-map (kbd "M-v") 'yank)
  (define-key helm-find-files-map (kbd "M-k") 'helm-next-line)
  (define-key helm-find-files-map (kbd "M-i") 'helm-previous-line)
  (define-key helm-find-files-map (kbd "M-v") 'yank)
  ;; rebind tab to run persistent action
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  ;; make TAB works in terminal
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)

  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

  (setq helm-split-window-in-side-p           t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t
        helm-ag-fuzzy-match                   t)

  (substitute-key-definition 'find-tag 'helm-etags-select global-map)
  (setq projectile-completion-system 'helm)
  (helm-mode 1)

  (require 'helm-files)
  (setq helm-idle-delay 0.1)
  (setq helm-input-idle-delay 0.1)
  (define-key global-map (kbd "C-x b") 'helm-for-files)
  (define-key global-map (kbd "C-x C-f") 'helm-find-files)

  ;; Turn on helm-projectile key bindings
  (helm-projectile-on)

  ;; Display helm buffers always at the bottom
  ;; Source: http://www.lunaryorn.com/2015/04/29/the-power-of-display-buffer-alist.html
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*helm" (* not-newline) "*" eos)
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (reusable-frames . visible)
                 (side            . bottom)
                 (window-height   . 0.4)))

  (use-package swiper
    :init
    (global-set-key "\C-s" 'swiper))

  ;; Keys
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c i") 'fill-region)
#+END_SRC

*** Fringe Mode
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  ;; A small minor mode to use a big fringe
  (defvar bzg-big-fringe-mode nil)

  (define-minor-mode bzg-big-fringe-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable bzg-big-fringe-mode
    :group 'editing-basics
    (if (not bzg-big-fringe-mode)
        (set-fringe-style nil)
      (set-fringe-mode
       (/ (- (frame-pixel-width)
             (* 100 (frame-char-width)))
          2))))

  ;; Now activate this global minor mode
  (global-set-key (kbd "<f12>") 'bzg-big-fringe-mode)

  ;; show changes from git
  (global-git-gutter+-mode)
#+END_SRC
*** undo-tree
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  ;; undo-tree
  (global-undo-tree-mode)

#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (projectile-global-mode)

#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (global-company-mode)

#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (use-package smartparens-config
    :ensure smartparens
    :config
    (progn
      (show-smartparens-global-mode t)))

  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)

  (bind-keys
   :map smartparens-mode-map
   ("C-M-a" . sp-beginning-of-sexp)
   ("C-M-e" . sp-end-of-sexp)
   
   ("C-<down>" . sp-down-sexp)
   ("C-<up>"   . sp-up-sexp)
   ("M-<down>" . sp-backward-down-sexp)
   ("M-<up>"   . sp-backward-up-sexp)
   
   ("C-M-f" . sp-forward-sexp)
   ("C-M-b" . sp-backward-sexp)
   
   ("C-M-n" . sp-next-sexp)
   ("C-M-p" . sp-previous-sexp)
   
   ("C-S-f" . sp-forward-symbol)
   ("C-S-b" . sp-backward-symbol)
   
   ("C-<right>" . sp-forward-slurp-sexp)
   ("M-<right>" . sp-forward-barf-sexp)
   ("C-<left>"  . sp-backward-slurp-sexp)
   ("M-<left>"  . sp-backward-barf-sexp)
   
   ("C-M-t" . sp-transpose-sexp)
   ("C-M-k" . sp-kill-sexp)
   ("C-k"   . sp-kill-hybrid-sexp)
   ("M-k"   . sp-backward-kill-sexp)
   ("C-M-w" . sp-copy-sexp)
   
   ("C-M-d" . delete-sexp)
   
   ("M-<backspace>" . backward-kill-word)
   ("C-<backspace>" . sp-backward-kill-word)
   ([remap sp-backward-kill-word] . backward-kill-word)
   
   ("M-[" . sp-backward-unwrap-sexp)
   ("M-]" . sp-unwrap-sexp)
   
   ("C-x C-t" . sp-transpose-hybrid-sexp)
   
   ("C-c ("  . wrap-with-parens)
   ("C-c ["  . wrap-with-brackets)
   ("C-c {"  . wrap-with-braces)
   ("C-c \"" . wrap-with-double-quotes)
   ("C-c _"  . wrap-with-underscores)
   ("C-c `"  . wrap-with-back-quotes))
#+END_SRC
*** COMMENT Neotree
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (setq neo-theme 'nerd)

  (global-set-key [f8] 'neotree-toggle)

  (setq projectile-switch-project-action 'neotree-projectile-action)
#+END_SRC
*** Spell Check
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (on-mac
   (setq ispell-program-name "/usr/local/bin/aspell"))
#+END_SRC

*** Umlauts on Mac
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (defmacro def-umlaut-print (name doc &rest char)
    (if (and (stringp doc) char)
        `(defun ,name ()
           ,doc
           (interactive)
           (insert ,char))
      `(defun ,name ()
         (interactive)
         (insert ,doc))))

  ;; lower character
  (def-umlaut-print print-lower-a "ä")
  (def-umlaut-print print-lower-o "ö")
  (def-umlaut-print print-lower-u "ü")
  (def-umlaut-print print-apostrophe-e "é")

  ;; upper character
  (def-umlaut-print print-upper-a "Ä")
  (def-umlaut-print print-upper-o "Ö")
  (def-umlaut-print print-upper-u "Ü")

  ;; sharp s
  (def-umlaut-print print-sharp-s "ß")

  (global-set-key (kbd "C-c a") 'print-lower-a)
  (global-set-key (kbd "C-c o") 'print-lower-o)
  (global-set-key (kbd "C-c u") 'print-lower-u)

  (global-set-key (kbd "C-c A") 'print-upper-a)
  (global-set-key (kbd "C-c O") 'print-upper-o)
  (global-set-key (kbd "C-c U") 'print-upper-u)

  (global-set-key (kbd "C-c s") 'print-sharp-s)

  (global-set-key (kbd "C-c e") 'print-apostrophe-e)
#+END_SRC

*** Tramp
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (on-win
   (setq tramp-default-method "pscp"))
#+END_SRC
*** Dired
    I put an "x" inside the name so it will be loaded later.

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (require 'dired)

  (setq dired-listing-switches "-lah")

  (define-key dired-mode-map (kbd "C-l") 'dired-subtree-toggle)
  (define-key dired-mode-map (kbd "C-j") 'dired-subtree-toggle)

  (setq dired-hide-details-mode 1)
#+END_SRC

*** JSGF
#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (load "~/.emacs.d/misc/jsgf-mode/jsgf-mode.el")

  (require 'jsgf-mode)
#+END_SRC
* ORG
** General
   
   Different programming/scripting languages for org babel.

#+BEGIN_SRC emacs-lisp :tangle src/custom-org.el
  ;; preview fragments via imagemagick
  (setq org-latex-create-formula-image-program 'imagemagick)

  (setq inferior-julia-program-name "julia")
  (setq inferior-ess-julia-program-name "julia")

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (R . t)
     (plantuml . t)
     (lisp . t)
     (scheme . t)
     (ruby . t)
     (R . t)
     (clojure . t)
     (python . t)))

  ;; ess
  (use-package ess
    :init
    (autoload 'R-mode "ess-site.el" "ESS" t)
    (add-to-list 'auto-mode-alist '("\\.R$" . R-mode))
    (add-to-list 'auto-mode-alist '("\\.ji$" . julia-mode)))

  ;; ditaa
  (on-mac
   (setq org-ditaa-jar-path "/usr/local/bin/ditaa"))

  ;; plantuml
  (on-mac
   (setq org-plantuml-jar-path
         (expand-file-name "~/.emacs.d/bin/plantuml.jar")))

  ;; enable selecting
  (setq org-support-shift-select t)

  ;; cider as clojure backend
  (setq org-babel-clojure-backend 'cider)
  (require 'cider)

  ;; blocks
  (setq org-edit-src-content-intendation 0
        org-src-tab-acts-natively t
        org-src-fontify-natively t
        org-confirm-babel-evaluate nil
        org-support-shift-select 'always)
#+END_SRC

** Export Templates
    Some general variables for Latex Exports:

**** General
#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (require 'ox-latex)

  (add-to-list 'org-latex-packages-alist '("tabu" "tabularx" "minted"))

  (setq org-latex-listings 'minted)

  (setq org-latex-minted-options
        '(("frame" "lines")
          ("linenos" "")))

  (on-linux
   (setq org-export-latex-default-packages-alist
         '(("AUTO" "inputenc" t)
           ("T1"   "fontenc"   t)
           (""     "fixltx2e"  nil)
           (""     "wrapfig"   nil)
           (""     "soul"      t)
           (""     "textcomp"  t)
           (""     "amsmath"   t)
           (""     "marvosym"  t)
           (""     "wasysym"   t)
           (""     "latexsym"  t)
           (""     "amssymb"   t)
           (""     "hyperref"  nil))))

  (on-mac
   (setq org-export-latex-default-packages-alist
         '(("AUTO" "inputenc" t)
           ("T1"   "fontenc"   t)
           (""     "fixltx2e"  nil)
           (""     "wrapfig"   nil)
           (""     "soul"      t)
           (""     "textcomp"  t)
           (""     "amsmath"   t)
           (""     "marvosym"  t)
           (""     "wasysym"   t)
           (""     "latexsym"  t)
           (""     "amssymb"   t)
           (""     "hyperref"  nil))))

  (on-win
   (setq org-export-latex-default-packages-alist
         '(("latin1" "inputenc" t)
           ("T1"   "fontenc"   t)
           (""     "fixltx2e"  nil)
           (""     "wrapfig"   nil)
           (""     "soul"      t)
           (""     "textcomp"  t)
           (""     "amsmath"   t)
           (""     "marvosym"  t)
           (""     "wasysym"   t)
           (""     "latexsym"  t)
           (""     "amssymb"   t)
           (""     "hyperref"  nil))))
#+END_SRC

**** Text

#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (add-to-list 'org-latex-classes
               '("documentation"
                 "\\documentclass[12pt,oneside]{article}
                       [NO-DEFAULT-PACKAGES]

   \\usepackage[T1]{fontenc} 
   \\usepackage{longtable} 
   \\usepackage{float}
   \\usepackage{wrapfig}
   \\usepackage{amsmath}
   \\usepackage{hyperref}
   \\usepackage{minted}
   \\usepackage{fontspec}
   \\usepackage{geometry}
   \\geometry{a4paper, textwidth=6.5in, textheight=10in, marginparsep=7pt,
       marginparwidth=.6in}
   \\pagestyle{empty}
   \\setsansfont{Lato Regular}
   \\setmonofont{Monaco}
   \\setmathrm{EB Garamond}
   %% \\setsansfont{Lato}
   %% \\setmonofont[Scale=0.8]{Inconsolata}
   %% \\setmonofont[Scale=0.75]{Source Code Pro}
   %% \\setmainfont{Adobe Garamond Pro} % Main document font
   %% \\setsansfont{Gill Sans Std} 
   %% Used in the from address line above the to address
   \\renewcommand{\\normalsize}{\\fontsize{12.5}{17}\\selectfont}
   %% Sets the font size and leading 
   
   \\usemintedstyle{tango}
   \\makeatletter
   \\renewcommand{\\maketitle}{\\bgroup\\setlength{\\parindent}{0pt}
   \\begin{flushleft}

   \\textbf{{\\LARGE \\@title}}
   \\par
   \\@author
   \\par
   \\end{flushleft}\\egroup }
   \\makeatother"

                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("beamer-simple"
                 "\\documentclass[hyperref={pdfpagelabels=false}]{beamer}
                  [DEFAULT-PACKAGES]

  \\usepackage[ngerman, english]{babel}
  \\usepackage{graphicx}
  \\usepackage{lmodern}
  \\usetheme{Kalgan}
  "
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("tufte-handout"
                 "\\documentclass{tufte-handout}
                       [NO-DEFAULT-PACKAGES]

   \\usepackage[utf8]{inputenc}
   \\usepackage[T1]{fontenc}
   \\usepackage[german, english]{babel}
   \\usepackage{graphicx}
     \\setkeys{Gin}{width=\\linewidth,totalheight=\\textheight,keepaspectratio}
   \\usepackage{amsmath}
   \\usepackage{booktabs}
   \\usepackage{units}
   \\usepackage{multicol}
   \\usepackage{lipsum}
   \\usepackage{fancyvrb}
     \\fvset{fontsize=\\normalsize}

   \\newcommand{\\doccmd}[1]{\\texttt{\\textbackslash#1}}
   % command name -- adds backslash automatically
   \\newcommand{\\docopt}[1]{\\ensuremath{\\langle}\\textrm{\\textit{#1}}\\ensuremath{\\rangle}}% optional command argument
   \\newcommand{\\docarg}[1]{\\textrm{\\textit{#1}}}% (required) command argument
   \\newcommand{\\docenv}[1]{\\textsf{#1}}% environment name
   \\newcommand{\\docpkg}[1]{\\texttt{#1}}% package name
   \\newcommand{\\doccls}[1]{\\texttt{#1}}% document class name
   \\newcommand{\\docclsopt}[1]{\\texttt{#1}}% document class option name
   \\newenvironment{docspec}{\\begin{quote}\\noindent}{\\end{quote}}% command specification environment
   "
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("thesis"
                 "\\documentclass[11pt]{memoir}
  [DEFALT-PACKAGES]
  [PACKAGES]
  [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[presentation]{beamer}
                  [DEFAULT-PACKAGES]"
           
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  ;; (setq org-latex-to-pdf-process
  ;;       ;; '("latexmk -pdflatex='xelatex -shell-escape %O'
  ;;       ;; -interaction=nonstopmode -f %f")
  ;;       '("xelatex --shell-escape -interaction=nonstopmode -f %f"))

  (setq org-latex-pdf-process 
        '("xelatex --shell-escape -interaction=nonstopmode %f"
          "xelatex --shell-escape -interaction=nonstopmode %f"))

  (setq beyerstry-summary
        (concat "\\documentclass[12pt,letterpaper]{article}\n"
          "[DEFAULT-PACKAGES]\n"
          "\\usepackage{amsmath,amsthm,amsfonts,amssymb,amscd}\n"
          "\\usepackage{multirow,booktabs}\n"
          "\\usepackage[table]{xcolor}\n"
          "\\usepackage{fullpage}\n"
          "\\usepackage{lastpage}\n"
          "\\usepackage{enumitem}\n"
          "\\usepackage{fancyhdr}\n"
          "\\usepackage{mathrsfs}\n"
          "\\usepackage{wrapfig}\n"
          "\\usepackage{setspace}\n"
          "\\usepackage{calc}\n"
          "\\usepackage{multicol}\n"
          "\\usepackage{cancel}\n"
          "% \\usepackage[retainorgcmds]{IEEEtrantools}\n"
          "\\usepackage[margin=3cm]{geometry}\n"
          "\\usepackage{floatrow}\n"
          "\\newlength{\\tabcont}\n"
          "\\setlength{\\parindent}{0.0in}\n"
          "\\setlength{\\parskip}{0.05in}\n"
          "\n"
          "\\headheight 32pt\n"
          "\\lhead{\\author\\ \\vspace{0.1cm} \\\\ \\title}\n"
          "\n"
          "\\chead{\\textbf{\\title}}\n"
          "\\rhead{\\date}\n"
          "\\cfoot{summary}\n"
          "\n"
          "\\textheight 580pt\n"
          "\\headsep 10pt\n"
          "\\footskip 40pt\n"
          "\\topmargin = 7pt\n"))

  (add-to-list 'org-latex-classes
               (list "beyerstry-summary" beyerstry-summary))

  (add-to-list 'org-latex-classes
               '("beyersty-term-paper"

                 "\\documentclass[12pt]{article}

  [DEFAULT-PACKAGES]

  \\usepackage[lmargin=2in,rmargin=1.5in]{geometry}
  \\usepackage{setspace}
  \\onehalfspacing

  \\usepackage{fontspec,lipsum}

  \\setmainfont{EB Garamond}
  \\setlength\\parindent{22pt}

  \\renewcommand{\\maketitle}{
  \\vspace*{\\fill}
  \\vspace{100pt}
  \\begin{center}
  \\vspace{20pt}
  \\Huge Depth of Embedding and Position in Dependency Grammar \\\\ \\normalsize
  \\vspace{100pt}
  \\textsc{Term Paper} \\\\
  \\vspace{20pt}
  André Pascal Beyer \\\\
  \\vspace{12pt}
  Matr.Nr.: 990309 \\\\
  \\vspace{12pt}
  Trier University \\\\
  Trier \\\\
  \\today
  \\end{center} \\vspace*{\\fill}
  \\newpage{}
  \\thispagestyle{empty}
  }

  "

  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("beyerstry-thesis"
                 
                 "\\documentclass[12pt,oneside,a4paper]{book}\n

                 [DEFAULT-PACKAGES]

                 \\usepackage[width=5.75in, a4paper]{geometry}\n
                 \\parindent 12pt\n
                 \\usepackage{fontspec}\n
                 \\usepackage{setspace}\n
                 \\setsansfont{Lato Regular}\n
                 \\setmonofont{Monaco}\n
                 \\setmathrm{EB Garamond}\n
                 \\widowpenalty=300\n
                 \\clubpenalty=300\n
                 \\setromanfont[Numbers=OldStyle, Ligatures={Common, TeX}, Scale=1.0]{EB Garamond}\n
                 \\newfontfamily{\\smallcaps}[RawFeature={+c2sc,+scmp}]{EB Garamond}\n
                 \\usepackage{caption}\n
                 \\renewcommand{\\thefootnote}{\\fnsymbol{footnote}}\n
                 \\usepackage{fancyhdr}\n
                 \\usepackage[tiny,md,sc]{titlesec}\n
                 \\setlength{\\headheight}{15pt}\n             
                 \\usepackage{titling}\n
                 \\usepackage[labelfont={bf,sf,footnotesize,singlespacing},justification={justified,RaggedRight},textfont={sf,footnotesize,singlespacing},figurewithin=chapter,margin=0pt,tablewithin=chapter,singlelinecheck=false]{caption}\n
                 \\usepackage{color}\n
                 \\usepackage{xcolor}\n
                 \\definecolor{SchoolColor}{rgb}{0 0 0} % Crimson\n
                 \\definecolor{chaptergrey}{rgb}{0 0 0} % for chapter numbers\n
                 \\hypersetup{colorlinks,citecolor=SchoolColor,filecolor=black,linkcolor=black,urlcolor=SchoolColor}\n

                 \\renewcommand{\\maketitle}{\n
                 \\vspace*{\\fill}\n
                 \\vspace{100pt}\n
                 \\begin{center}\n
                 \\Huge \\textcolor{SchoolColor}{\\thetitle} \\normalsize \\\\\n
                 \\vspace{20pt}\n
                 Utilizing Long Short-Term Memory Networks, Gated Recurrent Networks, and GloVe Vectors \n
                 \\vspace{100pt}\n
                 \\textsc{Master's Thesis} \\\\\n
                 \\vspace{20pt}\n
                 André Pascal Beyer\n
                 \\vspace{12pt}\n
                 \\vspace{12pt}\n
                 Trier University \\\\ Trier \\\\\n
                 \\today\n
                 \\end{center} \\vspace*{\\fill}\n
                 }\n
                 \\newcommand{\\copyrightpage}{\n
                 \\newpage\n
                 \\thispagestyle{empty}\n
                 \\vspace*{\\fill}\n
                 \\scshape \\noindent \\small \\copyright \\small 2014\\hspace{3pt}-- André Pascal Beyer \\\\\n
                 \\noindent all rights reserved.\n
                 \\vspace*{\\fill}\n
                 \\newpage\n
                 \\rm\n
                 }\n
                 \\renewcommand{\\backmatter}{\n
                 \\begin{appendices}\n
                 %\\include{chapters/appendixA}\n
                 \\end{appendices}\n
                 %\\input{endmatter/personalize}\n
                 \\clearpage\n
                 \\bibliography{references}\n
                 \\addcontentsline{toc}{chapter}{References}\n
                 \\bibliographystyle{apalike}\n
                 %\\include{endmatter/colophon}\n
                 }\n"

                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** Assignment

#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (add-to-list 'org-latex-classes
               '("beyerstry-assignment"
                 "\\documentclass[a4paper]{tufte-handout}
  [NO-DEFAULT-PACKAGES]

  % hyperref setup
  \\usepackage{hyperref}
  \\hypersetup{
      pdffitwindow=false,            % window fit to page
      pdfstartview={Fit},            % fits width of page to window
      pdftitle={\\@title},     % document title
      pdfauthor={André Pascal Beyer},         % author name
      pdfsubject={},                 % document topic(s)
      pdfnewwindow=true,             % links in new window
      colorlinks=true,               % coloured links, not boxed
      linkcolor=DarkScarletRed,      % colour of internal links
      citecolor=DarkChameleon,       % colour of links to bibliography
      filecolor=DarkPlum,            % colour of file links
      urlcolor=DarkSkyBlue           % colour of external links
  }

  % link color
  \\definecolor{DarkSkyBlue}{rgb}{0.12,0.29,0.53}

  % input
  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}

  % packages
  \\usepackage{amsmath}
  \\usepackage{amsfonts}
  \\usepackage{amssymb}
  \\usepackage{bigdelim}
  \\usepackage{booktabs}
  \\usepackage{epsfig}
  \\usepackage{extract}
  \\usepackage{fancyhdr}
  \\usepackage{framed}
  \\usepackage{graphicx}
  \\graphicspath{ {figures/} }
  \\usepackage{multibib}
  \\usepackage{multirow}
  \\usepackage{pdflscape}
  \\usepackage[usenames,dvipsnames]{pstricks}
  \\usepackage{textcomp}
  \\usepackage{url}
  \\usepackage{wrapfig}
  \\usepackage{tipa}
  \\usepackage{textgreek}

  % fonts
  \\setsansfont[Ligatures=TeX, % recommended
                UprightFont={* Light}]{Myriad Pro}

  \\setmonofont{Monaco}
  \\setmathrm{EB Garamond}

  \\setmainfont[Ligatures=TeX, % recommended
    UprightFont={* Light}]{Myriad Pro}

  % header / footer
  \\pagestyle{fancy}
  \\setlength\\parindent{0in}
  \\setlength\\parskip{0.1in}
  \\setlength\\headheight{15pt}

  \\rhead{\\workingDate}
  \\lfoot{\\includegraphics[width=0.1\\textwidth]{logo.png}}
  \\cfoot{~~\\textit{Last modified: \\today}}
  \\rfoot{\\textsc{\\thepage}}

  % new environments
  \\newenvironment{projects}%
      {\\section*{Projects \\& Collaborations}}%
      {\\vspace{2mm}\\hrule\\hspace{\\stretch{1}}}

  \\newcommand{\\exercise}[1]{%
    \\section*{#1}%
  }

  % Define a custom color set.
  \\usepackage{xcolor}
  \\definecolor{tenPercentGrey}{gray}{0.9}


  \\newcommand{\\workingDate}{\\textsc{ \\@date }}
  \\newcommand{\\userName}{\\@seminar}
  \\newcommand{\\institution}{Universität Trier}

  \\title{\\@title}"

                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

**** Beamer
#+BEGIN_SRC emacs-lisp :tangle src/export-templates.el
  (setq beyerstry-beamer-latex
    (concat "\\documentclass[hyperref={pdfpagelabels=false}]{beamer}"
            "\n\n"
            "[DEFAULT-PACKAGES]\n"
            "%%\n"
            "%% font\n"
            "%%\n"
            "\\usepackage{fontspec}\n"
            "\\setsansfont{EB Garamond}\n"
            "\\setmonofont{Inconsolata}\n\n"
            "%% sizes\n"
            "\\setbeamerfont{title}{size=\\\large, series=\\bfseries}"
            "\n"
            "\\setbeamerfont{author}{size=\\small}\n"
            "\\setbeamerfont{date}{size=\\small}\n"
            "\\setbeamerfont{section title}{size=\\large,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{plain title}{size=\\large,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{block title}{size=\\normalsize,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{block title alerted}{size=\\normalsize,"
            "\n    series=\\bfseries}\n"
            "\\setbeamerfont*{subtitle}{size=\\large}\n"
            "\\setbeamerfont{frametitle}{size=\\large,%\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{caption}{size=\\small}\n"
            "\\setbeamerfont{caption name}{series=\\bfseries}\n"
            "\\setbeamerfont{description item}{series=\\bfseries}\n"
            "\\setbeamerfont{page number in head/foot}{%\n"
            "    size=\\scriptsize}\n"
            "\\setbeamerfont{bibliography entry author}{%\n"
            "    size=\\normalsize, series=\\normalfont}\n"
            "\\setbeamerfont{bibliography entry title}{%\n"
            "    size=\\normalsize,\n"
            "    series=\\bfseries}\n"
            "\\setbeamerfont{bibliography entry location}{%\n"
            "    size=\\normalsize, series=\\normalfont}\n"
            "\\setbeamerfont{bibliography entry note}{size=\\small,\n"
            "    series=\\normalfont}\n\n"
            "%% color\n"
            "\\setbeamercolor{titlelike}{use=normal text,\n"
            "    parent=normal text}\n\n"
            "\\setbeamercolor{author}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{date}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{institute}{use=normal text,\n"
            "    parent=normal text}\n"
            "\\setbeamercolor{structure}{use=normal text,\n"
            "    fg=normal text.fg}\n\n"
            "\\setbeamercolor{footnote}{fg=normal text.fg!90}\n"
            "\\setbeamercolor{footnote mark}{fg=.}\n"))

  (add-to-list 'org-latex-classes
               (list "beyerstry-beamer" beyerstry-beamer-latex))
#+END_SRC
**** Load All
#+BEGIN_SRC emacs-lisp src/export-templates.el
  (add-to-list 'org-latex-classes
               (list "beyerstry-beamer" beyerstry-beamer-latex))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp :tangle src/custom-org.el
  (add-to-list 'org-modules 'org-habit)

  (setq org-agenda-files (mapcar '(lambda (n) (concatenate 'string "~/Documents/tracking/" n ".org"))
                                 '("agenda" "cv" "ill_neglect" "captain_caveman" "tool_cover"
                                   "finance" "website" "teaching" "applications" "crawlmynews")))

  (setq org-agenda-custom-commands
    '(("c" "Simple agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Hight=priority unfinished tasks:")))
            (agenda "")
            (alltodo ""
                     ((org-agenda-skip-function
                       '(or (apb-org-skip-subtree-if-habit)
                            (apb-org-skip=subtree-if-priority ?A)
                            (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           )))

  (defun apb-org-skip=subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?c."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 100 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
    nil)))

  (defun apb-org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\""
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
    nil)))
#+END_SRC

* COMMENT Research

  - TODO: Description

** reftex
#+BEGIN_SRC emacs-lisp :tangle src/beyeran-research.el
  ;; beyeran-research -- my approach to manage research papers with emacs
  ;;

  ;;; Commentary:


  ;;; Code:
  ;; Jump to an entry
  (defun org-mode-reftex-search ()
    "Jump to the notes for the paper pointed to."
    (interactive)
    (org-open-link-from-string (format "[[notes:%s]]" (first (reftex-citation t)))))

  (setq org-link-abbrev-alist
        '(("papers" . "~/Documents/research/papers/%s.pdf")
          ("notes" . "~/Documents/research/notes.org::#%s")
          ("summary" . "~/Documents/research/paper.org::#%s")
          ("tasks" . "~/Documents/research/tasks.org::#%s")
          ("bib" . "~/Documents/research/bibliography/bibliography.bib::%s")))

  (setq reftex-default-bibliography
        '("~/Documents/research/bibliography/bibliography.bib"))

  (defun org-mode-reftex-setup ()
    "Not sure why interactive."
    (load-library "reftex")

    (and (buffer-file-name)
         (file-exists-p (buffer-file-name))
         (progn
           ;; enable auto-revert mode to update reftex when bibtex file chagnes
           (global-auto-revert-mode t)
           (reftex-parse-all)
           ;; add custom reftex cite format to insert links
           )
         (reftex-set-cite-format
          '((?b . "[[bib:%l][%l-bib]]")
            (?n . "[[notes:%l][%l-notes]]")
            (?p . "[[papers:%l][%l-paper]]")
            (?t . "%t")
            (?h . "** %t\n   :PROPERTIES:\n   :Custom_ID: %l\n   :END:\n\n   [[papers:%l][%l-paper]]\n\n*** Summary\n    ")))

         (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
         (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search)))

  (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_SRC

** custom agenda view
#+BEGIN_SRC emacs-lisp :tangle src/beyeran-research.el
  (defun org-todo-list-current-file (&optional arg)
    "Like `org-todo-list', but using only the current buffer's file."
    (interactive "P")
    (let ((org-agenda-files (list (buffer-file-name (current-buffer)))))
      (if (null (car org-agenda-files))
          (error "%s is not visiting a file" (buffer-name (current-buffer)))
        (org-todo-list arg))))

  (setq org-priority-faces '((?A . (:foreground "red" :weight 'bold))
                             (?B . (:foreground "yellow"))
                             (?C . (:foreground "green"))))
#+END_SRC
** custom todo color
#+BEGIN_SRC emacs-lisp :tangle src/beyeran-research.el
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning) 
          ("RELEVENT" . "yellow")
          ("WAITING" . "orange")
          ("CANCELED" . (:foreground "red" :weight bold))))

#+END_SRC
* Programming Languages
** Elixir
   Elixir is a language based on erlang with more or less Ruby syntax. I like it
   very much. It has two extensions - the "normal" =elixir-mode= and a extention
   for it's project management =alchemist=.

#+BEGIN_SRC emacs-lisp :tangle src/apb-elixir.el
  (use-package elixir-mode
    :init
    (add-hook 'elixir-mode-hook 'global-company-mode))

  (use-package alchemist)
#+END_SRC

** Python
   Just some minor things - since I'm mostly using it for small scripts with
   org-mode I don't get too fancy about it

#+BEGIN_SRC emacs-lisp :tangle src/apb-python.el
  (on-win
   (setq python-shell-interpreter "c:/Python27/python.exe -i"))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp :tangle src/apb-clojure.el
  ;; configure cider
  (setq nrepl-hide-special-buffers t
        cider-repl-pop-to-buffer-on-connect nil
        cider-popup-stacktraces nil
        cider-repl-popup-stacktraces t)

  (on-mac
   (setq cider-lein-command "/Users/beyeran/bin/lein"))

  ;; useful keybindings when using clojur from org
  ;; (org-defkey org-mode-map (kbd "C-x C-e") 'cider-eval-last-sexp)
  ;; (org-defkey org-mode-map (kbd "C-c C-d") 'cider-doc)


#+END_SRC
** Groovy

#+BEGIN_SRC emacs-lisp  :tangle src/apb-groovy.el
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gradle$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.stark$" . groovy-mode))

  (add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))

  (add-hook 'groovy-mode-hook
            '(lambda ()
               (require 'groovy-electric)
               (groovy-electric-mode)))
#+END_SRC

* Looks
** Color Theme

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (require 'moe-theme)
  (moe-dark)
  ;; (load-theme 'noctilux)
  ;; (load-theme 'org-beautify-theme)
#+END_SRC
** Font

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (on-mac
   (set-face-attribute 'default nil :font "Monaco-12"))

  (on-linux
   (set-face-attribute 'default nil :font "Monaco-9"))

  (on-win
   (set-face-attribute 'default nil :font "Fira Code-9"))

  ;; Fira code
  ;; This works when using emacs --daemon + emacsclient
  (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  ;; This works when using emacs without server/client
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
  ;; I haven't found one statement that makes both of the above situations work, so I use both for now

  (defconst fira-code-font-lock-keywords-alist
    (mapcar (lambda (regex-char-pair)
              `(,(car regex-char-pair)
                (0 (prog1 ()
                     (compose-region (match-beginning 1)
                                     (match-end 1)
                                     ;; The first argument to concat is a string containing a literal tab
                                     ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
            '(("\\(www\\)"                   #Xe100)
              ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
              ("\\(\\*\\*\\*\\)"             #Xe102)
              ("\\(\\*\\*/\\)"               #Xe103)
              ("\\(\\*>\\)"                  #Xe104)
              ("[^*]\\(\\*/\\)"              #Xe105)
              ("\\(\\\\\\\\\\)"              #Xe106)
              ("\\(\\\\\\\\\\\\\\)"          #Xe107)
              ("\\({-\\)"                    #Xe108)
              ("\\(\\[\\]\\)"                #Xe109)
              ("\\(::\\)"                    #Xe10a)
              ("\\(:::\\)"                   #Xe10b)
              ("[^=]\\(:=\\)"                #Xe10c)
              ("\\(!!\\)"                    #Xe10d)
              ("\\(!=\\)"                    #Xe10e)
              ("\\(!==\\)"                   #Xe10f)
              ("\\(-}\\)"                    #Xe110)
              ("\\(--\\)"                    #Xe111)
              ("\\(---\\)"                   #Xe112)
              ("\\(-->\\)"                   #Xe113)
              ("[^-]\\(->\\)"                #Xe114)
              ("\\(->>\\)"                   #Xe115)
              ("\\(-<\\)"                    #Xe116)
              ("\\(-<<\\)"                   #Xe117)
              ("\\(-~\\)"                    #Xe118)
              ("\\(#{\\)"                    #Xe119)
              ("\\(#\\[\\)"                  #Xe11a)
              ("\\(##\\)"                    #Xe11b)
              ("\\(###\\)"                   #Xe11c)
              ("\\(####\\)"                  #Xe11d)
              ("\\(#(\\)"                    #Xe11e)
              ("\\(#\\?\\)"                  #Xe11f)
              ("\\(#_\\)"                    #Xe120)
              ("\\(#_(\\)"                   #Xe121)
              ("\\(\\.-\\)"                  #Xe122)
              ("\\(\\.=\\)"                  #Xe123)
              ("\\(\\.\\.\\)"                #Xe124)
              ("\\(\\.\\.<\\)"               #Xe125)
              ("\\(\\.\\.\\.\\)"             #Xe126)
              ("\\(\\?=\\)"                  #Xe127)
              ("\\(\\?\\?\\)"                #Xe128)
              ("\\(;;\\)"                    #Xe129)
              ("\\(/\\*\\)"                  #Xe12a)
              ("\\(/\\*\\*\\)"               #Xe12b)
              ("\\(/=\\)"                    #Xe12c)
              ("\\(/==\\)"                   #Xe12d)
              ("\\(/>\\)"                    #Xe12e)
              ("\\(//\\)"                    #Xe12f)
              ("\\(///\\)"                   #Xe130)
              ("\\(&&\\)"                    #Xe131)
              ("\\(||\\)"                    #Xe132)
              ("\\(||=\\)"                   #Xe133)
              ("[^|]\\(|=\\)"                #Xe134)
              ("\\(|>\\)"                    #Xe135)
              ("\\(\\^=\\)"                  #Xe136)
              ("\\(\\$>\\)"                  #Xe137)
              ("\\(\\+\\+\\)"                #Xe138)
              ("\\(\\+\\+\\+\\)"             #Xe139)
              ("\\(\\+>\\)"                  #Xe13a)
              ("\\(=:=\\)"                   #Xe13b)
              ("[^!/]\\(==\\)[^>]"           #Xe13c)
              ("\\(===\\)"                   #Xe13d)
              ("\\(==>\\)"                   #Xe13e)
              ("[^=]\\(=>\\)"                #Xe13f)
              ("\\(=>>\\)"                   #Xe140)
              ("\\(<=\\)"                    #Xe141)
              ("\\(=<<\\)"                   #Xe142)
              ("\\(=/=\\)"                   #Xe143)
              ("\\(>-\\)"                    #Xe144)
              ("\\(>=\\)"                    #Xe145)
              ("\\(>=>\\)"                   #Xe146)
              ("[^-=]\\(>>\\)"               #Xe147)
              ("\\(>>-\\)"                   #Xe148)
              ("\\(>>=\\)"                   #Xe149)
              ("\\(>>>\\)"                   #Xe14a)
              ("\\(<\\*\\)"                  #Xe14b)
              ("\\(<\\*>\\)"                 #Xe14c)
              ("\\(<|\\)"                    #Xe14d)
              ("\\(<|>\\)"                   #Xe14e)
              ("\\(<\\$\\)"                  #Xe14f)
              ("\\(<\\$>\\)"                 #Xe150)
              ("\\(<!--\\)"                  #Xe151)
              ("\\(<-\\)"                    #Xe152)
              ("\\(<--\\)"                   #Xe153)
              ("\\(<->\\)"                   #Xe154)
              ("\\(<\\+\\)"                  #Xe155)
              ("\\(<\\+>\\)"                 #Xe156)
              ("\\(<=\\)"                    #Xe157)
              ("\\(<==\\)"                   #Xe158)
              ("\\(<=>\\)"                   #Xe159)
              ("\\(<=<\\)"                   #Xe15a)
              ("\\(<>\\)"                    #Xe15b)
              ("[^-=]\\(<<\\)"               #Xe15c)
              ("\\(<<-\\)"                   #Xe15d)
              ("\\(<<=\\)"                   #Xe15e)
              ("\\(<<<\\)"                   #Xe15f)
              ("\\(<~\\)"                    #Xe160)
              ("\\(<~~\\)"                   #Xe161)
              ("\\(</\\)"                    #Xe162)
              ("\\(</>\\)"                   #Xe163)
              ("\\(~@\\)"                    #Xe164)
              ("\\(~-\\)"                    #Xe165)
              ("\\(~=\\)"                    #Xe166)
              ("\\(~>\\)"                    #Xe167)
              ("[^<]\\(~~\\)"                #Xe168)
              ("\\(~~>\\)"                   #Xe169)
              ("\\(%%\\)"                    #Xe16a)
             ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
              ("[^:=]\\(:\\)[^:=]"           #Xe16c)
              ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
              ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

  (defun add-fira-code-symbol-keywords ()
    (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

  (add-hook 'prog-mode-hook
            #'add-fira-code-symbol-keywords)

  ;; show tabs with a special symbol
  (let
      ((d (make-display-table)))
    (aset d 9 (vector ? ?| (decode-char 'ucs #Xe135) ? ))
    (set-window-display-table nil d))
#+END_SRC

** UI
#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  ;; encoding
  (prefer-coding-system 'utf-8-emacs-unix)
  (setq set-buffer-file-coding-system 'utf-8-emacs-unix)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)

  ;; mighty 80 char rule!
  (setq-default fill-column 80)

  (use-package power-line
    :init (powerline-default-theme))

  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (use-package org-bullets-mode
    :init (org-bullets-mode))

  ;; indentation
  (indent-guide-global-mode)

  (define-globalized-minor-mode beyeran-global-highlight-mode highlight-indentation-mode
    (lambda () (highlight-indentation-mode)))

  (beyeran-global-highlight-mode 1)
#+END_SRC
