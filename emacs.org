#+TITLE: emacs.org
#+AUTHOR: Andre Pascal Beyer
#+DATE: 2013-12-20

* Globals, Functions and Settings
** Globals
#+begin_src emacs-lisp :tangle emacs.el
(require 'eldoc)

(prefer-coding-system 'utf-8)

(setq user-mail-address "beyeran@gmail.com")
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-message t)

(defun add-to-load-path (path)
  "Wrapps the ADD-TO-LIST function for the LOAD-PATH variable"
  (add-to-list 'load-path path))

(defun add-theme (path)
  "Wrapps the ADD-TO-LIST function for the CUSTOM-THEME-LOAD-PATH variable"
  (add-to-list 'custom-theme-load-path (format "~/.emacs.d/color-theme/%s"
					       path)))

(defun add-to-alist (suffix-mode-list)
  "Wrapps the ADD-TO-LIST function for the AUTO-MODE-ALIST variable"
  (add-to-list 'auto-mode-alist suffix-mode-list))

(mapc #'load (directory-files "~/.emacs.d/src/" t "\\.el$"))

(add-to-load-path "~/.emacs.d/src/")
#+end_src
** Macros
#+begin_src emacs-lisp :tangle src/functions.el
  (defmacro with-module (symbol name-string &rest body)
    `(condition-case nil
         (progn
           (add-to-load-path  ,(format "%s%s" *modules-dir* name-string))
           (autoload ',symbol ,name-string ,name-string t)
           ,@body)
       
       (error (message (format " => problem loading %s" ',symbol))
              nil)))
  
  (defmacro with-library (symbol &rest body)
    `(condition-case nil
         (progn
           (add-to-load-path ,(format "%s%s" *modules-dir* symbol))
           (require ',symbol)
           ,@body)))
#+end_src
** Settings
#+begin_src emacs-lisp :tangle src/settings.el
(put 'with-module 'lisp-indent-function 1)

(defun pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))

(font-lock-add-keywords 'emacs-lisp-mode
                        '(("(\\(lambda\\)\\>" (0 (prog1 ()
                                              (compose-region (match-beginning 1)
                                                              (match-end 1)
                                                              λ))))))

(font-lock-add-keywords 'python
                        '(("lambda" (0 (prog1 ()
                                         (compose-region (match-beginning 1)
                                                         (match-end 1)
                                                         λ))))))

;; (add-hook 'lisp-mode-hook (prettify-symbols-mode))
;; (add-hook 'emacs-lisp-mode-hook (prettify-symbols-mode))
#+end_src
* Modes
** magit
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; magit
  ;;

  ;; (eval-after-load 'info
  ;;  '(progn (info-initialize)
  ;;          (add-to-list 'Info-directory-list "~/.emacs.d/modules/magit/")))

  ;; (with-library git-commit-mode)
  ;; (with-library magit)

#+end_src
** paredit
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; paredit
  ;;
  (defun add-paredit (mode)
    "Wrapps the function used for adding paredit to mode hooks"
    (add-hook mode #'enable-paredit-mode))
  
  (with-module enable-paredit-mode "paredit"
               (add-paredit 'emacs-lisp-mode)
               (add-paredit 'eval-expression-minibuffer-setup-hook)
               (add-paredit 'ielm-mode-hook)
               (add-paredit 'lisp-mode-hook)
               (add-paredit 'clojure-mode-hook)
               (add-paredit 'clojure-interaction-mode-hook)
               (add-paredit 'lfe-mode-hook)
               (add-paredit 'lisp-interaction-mode-hook)
               (add-paredit 'scheme-mode-hook))
  
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round)
  
#+end_src
** xml-parse
#+begin_src emacs-lisp :tangle src/modules
;;
;; xml-parse
;;

;; (with-library xml-parse)

#+end_src
** web development
#+begin_src emacs-lisp :tangle src/modules.el
  (with-library js2-mode)
  (with-library simple-httpd)
  (with-library skewer-mode
                (add-hook 'js2-mode-hook 'skewer-mode)
                (add-hook 'css-mode-hook 'skewer-css-mode))

  (add-to-alist '("\\.\\(js\\|json\\)$" . js2-mode))

  (define-key js2-mode-map (kbd "\C-c\C-r") 'skewer-eval-region)
  (define-key js2-mode-map (kbd "\C-c\C-e") 'skewer-eval-last-expression)

  (with-library skewer-repl)
  (with-library skewer-bower)

  (defun skewer-eval-region (start end)
    "Evaluate the region as JavaScript code."
    (interactive "r")
    (skewer-eval (buffer-substring-no-properties start end)
                 #'skewer-post-minibuffer))
#+end_src
** languages
*** python
#+begin_src emacs-lisp :tangle src/modules
  ;;
  ;; python
  ;;
  ;; copied from github.com/danlei/emacs
  ;; Thanks Daniel!
  ;;
  
  (require 'python nil t)
  ;; (setq python-process-kill-without-query t
  ;; python-default-version 3)
  
  (add-hook 'python-mode-hook
            (lambda ()
                                          ; (local-set-key (kbd "<C-tab>") 'symbol-complete)
              (local-set-key (kbd "C-c d") 'pydoc)
                                          ; (setq parens-require-spaces nil)
              (eldoc-mode 1)))
  
  (add-hook 'inferior-python-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c d") 'pydoc)))
  
  (setq dhl-python-command
        (if (eq system-type 'windows-nt)
            "C:/Python34/python.exe"
          "python3"))
  
  (setq-default python-shell-interpreter dhl-python-command
                python-shell-interpreter-args "-ui"
                                          ; python-command dhl-python-command
                                          ; python-python-command dhl-python-command
                )
  
  (defadvice python-describe-symbol
    (after dhl-python-describe-symbol-advice last () activate)
    "Switch to the python help buffer after invocation."
    (other-window 1))
  
  ;; modified from http://ubuntuforums.org/showthread.php?t=1363999
  (defun pydoc (word)
    "Launch pydoc on the word at point"
    (interactive
     (list (let* ((word (thing-at-point 'word))
                  (input (read-string
                          (format "pydoc entry%s: "
                                  (if word
                                      (format " (default %s)" word)
                                    "")))))
             (if (string= input "")
                 (or word (error "No pydoc args given"))
               input))))
    (save-window-excursion
      (shell-command (concat "pydoc " word) "*PYDOC*"))
    (view-buffer "*PYDOC*" 'bury-buffer))
  
  (define-key python-mode-map (kbd "C-c C-c") 'python-shell-send-defun)
  (define-key python-mode-map (kbd "C-c C-r") 'python-shell-send-region)
#+end_src
*** ruby
#+begin_src emacs-lisp :tangle src/modules
;;
;; inf-ruby
;;

(with-library inf-ruby
              (define-key ruby-mode-map (kbd "C-c C-c") 'ruby-send-definition)
              (define-key ruby-mode-map (kbd "C-c C-r") 'ruby-send-region)
              (define-key ruby-mode-map (kbd "C-c C-b") 'ruby-send-buffer))
#+end_src
*** perl
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; perl
;;

;; (with-library sepia
;;               (setq sepia-perl5lib (list (expand-file-name "~/.emacs.d/modules/sepia/lib")))
;;               (defalias 'perl-mode 'sepia-mode))

#+end_src
*** chicken
#+begin_src emacs-lisp :tangle src/modules.el
(require 'autoinsert)
(add-hook 'find-file-hooks 'auto-insert)

(setq auto-insert-alist
      '(("\\.scm" .
         (insert "#!/usr/bin/csi -s\n\n"))))

(setf scheme-program-name "csi")
#+end_src
*** haskell
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; haskell mode
  ;;
  (with-library haskell-mode
                (require 'haskell-mode-autoloads)
                (add-to-list 'Info-default-directory-list "~/.emacs.d/modules/haskell-mode/")

                (add-to-alist '("\\.\\(hs\\|lhs\\)$" . haskell-mode))

                (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))


#+end_src
*** lisp
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; lisp
;;
(setq inferior-lisp-program (case system-type
                                  ((windows-nt cygwin) "c:/ccl/wx86cl -K utf-8")))

#+end_src
*** picolisp
#+begin_src emacs-lisp :tangle src/modules.el
  (add-to-load-path (concat *modules-dir* "picolisp-mode"))
  (require 'picolisp)

  (add-to-list 'auto-mode-alist '("\\.l$" . picolisp-mode))

  (add-hook 'picolisp-mode-hook
            (lambda ()
              (paredit-mode +1) ;; Loads paredit mode automatically
              (tsm-mode) ;; Enables TSM
              (define-key picolisp-mode-map (kbd "RET") 'newline-and-indent)
              (define-key picolisp-mode-map (kbd "C-h") 'paredit-backward-delete)))
#+end_src
*** clojure
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; clojure
;;

(with-library clojure-mode
              (add-to-alist '("\\.\\(clj\\)$" . clojure-mode)))

;;
;; needed for cider
;;
(with-library epl)
(with-library dash)
(with-library pkg-info)

(with-library cider
              (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
              (setq nrepl-hide-special-buffers t)
              (setq cider-repl-pop-to-buffer-on-connect nil)
              (setq cider-repl-results-prefix ";; => "))

#+end_src
*** julia
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; julia
;;

;; (with-library julia-mode)

#+end_src

*** APL
#+begin_src emacs-lisp :tangle src/modules.el
;;
;; APL
;;

(add-to-list 'load-path "~/.emacs.d/modules/apl")

(when (require 'gnu-apl-mode nil t)
  (dolist (hook '(gnu-apl-mode-hook gnu-apl-interactive-mode-hook))
    (add-hook hook (lambda ()
                     (eldoc-mode)
                     (setq buffer-face-mode-face 'gnu-apl-default)
                     (buffer-face-mode))))
  (set-face-attribute 'gnu-apl-default nil
                      :family "DejaVu Sans Mono")
  (add-to-list 'auto-mode-alist '("\\.apl$" . gnu-apl-mode)))

(setq gnu-apl-show-keymap-on-startup t)

(add-hook 'gnu-apl-interactive-mode-hook 
          '(lambda ()
             (setq buffer-face-mode 'gnu-apl-default)
             (buffer-face-mode)))

#+end_src
*** elm
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; ELM
  ;;
  
  (with-library elm-mode
                (cond ((eq system-type 'windows-nt) 
                       (progn
                         (let ((path "C:\\Program Files (x86)\\Elm Platform\\0.14.1\\bin"))
                           (setenv "PATH" (concat (getenv "PATH") (format ";%s" path)))
                           (setq exec-path (append exec-path '(path))))))))
#+end_src
*** erlang
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; erlang
  ;;
  
  (setq load-path (cons "C:/Program Files/erl6.3/lib/tools-2.7.1/emacs/" load-path))
  (setq erlang-root-dir "C:/Program Files/erl6.3")
  (setq exec-path (cons "C:/Program Files/erl6.3/bin" exec-path))
  
  ;; (require 'erlang-start)
  ;; (require 'erlang-flymake)
#+end_src
*** lfe
#+begin_src emacs-lisp :tangle src/modules.el
  ;;
  ;; LFE Mode
  ;;
    
  (with-library lfe-mode)
  (with-library lfe-start)
  (with-library inferior-lfe)
  
  (setq inferior-lfe-program (case system-type
                               ((windows-nt cygwin) "c:/Program Files/erl6.3/bin/erl.exe")))
  
  (setq inferior-lfe-program-options (case system-type
                                      ((windows-nt cygwin) '("-pa c:/cygwin/home/Hans/opt/lfe/ebin -noshell -s lfe_shell start"))))
#+end_src
** iBuffer
#+begin_src emacs-lisp :tangle src/modules.el
;;;;
;;;; ibuffer
;;;;

(require 'ibuffer nil t)

(setq ibuffer-show-empty-filter-groups nil
      ibuffer-expert t)

(setq ibuffer-saved-filter-groups
      '(("default"
         ("elisp" (or (name . "\\.el$")
                      (mode . emacs-lisp-mode)))
         ("cl" (or (name . "\\.lisp$")
                   (name . "\\.asdf$")
                   (mode . lisp-mode)
                   (mode . slime-mode)))
         ("scheme" (or (name . "\\.scm$")
                       (mode . scheme-mode)
                       (mode . geiser-mode)))
         ("clojure" (or (name . "\\.clj$")
                        (mode . clojure-mode)))
         ("python" (or (name . "\\.py$")
                       (mode . python-mode)
                       (mode . python-2-mode)
                       (mode . python-3-mode)))
         ("ruby" (or (name . "\\.rb$")))
         ("perl" (mode . cperl-mode))
         ("shell" (or (name . "\\.sh$")
                      (name . "^\\.zshrc$")
                      (name . "^\\.profile")
                      (mode . shell-script-mode)))
         ("R" (name . "\\.R$"))
         ("julia" (name . "\\.jl$"))
         ("haskell" (or (name . "\\.hs$")
                        (mode . haskell-mode)))
         ("C" (or (name . "\\.c$")
                  (name . "\\.h$")
                  (mode . c-mode)))
         ("C++" (or (name . "\\.cpp$")
                    (name . "\\.hpp$")
                    (mode . c++-mode)))
         ("java" (or (name . "\\.java$")
                     (mode . java-mode)))
         ("css" (or (name . "\\.css$")
                    (mode . css-mode)))
         ("javascript" (or (name . "\\.js$")
                           (name . "\\.json$")
                           (mode . js2-mode)))
         ("tex" (or (name . "\\.tex$")
                    (mode . tex-mode)))
         ("org" (or (name . "\\.org$")
                    (mode . org-mode)))
         ("text" (or (name . "\\.txt$")
                     (mode . text-mode)))
         ("dired" (mode . dired-mode)))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")
            (ibuffer-auto-mode 1)))

#+end_src
* Org
** General Settings
#+begin_src emacs-lisp :tangle src/myorg.el
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/modules/org-mode/lisp"))
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
  
  ;; hide stars:
  (setq org-hide-leading-stars 'hidestars)
  
  ;; "Enter" key follows links
  (setq org-return-follows-link t)
  
  ;; diverse general settings
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)

#+end_src
** Org Export Templates
*** Latex
#+BEGIN_SRC emacs-lisp :tangle src/myorg.el 
  (require 'ox-latex)

  (add-to-list 'org-latex-classes
               '("documentation"
                 "\\documentclass[12pt,oneside]{article}
                      [NO-DEFAULT-PACKAGES]

  \\usepackage[T1]{fontenc}
  \\usepackage{longtable}
  \\usepackage{float}
  \\usepackage{wrapfig}
  \\usepackage{amsmath}
  \\usepackage{hyperref}
  \\usepackage{minted}
  \\usepackage{fontspec}
  \\usepackage{geometry}
  \\geometry{a4paper, textwidth=6.5in, textheight=10in, marginparsep=7pt, marginparwidth=.6in}
  \\pagestyle{empty}
  \\setmonofont[Scale=0.8]{Source Code Pro}
  % \\setmainfont{Adobe Garamond Pro} % Main document font
  % \\setsansfont{Gill Sans Std} % Used in the from address line above the to address
  \\renewcommand{\\normalsize}{\\fontsize{12.5}{17}\\selectfont} % Sets the font size and leading
  \\usepackage[german, english]{babel}
  \\usemintedstyle{tango}
  \\makeatletter
  \\renewcommand{\\maketitle}{\\bgroup\\setlength{\\parindent}{0pt}
  \\begin{flushleft}
    \\textbf{{\\LARGE \\@title}}\\par
      \\@author
    \\end{flushleft}\\egroup
    }
    \\makeatother"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

      (add-to-list 'org-latex-classes
                   '("seminar-beamer"
                     "\\documentclass[11pt]{beamer}
                      [NO-DEFAULT-PACKAGES]

      \\usepackage[T1]{fontenc}
      \\usepackage{longtable}
      \\usepackage{float}
      \\usepackage{wrapfig}
      \\usepackage{amsmath}
      \\usepackage{hyperref}
      \\usepackage{fontspec}
      \\usepackage{geometry}
      \\geometry{a4paper, textwidth=6.5in, textheight=10in, marginparsep=7pt, marginparwidth=.6in}
      \\pagestyle{empty}
      \\setmonofont[Scale=0.8]{DejaVu Sans Mono}
      \\setmainfont{Adobe Garamond Pro} % Main document font
      \\setsansfont{Gill Sans Std} % Used in the from address line above the to address
      \\usepackage[german, english]{babel}

      \\usetheme{madrid}

      \\setbeamerfont{title like}{shape=\scshape}
      \\setbeamerfont{frametitle}{shape=\scshape}

      \\setbeamercolor*{lower separation line head}{bg=DeepSkyBlue4} 
      \\setbeamercolor*{normal text}{fg=black,bg=white} 
      \\setbeamercolor*{alerted text}{fg=red} 
      \\setbeamercolor*{example text}{fg=black} 
      \\setbeamercolor*{structure}{fg=black} 

      \\setbeamercolor*{palette tertiary}{fg=black,bg=black!10} 
      \\setbeamercolor*{palette quaternary}{fg=black,bg=black!10} 

      \\renewcommand{\\normalsize}{\\fontsize{12.5}{17}\\selectfont} % Sets the font size and leading"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
** Org Settings for Capture
   The capture and refill functionality is handled here.
*** General Settings
#+begin_src emacs-lisp :tangle src/myorg.el
  ;; different paths per OS must be set (to be done)
  (if (eq system-type 'windows-nt)
      (defvar org-dropbox-path "C:/Users/Hans/Dropbox/org/org/")
    (defvar org-dropbox-path "~/Dropbox/org/org/"))
  
  ;; Capture with "C-c c"
  (define-key global-map "\C-cc" 'org-capture)
  
  ;; some keys
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  
#+end_src
*** Babel
#+begin_src emacs-lisp :tangle src/myorg.el
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)
     (R . t)
     (ledger . t)
     (perl . t)
     (octave . t)
     (picolisp . t)
     (ruby . t)
     (python . t)
     (js . t)
     (lisp . t)
     (haskell . t)))
  
  ;; speaciality for R
  (add-to-list 'org-src-lang-modes
               '("r" . ess-mode))
  
  ;; nice bullets
  (with-library org-bullets
                (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  
  ;; ledger mode
  ;; (with-library ledger-mode)
#+end_src
*** Templates & Refill
#+begin_src emacs-lisp :tangle src/myorg.el
  (setq org-capture-templates
        '(("n" "notes" entry (file+headline (concat org-dropbox-path "notes.org")
                                            "Notes"
                                            "* %?\nEntered on %U\n  %i"))
          ("t" "tasks" entry (file+headline (concat org-dropbox-path "tasks.org")
                                            "Tasks"
                                            "* TODO %?\nEntered on %U\n  %i"))
          ("p" "projects" entry (file+headline (concat org-dropbox-path "projects.org")
                                               "Projects"
                                               "** TODO %?\Entered on %U\n  %i"))
          ("c" "calendar" entry (file+headline (concat org-dropbox-path "calendar.org")
                                               "Calendar"
                                               "* %?\nEntered on %U\n  %i"))
          ("o" "obligation" entry (file+headline (concat org-dropbox-path "obligations.org")
                                                 "Obligation"
                                                 "* TODO %?\nEntered on %U\n  %i"))))
  
  ;;;; Refilling task
  ;; Use IDO
  (setq org-completion-use-ido t)
  
  ;; Targets start with the file name - allows creating level 1 tasks
  (setq org-refile-use-outline-path (quote file))
  
  ;; Targets complete in steps so we start with filename, TAB shows the nest level of targets etc.
  (setq org-outline-path-complete-in-steps t)
  
  ;; Keywords & drawers
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "DELEGATED(g)" "|"
                    "DONE(d)" "CANCELED(c)")))
  
  ;; colors
  (setq org-todo-keyword-faces
        '(("TODO"      . (:foreground "red"         :weight bold))
          ("STARTED"   . (:foreground "green"       :weight bold))
          ("WAITING"   . (:foreground "sienna"      :weight bold))
          ("DELEGATED" . (:foreground "forestgreen" :weight bold))
          ("DONE"      . (:foreground "forestgreen" :weight bold))
          ("CANCELED"  . shadow)))
  
  ;; Fast TODO Selection
  (setq org-use-fast-todo-selection t)
  
  ;; Logging - important
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+end_src
*** Agenda
#+begin_src emacs-lisp :tangle src/myorg.el
  ;;;; Agenda
  ;; highlight active line
  (add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))

  (setq org-agenda-format-date "%Y-%m-%d")

  ;; color for different priorities
  (setq org-agenda-fontify-priorities
        '((65 (:foreground "Red"))
          (66 (:foreground "Blue"))
          (67 (:foreground "Darkgreen"))))

  (setq org-agenda-date-weekend '(:foreground "Yellow" :weight bold))

  ;; Hide done or past tasks
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)

  ;; agenda view
  (setq org-agenda-custom-commands
        '(("s" "SOMEDAY" tags "someday"
           ((org-agenda-filter-present
             '("+someday"))
            (org-agenda-todo-ignore-with-date nil)))))

  ;; agenda files
  (setq org-agenda-files (mapcar '(lambda (n) (concat org-dropbox-path n))
                                 '("notes.org" "tasks.org" "calendar.org" "obligations.org" "projects.org")))
#+end_src
** Org Mobile
#+begin_src emacs-lisp :tangle src/myorg.el
  (defvar org-mobile-path "~/Dropbox/org/mobile/")

  (setq org-directory org-dropbox-path)

  (setq org-mobile-inbox-for-pull (concat org-dropbox-path "todo.org"))
  (setq org-mobile-directory org-mobile-path)

  (setq org-mobile-files org-agenda-files)
  (setq org-mobile-force-id-on-agenda-items nil)
#+end_src
** Org Reveal
#+begin_src emacs-lisp :tangle src/myorg.el
  ;;
  ;; org reveal for presentations
  ;;

  (with-library ox-reveal)

  (setq org-reveal-root "file:///c:/cygwin/home/Hans/opt/reveal.js")

#+end_src
* Eyecandy
#+begin_src emacs-lisp :tangle "src/eyecandy.el"
;;
;; color theme
;;

;; (add-theme "sunburst")
;; (load-theme 'sunburst t)
;; (add-theme "monokai")
;; (load-theme 'monokai t)
;; (add-to-list 'load-path  "~/.emacs.d/color-theme/tomorrow")
;; (require 'color-theme-sanityinc-tomorrow)
;; (color-theme-sanityinc-tomorrow-bright)
(add-to-list 'custom-theme-load-path "~/.emacs.d/modules/color-themes/themes")
(load-theme 'spolsky t)

;;
;; hud
;;
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(global-visual-line-mode 1)
(show-paren-mode 1)
(global-hl-line-mode 1)
(setq inhibit-splash-screen t)
(setq visible-bell t)

;;
;; font
;;
(set-face-attribute 'default nil :font "Source Code Pro-8")
;; (set-default-font "Droid Sans Mono-9")
#+end_src
