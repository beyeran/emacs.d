#
# file: emacs.org
#
# author:     André Beyer <beyeran@gmail.com>
# Time-stamp: <2012-07-30 11:06:45 beyeran>
#

* Essentials
** Macros
#+begin_src emacs-lisp :tangle emacs.el
;;
;; file: emacs.el
;;


;; some macros
(defmacro sys-diversification (gnu/linux &optional darwin win)
  "System diversification for Linux, Mac and Windows, focus on Linux"
  `(cond ((sys-type 'darwin) ,darwin)
         ((sys-type 'gnu/linux) ,gnu/linux)
         ((sys-type 'windows-nt) ,win)
         (t nil)))

(defun sys-type (name)
  (if (eq system-type name)
      t
    nil))

(defmacro require-beyeran (name)
  (let ((require-symbol (intern (concat "beyeran-" name))))
    `(require ',require-symbol)))

;; strangely this function isn't available on my linux system
(sys-diversification
 (defun flatten (list)
   (cond ((null list) nil)
         ((atom list) list)
         (t
          (let ((old list)
                (new ())
                item)
            (while old
              (if (atom old)
                  (setq item old
                        old nil)
                (setq item (car old)
                      old (cdr old)))
              ;; Make item atomic
              (while (consp item)
                (if (cdr item)
                    (setq old (cons (cdr item) old)))
                (setq item (car item)))
              (setq new (cons item new)))
            (reverse new))))))

#+end_src
** Init File
#+begin_src emacs-lisp :tangle emacs.el

;; possible differences between paths
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setenv "SHELL" shell-file-name)
(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)

;; functions for loading the right folder
(setq dotfiles-dir (file-name-directory
  (or (buffer-file-name) load-file-name)))

(setq beyeran-dir (concat dotfiles-dir "beyeran/"))

(setq extensions-dir (concat dotfiles-dir "extensions/"))

(add-to-list 'load-path dotfiles-dir)
(add-to-list 'load-path beyeran-dir)
(add-to-list 'load-path extensions-dir)

(defun add-to-loadpath (name)
  (add-to-list 'load-path (concat extensions-dir name)))

(defun load-multiple (folder-list)
  (mapcar #'(lambda (n)
              (add-to-loadpath n)) folder-list))
#+end_src
** Loading Paths
#+begin_src emacs-lisp :tangle emacs.el

(setq *extension-list* '("color-theme" 
                         "paredit"
                         "org-mode"
                         "org-mode/lisp"
                         "ido"
                         "ruby-mode"
                         "haskell-mode"
                         "haskell-indent"
                         "clojure-mode"
                         "swank-clojure"
                         "prolog"
                         "scheme"
                         "scss-mode"
                         "smex"
                         "ess"
                         "ess/lisp"
                         "coffee-mode"
                         "shen-mode"
                         "maxima"))

(sys-diversification
 (append *extension-list* '("/usr/share/emacs/site-lisp/slime/")))

(load-multiple *extension-list*)
#+end_src
** Requirements
#+begin_src emacs-lisp :tangle emacs.el

;; requiring local files

(require-beyeran "misc")
(require-beyeran "auto-insert")
(require-beyeran "paredit")
(require-beyeran "smex")
(require-beyeran "org")
(require-beyeran "org-babel")
(require-beyeran "org-reftex")
(require-beyeran "org-export-templates")
(require-beyeran "jekyll")
(require-beyeran "ruby-mode")
(require-beyeran "haskell-mode")
(require-beyeran "clojure-mode")
(require-beyeran "prolog-mode")
(require-beyeran "shen-mode")
;;(require-beyeran "scheme-mode")
(require-beyeran "scss-mode")
(require-beyeran "coffee-mode")
(require-beyeran "ess")
(require-beyeran "gtd")
(require-beyeran "maxima")
;;(require-beyeran "erlang-mode")
(sys-diversification
 () 
 (require-beyeran "slime"))

#+end_src
* General Stuff
  In here there is some general stuff which means: some settings
  (tool-bar, curser etc).
** HUD & general Information
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;
;; file: beyeran-misc.el
;;

;;;;;;;; general stuff ;;;;;;;
(require 'cl)

(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(show-paren-mode 1)
(setq inhibit-spalsh-screen nil)

(sys-diversification 
 (custom-set-faces
  '(default ((t (:inherit nil :stipple nil :background "#000000" :foreground "#a6a6a6" :inverse-video nil 
                          :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal 
                          :height 90 :width normal :foundry "xos4" :family "dina"))))))

(setq inihibit-startup-echo-area-message "André")
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)


#+end_src
** Color Theme
#+begin_src emacs-lisp :tangle beyeran/beyeran-color-theme-linux.el
;;
;; file: beyeran-color-theme-linux.el
;;

;;;; color-theme ;;;;
(defun beyeran-color-theme-linux ()
  (interactive)
  (color-theme-install
   '(beyeran-color-theme-linux
      ((background-color . "#000000")
      (background-mode . light)
      (border-color . "#030303")
      (cursor-color . "#4f4f4f")
      (foreground-color . "#a6a6a6")
      (mouse-color . "black"))
     (fringe ((t (:background "#030303"))))
     (mode-line ((t (:foreground "#ffffff" :background "#242424"))))
     (region ((t (:background "#121212"))))
     (font-lock-builtin-face ((t (:foreground "#878787"))))
     (font-lock-comment-face ((t (:foreground "#434242"))))
     (font-lock-function-name-face ((t (:foreground "#d12700"))))
     (font-lock-keyword-face ((t (:foreground "#f75c08"))))
     (font-lock-string-face ((t (:foreground "#ffffff"))))
     (font-lock-type-face ((t (:foreground"#fd8c35"))))
     (font-lock-variable-name-face ((t (:foreground "#fc2222"))))
     (minibuffer-prompt ((t (:foreground "#f53f00" :bold t))))
     (font-lock-warning-face ((t (:foreground "Red" :bold t))))
     )))

(provide 'beyeran-color-theme-linux)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-color-theme-mac.el
;;
;; file: beyeran-color-theme-mac.el
;;

(defun beyeran-color-theme-mac ()
  (interactive)
  (color-theme-install
   '(beyeran-color-theme-mac
      ((background-color . "#1f1f1f")
      (background-mode . light)
      (border-color . "#2b2b2b")
      (cursor-color . "#333333")
      (foreground-color . "#b5b5b5")
      (mouse-color . "black"))
     (fringe ((t (:background "#2b2b2b"))))
     (mode-line ((t (:foreground "#000000" :background "#666666"))))
     (region ((t (:background "#999999"))))
     (font-lock-builtin-face ((t (:foreground "#aa37e6"))))
     (font-lock-comment-face ((t (:foreground "#3b3b3b"))))
     (font-lock-function-name-face ((t (:foreground "#6b6b6b"))))
     (font-lock-keyword-face ((t (:foreground "#ff362e"))))
     (font-lock-string-face ((t (:foreground "#1b79fe"))))
     (font-lock-type-face ((t (:foreground"#3fb819"))))
     (font-lock-variable-name-face ((t (:foreground "#999999"))))
     (minibuffer-prompt ((t (:foreground "#7299ff" :bold t))))
     (font-lock-warning-face ((t (:foreground "Red" :bold t))))
     )))

(provide 'beyeran-color-theme-mac)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/sweyla779450.el
;;
;; file: green-hell-mac.el
;;

(defun sweyla779450 ()
  "Theme generated by Sweyla: http://themes.sweyla.com/seed/779450/"
  (interactive)
  (color-theme-install
   '(sweyla779450
     ((background-color . "#000000")
      (foreground-color . "#FFFFFF")
      (background-mode . dark)
      (border-color . "#323232")
      (cursor-color . "#FFFFFF")
      (mouse-color . "#323232"))
     (mode-line ((t (:foreground "#FFFFFF" :background "#323232"))))
     (region ((t (:background "#323232"))))

     (font-lock-comment-face ((t (:foreground "#A4FFAA"))))
     (font-lock-constant-face ((t (:foreground "#FFCC84"))))
     (font-lock-builtin-face ((t (:foreground "#FFA8A1"))))
     (font-lock-function-name-face ((t (:foreground "#FFFF5F"))))
     (font-lock-variable-name-face ((t (:foreground "#FFFFD5"))))
     (font-lock-keyword-face ((t (:foreground "#B1E56E"))))
     (font-lock-string-face ((t (:foreground "#B8D88C"))))
     (font-lock-doc-string-face ((t (:foreground "#B8D88C"))))
     (font-lock-type-face ((t (:foreground "#DFFF87"))))
     )))

(provide 'sweyla779450)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/color-hellraiser.el
;;; color-theme ;;;;
(defun color-hellraiser ()
  (interactive)
  (color-theme-install
   '(color-hellraiser
      ((background-color . "#090909")
      (background-mode . dark)
      (border-color . "#121212")
      (cursor-color . "#b0b0b0")
      (foreground-color . "#dedede")
      (mouse-color . "black"))
     (fringe ((t (:background "#121212"))))
     (mode-line ((t (:foreground "#393939" :background "#121212"))))
     (mode-line-inactive ((t (:foreground "#393939" :background "#101010"))))
     (region ((t (:background "#020202"))))
     (font-lock-builtin-face ((t (:foreground "#da4939"))))
     (font-lock-comment-face ((t (:foreground "#404040"))))
     (font-lock-function-name-face ((t (:foreground "#ff6c29a"))))
     (font-lock-keyword-face ((t (:foreground "#da4939"))))
     (font-lock-string-face ((t (:foreground "#509f7e"))))
     (font-lock-type-face ((t (:foreground "#6d9cbe"))))
     (font-lock-variable-name-face ((t (:foreground "#5e468c"))))
     (minibuffer-prompt ((t (:foreground "#435d75" :bold t))))
     (font-lock-warning-face ((t (:foreground "#435d75" :bold t)))))))

(provide 'color-hellraiser)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(require 'color-theme)

(require 'color-hellraiser)
(color-theme-initialize)
(color-hellraiser)


(setq color-theme-is-global t)
#+end_src
** Cursor
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;;; cursor ;;;;
(setq-default cursor-type 'box)
(setq messages-buffer-max-lines 400)
(setq blink-cursor-delay 0.2)
(setq blink-cursor-interval 0.3)
#+end_src
** General Variables
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;;;;;;; general variables ;;;;;;

(define-key global-map (kbd "C-c f") 'find-function)
(setq-default tab-width 4)
#+end_src
** Comments and Timestamps
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;;; comments ;;;;
(setf comment-style 'indent)

(add-hook 'emacs-lisp-mode-hook #'imenu-add-menubar-index)
(global-set-key [mouse-3] 'mouse-popup-menubar-stuff)

;;;; time ;;;;
(display-time)
(setf display-time-day-and-date nil)
(setf display-time-24hr-format t)

;;;; timestamp ;;;;
(defvar iso-date-format "%Y-%m-%dT%H:%M:%S:z"
  "Format string for ISO dates.")

(defun iso-timestamp (&optional time)
  (format-time-sting iso-date-format
		     (or time (current-time))))

(defun insert-iso-timestamp ()
  (interactive)
  (insert (iso-timestamp)))

(defun iso-timestamp-sexp (&optional time)
  (parse-time-string (iso-timestamp)))

(require 'time-stamp)
(add-hook 'before-save-hook 'time-stamp)
(setf time-stamp-active t)
#+end_src

** Misc Functions
*** Lorem
   Webdesign is a kind of a hobby for me so I often encounter
   situations where I need to use text columns for veryfing my layout
   settings. The commonly used "lorem ipsum" seems like a standart
   text to do that, here's a function which generates it:

#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(defun lorem ()
  "Insert a lorem ipsum."
  (interactive)
  (insert "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "
          "eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim"
          "ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut "
          "aliquip ex ea commodo consequat. Duis aute irure dolor in "
          "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla "
          "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in "
          "culpa qui officia deserunt mollit anim id est laborum."))
#+end_src
*** html umlaute
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
;;;; Custom Functions ;;;;
(defun html-umlaute ()
  "replaces iso-umlaute with html-umlaute"
  (interactive)
  (let ((case-fold-search nil))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward
              (mapconcat '(lambda (x) (car x)) *html-entities* "\\|")
              nil t)
        (replace-match (cdr (assoc (match-string 0) *html-entities*)))))))

;;;; Variables ;;;;
(setf *html-entities*
  '(("Ä" . "&Auml;")
    ("ä" . "&auml;")
    ("Ö" . "&Ouml;")
    ("ö" . "&ouml;")
    ("Ü" . "&Uuml;")
    ("ü" . "&Uuml;")
    ("ß" . "&szling;")))
#+end_src
*** massive-shrink
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(defmacro defshrink (system space)
  `(defun ,system ()
     (interactive)
     (shrink-window ,space)))

(defshrink massive-shrink-darwin 20)
(defshrink massive-shrink-linux 14)
(defshrink massive-shrink-win 25)

(global-set-key (kbd "C-x C-q")
                (sys-diversification
                 'massive-shrink-linux
                 'massive-shrink-darwin))

#+end_src
*** make header (filestamp)
#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(setq *filestamp-seperator* "-")
(setq *filestamp-seperator-repetition* 46)

(setq *filestamp-user-name* "André Beyer")
(setq *filestamp-user-email* "beyeran@gmail.com")

(defun filestamp-make-seperator (times)
  (if (= 0 times)
      ""
    (concat *filestamp-seperator* (filestamp-make-seperator (- times 1)))))

(setq *filestamp-seperator-builded* (filestamp-make-seperator *filestamp-seperator-repetition*))

(defun filestamp-header-finished (comment-sign)
  (concat comment-sign *filestamp-seperator-builded* "\n"
          comment-sign " file: " "\n"
          comment-sign " author: " *filestamp-user-name* " <" *filestamp-user-email* ">" "\n"
          comment-sign " Time-stamp: <>" "\n"
          comment-sign *filestamp-seperator-builded* "\n"))

(setq filestamp-auto-insert-alist '((("\\.\\(tex\\|sty\\|cls\\)\\'" . "LaTeX Comment") .
                                     (insert (filestamp-header-finished "%")))
                                    (("\\.\\(lisp\\|lsp\\)\\'" . "Lisp Comment") .
                                     (insert (filestamp-header-finished ";;")))
                                    (("\\.\\(hs\\)\\'" . "Haskell Comment") .
                                     (insert (filestamp-header-finished "--")))
                                    (("\\.\\(rb\\|irb\\)\\'" . "Ruby Comment") .
                                     (insert (filestamp-header-finished "##")))
                                    (("\\.\\(sh\\|zsh\\)\\'" . "Shell Comment") .
                                     (insert (filestamp-header-finished "##")))))

(defun filestamp-insert ()
  (interactive)
  (insert (filestamp-header-finished ";;")))

(add-hook 'write-file-hooks 'time-stamp)
(add-hook 'find-file-hooks 'auto-insert)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-misc.el
(provide 'beyeran-misc)
#+end_src
** Paredit
#+begin_src emacs-lisp :tangle beyeran/beyeran-paredit.el
;;
;; file: beyeran-paredit.el
;;

;;;;;;;; paredit ;;;;;;;;
(require 'paredit)

(when (require 'paredit "paredit" t)
  (mapc (lambda (hook) (add-hook hook (lambda () (paredit-mode 1))))
        '(emacs-lisp-mode-hook
          slime-repl-mode-hook
          slime-mode-hook
          inferior-qi-mode-hook
          qi-mode-hook
          scheme-mode
          clojure-mode-hook)))
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-paredit.el
(provide 'beyeran-paredit)
#+end_src

** smex
#+begin_src emacs-list :tangle beyeran/beyeran-smex.el
;;
;; file: beyeran-smex.el
;;

(and (require 'ido "ido" t)
     (ido-mode t)
     (require 'smex "smex" t)
     (smex-initialize)
     (setq smex-save-file "~/.smex")
     (smex-auto-update))

(provide 'beyeran-smex)
#+end_src
** auto-insert
#+begin_src emacs-lisp :tangle beyeran/beyeran-auto-insert.el
;;
;; file: beyeran-auto-insert.el
;;

(require 'autoinsert)

(auto-insert-mode)
(setq auto-insert-query nil)
(setq auto-insert-directory (expand-file-name "~/.emacs.d/auto-complete/"))

(add-hook 'find-file-hooks 'auto-insert)

(setq auto-insert-alist
      '(("\\.lisp$" . ["insert.lisp" auto-update-file])
        ("\\.rb$" . [ "ruby.rb" auto-update-file ])))


(defun insert-today ()
  "Insert today's date into buffer"
  (interactive)
  (insert (format-time-string "%A, %B %e %Y" (current-time))))

(defun auto-update-file ()
  (save-excursion
	;; Replace @@@ with file name
	(while (search-forward "@@@" nil t)
	  (save-restriction
	    (narrow-to-region (match-beginning 0) (match-end 0))
	    (replace-match (file-name-nondirectory buffer-file-name))))))

(define-auto-insert "\.rb" "ruby.rb")

(provide 'beyeran-auto-insert)
#+end_src

* Org-Mode
** generall settings
#+begin_src emacs-lisp :tangle beyeran/beyeran-org.el
;;
;; file: beyeran-org.el
;;

(require 'org)

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

(setq org-log-done t)
(setq org-support-shift-select t)
(setq org-src-fontify-natively t)

(defun org-cycle-global ()
  (interactive)
  (org-cycle t))

(defun org-cycle-local ()
  (interactive)
  (save-excursion
    (move-beginning-of-line nil)
    (org-cycle)))

(setq org-export-with-section-numbers nil)

(provide 'beyeran-org)

#+end_src
** Org Babel
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-babel.el
;;
;; file: beyeran-org-babel.el
;;

;;; fontification ;;;
(setq org-src-fontify-natively t)

;;; org babel ;;;
(require 'ob)
(require 'ob-eval)
(require 'ob-lisp)
(require 'ob-ruby)
(require 'ob-R)
(require 'ob-maxima)

(setq org-src-fontify-natevely t)
(setq org-confirm-babel-evaluate nil)

(setq org-babel-load-languages (quote ((emacs-lisp . t)
				       (dot . t)
				       (ditaa . t)
				       (R . t)
				       (python . t)
				       (ruby . t)
                       (maxima . t)
				       (gnuplot . t)
				       (clojure . t)
				       (sh . t))))
(setq org-confirm-babel-evaluate nil)
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-org-babel.el
(provide 'beyeran-org-babel)
#+end_src

** reftex
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-reftex.el
;;
;; file: beyeran-org-reftex.el
;;

(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name) (file-exists-p (buffer-file-name))
       (progn
	 ;enable auto-revert-mode to update reftex when bibtex file changes on disk
	 (global-auto-revert-mode t)
	 (reftex-parse-all)
	 ;add a custom reftex cite format to insert links
	 (reftex-set-cite-format
	  '((?b . "[[bib:%l][%l-bib]]")
	    (?n . "[[notes:%l][%l-notes]]")
	    (?p . "[[papers:%l][%l-paper]]")
	    (?t . "%t")
	    (?h . "** %t\n:PROPERTIES:\n:Custom_ID:
  %l\n:END:\n[[papers:%l][%l-paper]]")))))

(define-key org-mode-map (kbd "C-c )") 'reftex-citation)
(define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

(add-hook 'org-mode-hook 'org-mode-reftex-setup)

(defun org-mode-reftex-search ()
  ;;jump to the notes for the paper pointed to at from reftex search
  (interactive)
  (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))

(setq org-link-abbrev-alist
      '(("bib" . "~/research/refs.bib::%s")
	("notes" . "~/research/org/notes.org::#%s")
	("papers" . "~/research/papers/%s.pdf")))
#+end_src
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-reftex.el
(provide 'beyeran-org-reftex)
#+end_src
** Org Mode Export Templates
*** Koma
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-export-templates.el
;; #+LaTeX_CLASS: beamer
(unless (boundp 'org-export-latex-classes)
 (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
             '("koma"
               "\\documentclass[a4paper,12pt]{scrartcl}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
*** Beamer
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-export-templates.el
;; Beamer
;; #+LaTeX_CLASS: beamer in org files
(add-to-list 'org-export-latex-classes
	     ;; beamer class, for presentations
	     '("beamer"
	       "\\documentclass[10pt]{beamer}\n
      \\mode<{{{beamermode}}}>\n
      \\usetheme{{{{beamertheme}}}}\n
      \\usecolortheme{{{{beamercolortheme}}}}\n
      \\beamertemplateballitem\n
      \\setbeameroption{show notes}
      \\usepackage[utf8]{inputenc}\n
      \\usepackage{hyperref}\n
      \\usepackage{color}
      \\usepackage{listings}
      \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
  frame=single,
  basicstyle=\\small,
  showspaces=false,showstringspaces=false,
  showtabs=false,
  keywordstyle=\\color{blue}\\bfseries,
  commentstyle=\\color{red},
  }\n
      \\usepackage{verbatim}\n
      \\institute{{{{beamerinstitute}}}}\n          
       \\subject{{{{beamersubject}}}}\n"

	       ("\\section{%s}" . "\\section*{%s}")

	       ("\\begin{frame}[fragile]\\frametitle{%s}"
          "\\end{frame}"
          "\\begin{frame}[fragile]\\frametitle{%s}"
          "\\end{frame}")))
#+end_src
#+begin_src emacs-lisp :tangle beyeran/beyeran-org-export-templates.el
(provide 'beyeran-org-export-templates)
#+end_src
** Jekyll
#+begin_src emacs-lisp :tangle beyeran/beyeran-jekyll.el
;;
;; file: beyeran-jekyll.el
;;

(sys-diversification
 (setq *jekyll-path* "~/projects/beyeran/")
 (setq *jekyll-path* "~/Projects/beyeran/"))

(setq org-publish-project-alist
      '(("beyeran-website-jekyll"
        ;; Path to org files
        :base-directory (concat *jekyll-path* "org/")
        :base-extension "org"

        ;; Path to Jekyll project.
        :publishing-directory (concat *jekyll-path* "jekyll/")
        :recursive t
        :publishing-function org-publish-org-to-html
        :headline-levels 4
        :html-extension "html"
        :body-only t ;; Only export section between <body> </body>
        )

        ("beyeran-website-static"
         :base-directory (concat *jekyll-path* "org/")
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf"
         :publishing-directory "~/Projects/beyeran-jekyll/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("beyeran-website" :components ("beyeran-website-jekyll" "beyeran-website-static"))))

(provide 'beyeran-jekyll)
#+end_src
** GTD


#+begin_src emacs-lisp :tangle beyeran/beyeran-gtd.el
;;
;; file: beyeran-gtd.el
;;

(setq calendar-date-style 'iso
      diary-show-holidays-flag nil
      calendar-week-start-day 1
      calendar-mark-diary-entries-flag t)

#+end_src
Most parts of the following configuration I've taken from:
http://doc.norang.ca/org-mode.html

thanks!


The org-data are stored in different categorys:

| Category        | File                       | Explaination                                            |
|-----------------+----------------------------+---------------------------------------------------------|
| general         | todo.org                   | generall todo's                                         |
|                 | systems-theory.org         | generall notes I take on my interest in Systems Theory  |
|                 | website.org                | tasks and notes on my planned website                   |
|                 | finances.org               | keeping track of my finances                            |
|-----------------+----------------------------+---------------------------------------------------------|
| term-paper      | term-paper-risk.org        | several notes and tasks on term papers I have to write  |
|                 | term-paper-game-theory.org | over this summer. They are labled by the name of the    |
|                 | term-paper-qa.org          | course.                                                 |
|-----------------+----------------------------+---------------------------------------------------------|
| revision        | statistics-revision.org    | notes and tasks I took to revise my statistics knowlege |
|-----------------+----------------------------+---------------------------------------------------------|
| university-work | motifs-research.org        | planning and organizing my research on Motifs           |
|                 | hiwi-soz.org               | tasks related to my job in the sociology department     |
|-----------------+----------------------------+---------------------------------------------------------|

Every category has a subfolder on my computer. The files itself are
named as described in the table column. E.g.: "general/todo.org"

#+begin_src emacs-lisp :tangle beyeran/beyeran-gtd.el

;; general gtd path
(setq org-directory
      (sys-diversification (expand-file-name "~/projects/gtd")
                           (expand-file-name "~/Projects/gtd")))

;; paths as described:
(setq *gtd-paths* '(("general" ("todo.org"
                                "systems-theory.org"
                                "website.org"
                                "finances.org"))
                    ("term-paper" ("term-paper-risk.org"
                                   "term-paper-game-theory.org"
                                   "term-paper-qa.org"))
                    ("revision" ("statistics-revision.org"))
                    ("university-work" ("motifs-research.org"
                                        "hiwi-soz.org"))))

;; functions to make paths available
(defun append-folder-with-files (folder-file-structure)
  "Appends one folder with it's containing files. FOLDER-FILE-STRUCTURE
is the folder's name which contains the files to associate"
  (mapcar #'(lambda (entry) (format "%s/%s/%s" org-directory (first folder-file-structure) entry))
          (first (rest folder-file-structure))))

(defun append-folders (path-structure)
  "Generates a list of path names from a PATH-STRUCTURE. See *gtd-paths* 
for the structure"
  (flatten (mapcar #'append-folder-with-files path-structure)))

;; setting structure to agenda list
(setq org-agenda-files (append-folders *gtd-paths*))
;; added refill
;;(setq org-agenda-files (append org-agenda-files
;;                               (list (format "%s%s" org-directory "refill.org"))))

;; key settings (testing)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c b") 'org-iswitchb)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-M-r") 'org-capture)
(global-set-key (kbd "C-c r") 'org-capture)

(global-set-key (kbd "C-M-h") 'bh/hide-other)
(global-set-key (kbd "C-M-c") 'org-cycle-agenda-files)

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

;; todo customization
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

(setq org-todo-keyword-faces
      '(("TODO" :foreground "red" :weight bold)
        ("NEXT" :foreground "blue" :weight bold)
        ("DONE" :foreground "forest green" :weight bold)
        ("WAITING" :foreground "orange" :weight bold)
        ("HOLD" :foreground "magenta" :weight bold)
        ("CANCELLED" :foreground "forest green" :weight bold)))

(setq org-todo-state-tags-triggers
      '(("CANCELLED" ("CANCELLED" . t))
        ("WAITING" ("WAITING" . t))
        ("HOLD" ("WAITING") ("HOLD"))
        (done ("WAITING") ("CANCELLED") ("HOLD"))
        ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
        ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
        ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))))
#+end_src

The following section specifies templates which can be choosen when
assigning tasks. It's organized as follows:

  - a new task (t)
  - a new note (n)
  - a new habit (h)
  - issues to assign (for e.g. bitbucket repos) (i)
  - books to lent (b)
  - papers to read (p)

#+begin_src emacs-lisp :tangle beyeran/beyeran-gtd.el
(setq org-default-notes-file (format "%s%s" org-directory "refill.org"))

(setq org-capture-templates
      '(("t" "todo" entry (file org-default-notes-file)
         "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
        ("n" "note" entry (file org-default-notes-file)
         "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("h" "habit" entry (file org-defalut-notes-file)
         "* NEXT %?\n%U\n%a\nSCHEDULED: %t .+1d/3d\:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
        ("i" "issue" entry (file org-default-notes-file)
         "* TODO %? :ISSUE:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("b" "books" entry (file org-default-notes-file)
         "* TODO %? :BOOK:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("p" "paper" entry (file org-default-notes-file)
         "* TODO %? :PAPER:\n%U\n%a\n" :clock-in t :clock-resume t)))

;; using ido to manage refill.org notes and move them to the files they needet to be in
(setq org-refile-targets '((org-agenda-files :maxlevel . 9)))
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps t)
(setq org-refile-allow-creating-parent-nodes 'confirm)

;; use ido for both buffer and file completion and ido-everywhere
(setq org-completion-use-ido t)
(setq ido-everywere t)
(setq ido-max-directory-size 100000)
(ido-mode 'both)

(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; task treatment
(setq org-use-fast-todo-selection t) ;; C-c C-t KEY -> defined in org-todo-keywords

(provide 'beyeran-gtd)
#+end_src

* Statistics
#+begin_src emacs-lisp :tangle beyeran/beyeran-ess.el
;;
;; file: beyeran-ess.el
;;

(require 'ess-site)

(provide 'beyeran-ess)
#+end_src
* Programming Languages
** Haskell 
#+begin_src emacs-lisp :tangle beyeran/beyeran-haskell-mode.el
(add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))

;;;; Variables ;;;;
(setq haskell-program-name "ghci"
      haskell-font-lock-symbols t)

(custom-set-variables '(indent-tabs-mode nil))

(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)


;;;; Hooks and Keys ;;;;
(setq haskell-hoogle-command "hoogle")

(defun add-haskell-hooks ()
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-font-lock)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-decl-scan)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  (add-hook 'haskell-mode-hook 
	    (lambda ()
	      (define-keys haskell-mode-map
		'(("RET" newline)
		  ("TAB" haskell-indent-cycle)
		  ("C-c =" haskell-indent-insert-equal)
		  ("C-c |" haskell-indent-insert-guard)
		  ("C-c o" haskell-indent-insert-otherwise)
		  ("C-c w" haskell-indent-insert-where)
		  ("C-c ." haskell-indent-align-guards-and-rhs)
		  ("C-c i" inferior-haskell-info)))))
  (add-hook 'inferior-haskell-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-c h") 'haskell-hoogle)
	      (turn-on-haskell-doc-mode 1))))


;;;; Requirements ;;;;
(when (and (require 'haskell-mode "haskell-mode" t)
	   (require 'inf-haskell "inf-haskell" t)
       (require 'haskell-indent "haskell-indent" t))
  (add-haskell-hooks))

(provide 'beyeran-haskell-mode)
#+end_src

** Ruby
#+begin_src emacs-lisp :tangle beyeran/beyeran-ruby-mode.el
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)

(require 'inf-ruby)

(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))

(autoload 'run-ruby "inf-ruby" "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")

(add-hook 'ruby-mode-hook
  '(lambda () (inf-ruby-keys)))
#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-ruby-mode.el
(provide 'beyeran-ruby-mode)
#+end_src
** Clojure
#+begin_src emacs-lisp :tangle beyeran/beyeran-clojure-mode.el
(setq clojure-src-root (expand-file-name "~/.emacs.d/extensions"))

(autoload 'clojure-mode "clojure-mode" t)
(autoload 'clojure-test-mode "clojure-test-mode" nil t)

(progn
  (autoload 'swank-clojure-init "swank-clojure")
  (autoload 'swank-clojure-slime-mode-hook "swank-clojure")
  (autoload 'swank-clojure-cmd "swank-clojure")
  (autoload 'swank-clojure-project "swank-clojure"))

;; Java starves programs by default
(setq swank-clojure-extra-vm-args (list "-Xmx1024m"))

(add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))

(provide 'beyeran-clojure-mode)
#+end_src

** Prolog
#+begin_src emacs-lisp :tangle beyeran/beyeran-prolog-mode.el
(autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs." t)

(setq prolog-system 'swi)
(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
                                ("\\.m$" . mercury-mode))
                                 auto-mode-alist))

(setq prolog-program-name "/usr/bin/gprolog")

(provide 'beyeran-prolog-mode)
#+end_src
** Shen
#+begin_src emacs-lisp :tangle beyeran/beyeran-shen-mode.el
(require 'shen-mode)
(require 'inf-shen)

(add-to-list 'auto-mode-alist '("\\.shen$" . shen-mode))

(setq inferior-shen-program "/usr/bin/shen")

(provide 'beyeran-shen-mode)
#+end_src
** Scheme
#+begin_src emacs-lisp :tangle beyeran/beyeran-scheme-mode.el
(require 'quack)
(add-to-list 'auto-mode-alist '("\\.scm$" . scheme-mode))

(setq scheme-program-name "guile")

(add-to-list 'Info-default-directory-list (concat extensions-dir "scheme/info/"))

(add-hook 'scheme-mode-hook
          (lambda ()
            (define-key scheme-mode-map [f1]
              '(lambda ()
                 (interactive)
                 (ignore-errors
                   (let ((symbol (thing-at-point 'symbol)))
                        (info "(r5rs)")
                        (Info-index symbol)))))))

(provide 'beyeran-scheme-mode)
#+end_src
** Python
#+begin_src emacs-lisp :tangle beyeran/beyeran-python-mode.el
(add-to-list 'interpreter-mode-alist '("/usr/bin/python2" . python-mode))

(provide 'beyeran-python-mode)
#+end_src

** Scss
#+begin_src emacs-lisp :tangle beyeran/beyeran-scss-mode.el
(require 'scss-mode)

(sys-diversification
 ()
 (setq scss-sass-command "~/.rvm/gems/ruby-1.9.3-p0/bin/sass"))

(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
(add-to-list 'auto-mode-alist '("\\.sass\\'" . scss-mode))

(provide 'beyeran-scss-mode)
#+end_src
** Coffee-Script

#+begin_src emacs-lisp :tangle beyeran/beyeran-coffee-mode.el
(require 'coffee-mode)

(add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
(add-to-list 'auto-mode-alist '("Cakefile" . coffee-mode))

(defun coffee-custon ()
  "coffee-mode-hook"
  (set (make-local-variable 'tab-width) 2))

(add-hook 'coffee-mode-hook
  '(lambda () (coffee-custom)))

(provide 'beyeran-coffee-mode)
#+end_src
** Erlang
#+begin_src emacs-lisp :tangle beyeran/beyeran-erlang-mode.el
(setq load-path (cons "/usr/lib/erlang/lib/tools-2.6.7/emacs/" load-path))

(setq erlang-root-dir "/usr/lib/erlang/")

(setq exec-path (cons "/usr/bin/" exec-path))

(require 'erlang-start)


(provide 'beyeran-erlang-mode)
#+end_src
** Slime
  I've installed quicklisp and in one documentation for it I've found
  this "slime helper" which works quite fine. There will be some
  additions for Scheme and Clojure development.

  ;;;;;;;; slime helper (from quicklisp)
  (load (expand-file-name "~/.config/quicklisp/slime-helper.el"))
  ;; (setq inferior-lisp-program "/Applications/CCL/dx86cl64")
  ;; (setq inferior-lisp-program "/Applications/AllegroCL/alisp")
  (setq inferior-lisp-program "/usr/bin/ccl")

#+begin_src emacs-lisp :tangle beyeran/beyeran-slime.el
(sys-diversification
 ()
 (load (expand-file-name "~/.quicklisp/slime-helper.el")))

(require 'slime "slime" t)

(slime-setup '(slime-fancy slime-asdf slime-references slime-indentation))

(setq slime-enable-evaluate-in-emacs t slime-net-coding-system 'utf-8-unix)

(add-hook 'slime-mode-hook
          (lambda ()
            (define-keys slime-mode-map
                '(("C-c s" slime-selector)
                  ("C-j" newline-and-indent)
                  ("TAB" slime-indent-and-complete-symbol)
                  ("C-c C-d c" cltl2-lookup)))))

(add-hook 'slime-repl-mode-hook
          (lambda ()
            (define-keys slime-repl-mode-map
                '(("C-c s" slime-selector)
                  ("C-c C-d c" cltl2-lookup)))))

(defun clojure-slime-config ()
  (require 'slime-autoloads)
  
  (slime-setup '(slime-fancy))

  (setq swank-clojure-classpath
        (list
         (concat clojure-src-root "/clojure/clojure.jar")
         (concat clojure-src-root "/clojure-contrib/target/clojure-contrib-1.2.0-SNAPSHOT.jar")
         (concat clojure-src-root "/swank-clojure/src")
         (concat clojure-src-root "/clojure/test/clojure/test_clojure")))

  (eval-after-load 'slime
    '(progn (require 'swank-clojure)
            (setq slime-lisp-implementations
                  (cons `(clojure ,(swank-clojure-cmd) :init
                                  swank-clojure-init)
                        (remove-if #'(lambda (x) (eq (car x) 'clojure))
                                   slime-lisp-implementations))))))

;; http://groups.google.com/group/clojure/browse_thread/thread/e70ac373b47d7088 
(add-to-list 'slime-lisp-implementations
             '(sbcl ("/usr/bin/sbcl"))
             '(ccl ("/Applications/CCL/dx86cl")))


(defun pre-slime-clj (&optional clj-p)
  "Stuff to do before SLIME runs" 
  (unless (eq clj-p nil)
    (clojure-slime-config))
  (slime-setup '(slime-fancy)))


(defun run-clojure () 
  "Starts clojure in Slime" 
  (interactive)
  (pre-slime-clj t)
  (slime 'clojure))

(defun run-lisp () 
  "Starts SBCL in Slime" 
  (interactive) 
  (pre-slime-clj)
  (sys-diversification
   (slime 'sbcl)
   (slime 'ccl)))

#+end_src

#+begin_src emacs-lisp :tangle beyeran/beyeran-slime.el
(provide 'beyeran-slime)
#+end_src
** Maxima
#+begin_src emacs-lisp :tangle beyeran/beyeran-maxima.el
(autoload 'imaxima "imaxima" "maxima frontend" t)
(autoload 'imath "imath" "interactive math mode" t)

(provide 'beyeran-maxima)
#+end_src
