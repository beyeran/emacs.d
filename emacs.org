#+NAME: Emacs Config
#+AUTHOR: André Pascal Beyer
#+EMAIL: beyeran@gmail.com

Before the whole configuration a few notes for Windows must be said. Gnutils32 must be
installed and all *.dll from the =bin= directory must be copied into the =bin= directory
of Emacs. E.g.:

#+BEGIN_SRC sh
  cp c:/gnutils/bin/*.dll c:/emacs/bin/
#+END_SRC

  - libpng!

* Initializing

  I finally gave up: after diverse packages (e.g. epl, el-get) did not do the trick,
  I now use =package=.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (package-initialize)
#+END_SRC

  Loading needed packages - mostly stolen from:
  http://y.tsutsumi.io/emacs-from-scratch-part-2-package-management.html

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq required-packages
    '(magit paredit ess helm elixir-mode web-mode lua-mode swiper powerline alchemist
            badwolf-theme helm-company use-package org-beautify-theme
            org-bullets cask))

  (require 'cl)

  (defun packages-installed-p ()
    (loop for p in required-packages
          when (not (package-installed-p p)) do (return nil)
          finally (return t)))

  (unless (packages-installed-p)
    ;; check for new package versions
    (message "%s" "Emacs is now refresing its package database...")
    (package-refresh-contents)
    (message " done.")
    ;; install missing packages
    (dolist (p required-packages)
      (when (not (package-installed-p p))
        (package-install p))))

  (require 'use-package)

  (mapc #'load (directory-files "~/.emacs.d/src/" t "\\.el$"))
#+END_SRC

* Packages
** Usability
*** Helm and swipe:

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (use-package helm-config
    :init
    ;; settings
    (setq helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t
          helm-ff-search-library-in-sexp t
          helm-scroll-amount t
          helm-ff-file-name-history-use-recentf t)
    ;; use it
    (ido-mode 0)
    (helm-mode 1))

  (use-package helm)

  (use-package swiper)

  ;; Keys
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c i") 'fill-region)

#+END_SRC

*** Fringe Mode

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  ;; A small minor mode to use a big fringe
  (defvar bzg-big-fringe-mode nil)

  (define-minor-mode bzg-big-fringe-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable bzg-big-fringe-mode
    :group 'editing-basics
    (if (not bzg-big-fringe-mode)
        (set-fringe-style nil)
      (set-fringe-mode
       (/ (- (frame-pixel-width)
             (* 100 (frame-char-width)))
          2))))

  ;; Now activate this global minor mode
  (global-set-key (kbd "<f12>") 'bzg-big-fringe-mode)
#+END_SRC

** Org
   
   Different programming/scripting languages for org babel.

#+BEGIN_SRC emacs-lisp :tangle src/custom-org.el
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (R . t)
     (lisp . t)
     (scheme . t)
     (ruby . t)
     (R . t)
     (python . t)))

  ;; ess
  (use-package ess
    :init
    (autoload 'R-mode "ess-site.el" "ESS" t)
    (add-to-list 'auto-mode-alist '("\\.R$" . R-mode)))


  ;; enable selecting
  (setq org-support-shift-select t)
#+END_SRC
* Programming Languages
** Elixir
   Elixir is a language based on erlang with more or less Ruby syntax. I like it
   very much. It has two extensions - the "normal" =elixir-mode= and a extention
   for it's project management =alchemist=.

#+BEGIN_SRC emacs-lisp :tangle src/elixir.el
  (use-package elixir-mode)
  (use-package alchemist)
#+END_SRC
* Looks
** Color Theme

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (load-theme 'badwolf)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (set-face-attribute 'default nil :font "Anonymous Pro-11")
#+END_SRC

** UI
#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  ;; encoding
  (prefer-coding-system 'utf-8-emacs-unix)
  (setq set-buffer-file-coding-system 'utf-8-emacs-unix)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)

  ;; mighty 80 char rule!
  (setq-default fill-column 80)

  (use-package power-line
    :init (powerline-default-theme))

  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (use-package org-beautify-theme)
  (use-package org-bullets-mode
    :init (org-bullets-mode))

#+END_SRC
