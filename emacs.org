#+NAME: Emacs Config
#+AUTHOR: André Pascal Beyer
#+EMAIL: beyeran@gmail.com

Before the whole configuration a few notes for Windows must be said. Gnutils32 must be
installed and all *.dll from the =bin= directory must be copied into the =bin= directory
of Emacs. E.g.:

#+BEGIN_SRC sh
  cp c:/gnutils/bin/*.dll c:/emacs/bin/
#+END_SRC

  - libpng!

* Initializing

  I finally gave up: after diverse packages (e.g. epl, el-get) did not do the trick,
  I now use =package=.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (package-initialize)
#+END_SRC

  Loading needed packages - mostly stolen from:
  http://y.tsutsumi.io/emacs-from-scratch-part-2-package-management.html

#+BEGIN_SRC emacs-lisp :tangle init.el
  (defvar required-packages
    '(;; usability
      magit
      swiper
      powerline
      helm
      helm-company
      smartparens
      cask
      use-package
      projectile
      textmate
      multiple-cursors
      ;; programming modes
      elixir-mode
      alchemist
      web-mode
      lua-mode
      ess
      go-mode
      ;; eyecandy
      badwolf-theme
      org-beautify-theme
      org-bullets))

  (require 'cl)

  (defun packages-installed-p ()
    (loop for p in required-packages
          when (not (package-installed-p p)) do (return nil)
          finally (return t)))

  (unless (packages-installed-p)
    ;; check for new package versions
    (message "%s" "Emacs is now refresing its package database...")
    (package-refresh-contents)
    (message " done.")
    ;; install missing packages
    (dolist (p required-packages)
      (when (not (package-installed-p p))
        (package-install p))))

  (require 'use-package)

  (mapc #'load (directory-files "~/.emacs.d/src/" t "\\.el$"))

  (setq package-enable-at-startup nil)
  (package-initialize)
#+END_SRC

* Packages
** Usability
*** Helm and swipe:

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  (require 'helm-config)
  (require 'helm-ag)
  (require 'helm-projectile)

  (define-key helm-command-map (kbd "o") 'helm-occur)
  (define-key helm-command-map (kbd "g") 'helm-do-grep)
  (define-key helm-command-map (kbd "SPC") 'helm-all-mark-rings)
  (define-key helm-map (kbd "M-k") 'helm-next-line)
  (define-key helm-map (kbd "M-i") 'helm-previous-line)
  (define-key helm-map (kbd "M-v") 'yank)
  (define-key helm-find-files-map (kbd "M-k") 'helm-next-line)
  (define-key helm-find-files-map (kbd "M-i") 'helm-previous-line)
  (define-key helm-find-files-map (kbd "M-v") 'yank)
  ;; rebind tab to run persistent action
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  ;; make TAB works in terminal
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)

  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

  (setq helm-split-window-in-side-p           t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t
        helm-ag-fuzzy-match                   t)

  (substitute-key-definition 'find-tag 'helm-etags-select global-map)
  (setq projectile-completion-system 'helm)
  (helm-descbinds-mode)
  (helm-mode 1)

  (require 'helm-files)
  (setq helm-idle-delay 0.1)
  (setq helm-input-idle-delay 0.1)
  (define-key global-map (kbd "C-x b") 'helm-for-files)
  (define-key global-map (kbd "C-x C-f") 'helm-find-files)

  ;; Turn on helm-projectile key bindings
  (helm-projectile-on)

  ;; Display helm buffers always at the bottom
  ;; Source: http://www.lunaryorn.com/2015/04/29/the-power-of-display-buffer-alist.html
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*helm" (* not-newline) "*" eos)
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (reusable-frames . visible)
                 (side            . bottom)
                 (window-height   . 0.4)))

  (use-package swiper
    :init
    (global-set-key "\C-s" 'swiper))

  ;; Keys
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c i") 'fill-region)
#+END_SRC

*** Fringe Mode

#+BEGIN_SRC emacs-lisp :tangle src/usability.el
  ;; A small minor mode to use a big fringe
  (defvar bzg-big-fringe-mode nil)

  (define-minor-mode bzg-big-fringe-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable bzg-big-fringe-mode
    :group 'editing-basics
    (if (not bzg-big-fringe-mode)
        (set-fringe-style nil)
      (set-fringe-mode
       (/ (- (frame-pixel-width)
             (* 100 (frame-char-width)))
          2))))

  ;; Now activate this global minor mode
  (global-set-key (kbd "<f12>") 'bzg-big-fringe-mode)
#+END_SRC

** Org
   
   Different programming/scripting languages for org babel.

#+BEGIN_SRC emacs-lisp :tangle src/custom-org.el
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (R . t)
     (lisp . t)
     (scheme . t)
     (ruby . t)
     (R . t)
     (python . t)))

  ;; ess
  (use-package ess
    :init
    (autoload 'R-mode "ess-site.el" "ESS" t)
    (add-to-list 'auto-mode-alist '("\\.R$" . R-mode)))


  ;; enable selecting
  (setq org-support-shift-select t)
#+END_SRC
* Programming Languages
** Elixir
   Elixir is a language based on erlang with more or less Ruby syntax. I like it
   very much. It has two extensions - the "normal" =elixir-mode= and a extention
   for it's project management =alchemist=.

#+BEGIN_SRC emacs-lisp :tangle src/elixir.el
  (defun apb-elixir-mode-hook ()
    (smartparens-mode +1))

  (use-package elixir-mode
    :init
    (add-hook 'elixir-mode-hook 'apb-elixir-mode-hook))

  (use-package alchemist)
#+END_SRC

** Go
   Since Google more and more requires knowledge in =Go= I thought I could give
   it a try.

#+BEGIN_SRC emacs-lisp src/go.el
  (use-package go-mode-load)
  (use-package go-mode)
#+END_SRC
* Looks
** Color Theme

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  ;; (load-theme 'org-beautify-theme)
  (load-theme 'badwolf)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  (set-face-attribute 'default nil :font "Anonymous Pro-11")
#+END_SRC

** UI
#+BEGIN_SRC emacs-lisp :tangle src/looks.el
  ;; encoding
  (prefer-coding-system 'utf-8-emacs-unix)
  (setq set-buffer-file-coding-system 'utf-8-emacs-unix)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)

  ;; mighty 80 char rule!
  (setq-default fill-column 80)

  (use-package power-line
    :init (powerline-default-theme))

  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (use-package org-bullets-mode
    :init (org-bullets-mode))

#+END_SRC
