#+TITLE:  Org Configuration File
#+AUTHOR: André P. Beyer
#+EMAIL:  mail@beyeran.site

* Exporting Behaviour
** Latex

   #+BEGIN_SRC elisp
     (setq org-latex-pdf-process '("xelatex -shell-escape %f"))

     (when (eq system-type 'darwin)
       (setq org-latex-pdf-process '("/Library/TeX/texbin/xelatex -quiet -shell-escape %f")))

     (setq org-latex-listings 'minted) 
   #+END_SRC

** Latex Export Template

   #+BEGIN_SRC elisp
     (with-eval-after-load 'ox-latex
       (add-to-list 'org-latex-classes
                    '("basic"
                      "\\documentclass[a4paper]{scrartcl}

     \\usepackage{mathtools} % Math Package
     \\usepackage{minted} % Source Code Higlighting
     \\usepackage{hyperref} % Links

     \\usepackage{fontspec}
     \\setmainfont{Adobe Garamond Pro}
     \\setsansfont{Adobe Caslon Pro}
     \\setmonofont{FiraCode Nerd Font Mono}
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  
       (add-to-list 'org-latex-classes
                    '("article"
                      "% -------------------
     % Packages
     % -------------------
     \\documentclass[11pt,a4paper]{article}
     \\usepackage[utf8x]{inputenc}
     \\usepackage[T1]{fontenc}
     \\usepackage{mathptmx} % Use Times Font


     \\usepackage[pdftex]{graphicx} % Required for including pictures
     \\usepackage[german]{babel}
     \\usepackage[pdftex,linkcolor=black,pdfborder={0 0 0}]{hyperref} % Format links for pdf
     \\usepackage{calc} % To reset the counter in the document after title page
     \\usepackage{enumitem} % Includes lists

     \\frenchspacing % No double spacing between sentences
     \\linespread{1.2} % Set linespace
     \\usepackage[a4paper, lmargin=0.1666\\paperwidth, rmargin=0.1666\\paperwidth, tmargin=0.1111\\paperheight, bmargin=0.1111\\paperheight]{geometry} %margins

     \\usepackage[all]{nowidow} % Tries to remove widows
     \\usepackage[protrusion=true,expansion=true]{microtype} % Improves typography, load after fontpackage is selected
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

       (add-to-list 'org-latex-classes
                    '("exercise"
                      "\\documentclass[english]{article}
     \\usepackage[T1]{fontenc}
     \\usepackage[utf8]{inputenc}
     \\usepackage{geometry}
     \\geometry{verbose,tmargin=1cm,bmargin=2cm,lmargin=1cm,rmargin=1cm}
     \\setlength{\\parindent}{0bp}
     \\usepackage{amsmath}
     \\usepackage{amssymb}
     \\PassOptionsToPackage{normalem}{ulem}
     \\usepackage{ulem}
     \\usepackage{amsthm}
     \\usepackage{polynom}
     \\usepackage{mathtools}
     \\newcommand{\\rowoperation}[1]{\\xrightarrow{{#1}}}
     \\renewcommand\\qedsymbol{$\\blacksquare$}
     \\addto\\captionsgerman{\\renewcommand\\proofname{}}

     \\newtheoremstyle{hagenex}{\\topsep}{3pt}{\\normalfont}{0pt}{\\itshape}{ }{ }{\\thmnote{#3. }\\thmname{#1}:}
     \\theoremstyle{hagenex}
     \\newtheorem{toshow}{Zu zeigen}
     \\newtheorem{case}{Fall}
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
   #+END_SRC

** Blog

   I'd really wanted to use a native org-mode blog engine. There are
   several, I know, but none of theme seems to have nice themes for
   exporting. I'm not a designer. I want something done and just write
   my text in org-mode. I haven't found a solution to this. Since Hugo
   has nice themes and seems to be very widepsread, I've used that.

   #+begin_src elisp
     (use-package ox-hugo
       :ensure t
       :after ox)
   #+end_src

* Literate Programming

** General Babel And Loading

   Even though I'm very sparingly commenting, I like the idea.

   #+BEGIN_SRC elisp
     (use-package org
       :config
       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((shell      . t)
                                      (java       . t)
                                      (ditaa      . t)
                                      (emacs-lisp . t)
                                      (plantuml   . t)
                                      (dot        . t)
                                      (python     . t))))
   #+END_SRC

* Looks

  Bullets

  #+BEGIN_SRC elisp
    (use-package org-bullets
      :custom
      (org-bullets-bullet-list '("◉" "☯" "○" "☯" "✸" "☯" "✿" "☯" "✜" "☯" "◆" "☯" "▶"))
      (org-ellipsis "⤵")
      :hook (org-mode . org-bullets-mode))
  #+END_SRC

  Hiding those emphasis markers, like /foo/ or =baz=.

  #+BEGIN_SRC elisp
    (setq org-hide-emphasis-markers t)
  #+END_SRC

  Diverse other eyecandy. After that, you normal =org-file= should look
  more like an actuall word processor. Thanks internet!

  #+BEGIN_SRC elisp
    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                           ("#+END_SRC" . "†")
                                           ("#+begin_src" . "†")
                                           ("#+end_src" . "†")
                                           (">=" . "≥")
                                           ("=>" . "⇨")))
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    (add-hook 'org-mode-hook 'prettify-symbols-mode)

    (when window-system
      (let* ((variable-tuple
              (cond ((x-list-fonts "Adobe Garamond Pro") '(:font "Adobe Garamond Pro"))
                    ((x-list-fonts "Adobe Myriad Pro") '(:font "Adobe Myriad Pro"))
                    ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                    ((x-list-fonts "Verdana")         '(:font "Verdana"))
                    ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                    (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
             (base-font-color     (face-foreground 'default nil 'default))
             (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

        (custom-theme-set-faces
         'user
         `(org-level-8 ((t (,@headline ,@variable-tuple))))
         `(org-level-7 ((t (,@headline ,@variable-tuple))))
         `(org-level-6 ((t (,@headline ,@variable-tuple))))
         `(org-level-5 ((t (,@headline ,@variable-tuple))))
         `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
         `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
         `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
         `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
         `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

      (custom-theme-set-faces
       'user
       '(variable-pitch ((t (:family "Adobe Garamond Pro" :height 180 :weight thin))))
       '(fixed-pitch ((t ( :family "FiraCode Nerd Font Mono" :height 130)))))

      (custom-theme-set-faces
       'user
       '(org-block ((t (:inherit fixed-pitch))))
       '(org-code ((t (:inherit (shadow fixed-pitch)))))
       '(org-document-info ((t (:foreground "dark orange"))))
       '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
       '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
       '(org-link ((t (:foreground "royal blue" :underline t))))
       '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
       '(org-property-value ((t (:inherit fixed-pitch))) t)
       '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
       '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
       '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
       '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

      (add-hook 'org-mode-hook 'variable-pitch-mode))

    (add-hook 'after-change-major-mode-hook
              '(lambda ()
                 (linum-mode (if (equal major-mode 'org-mode)
                                 0
                               1))))
  #+END_SRC

* Closing

  #+BEGIN_SRC elisp
    (provide 'init-org)
  #+END_SRC

#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-org.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
