#+TITLE:  Org Configuration File
#+AUTHOR: André P. Beyer
#+EMAIL:  mail@beyeran.site

* Exporting Behaviour
** Latex

   #+BEGIN_SRC elisp
     (setq org-latex-pdf-process '("xelatex -quiet -shell-escape %f"))
   #+END_SRC

* Literate Programming
** JIRA

   We havily rely on JIRA and the markup is a pain in the ass. I like
   to write =org= files first and them export them to JIRA.

   #+BEGIN_SRC elisp
     (use-package ox-jira
       :ensure t
       :init
       (setq org-export-copy-to-kill-ring 'if-interactive))
   #+END_SRC

   #+BEGIN_SRC elisp
     (defun apb/ox-jira-export-block (export-block contents info)
       "Transcode an EXPORT-BLOCK element from Org to Jira. 

     In this case, the contents of the block should not be altered by the
     rest of the markup. This allows {panel} and other constructs to be
     exported correctly."
       (format "%s" (org-element-property :value export-block)))

     (defun apb/ox-jira-export-as-jira
         (&optional async subtreep visible-only body-only ext-plist)
       "This is just an extention of `ox-jira-export-as-jira' to support
     export-blocks."
       (interactive)
       (org-export-to-buffer 'apb-jira "*Org APB JIRA Export*"
         async subtreep visible-only body-only ext-plist))

     (org-export-define-derived-backend 'apb-jira 'jira
       :translate-alist '((export-block . apb/ox-jira-export-block))
       :menu-entry
       '(?j 1 ((?a "As APB JIRA buffer" apb/ox-jira-export-as-jira))))
   #+END_SRC

** PlantUML

   #+BEGIN_SRC elisp
     (use-package plantuml-mode
       :ensure t
       :init
       (setq org-plantuml-jar-path
           (expand-file-name "~/bin/plantuml.jar")))
   #+END_SRC

** General Babel And Loading
   
   Even though I'm very sparingly commenting, I like the idea.

   #+BEGIN_SRC elisp
     (use-package org
       :config
       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((shell      . t)
                                      (emacs-lisp . t)
                                      (plantuml   . t)
                                      (dot        . t)
                                      (python     . t))))
   #+END_SRC

* Looks
  Bullets

  #+BEGIN_SRC elisp
    (use-package org-bullets
      :ensure t
      :init (add-hook 'org-mode-hook 'org-bullets-mode))
  #+END_SRC

  Hiding those emphasis markers, like /foo/ or =baz=.

  #+BEGIN_SRC elisp
    (setq org-hide-emphasis-markers t)
  #+END_SRC

  Having nicer bullets (since the org-bullet package seems not
  supported anymore:

  #+BEGIN_SRC elisp
    (font-lock-add-keywords 'org-mode
                            '(("^ +\\([-*]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  #+END_SRC

  This is stolen verbatim from [[http://howardism.org/Technical/Emacs/orgmode-wordprocessor.html][http://howardism.org/Technical/Emacs/orgmode-wordprocessor.html]]:

  #+BEGIN_SRC elisp
    (let* ((base-font-color (face-foreground 'default nil 'default))
           (headline        `(:inherit default :weight bold :foreground ,base-font-color)))

      (custom-theme-set-faces 'user
                              `(org-level-8 ((t (,@headline ,@apb/variable-font-tuple))))
                              `(org-level-7 ((t (,@headline ,@apb/variable-font-tuple))))
                              `(org-level-6 ((t (,@headline ,@apb/variable-font-tuple))))
                              `(org-level-5 ((t (,@headline ,@apb/variable-font-tuple))))
                              `(org-level-4 ((t (,@headline ,@apb/variable-font-tuple :height 1.1))))
                              `(org-level-3 ((t (,@headline ,@apb/variable-font-tuple :height 1.25))))
                              `(org-level-2 ((t (,@headline ,@apb/variable-font-tuple :height 1.5))))
                              `(org-level-1 ((t (,@headline ,@apb/variable-font-tuple :height 1.75))))
                              `(org-document-title ((t (,@headline ,@apb/variable-font-tuple :height 1.5 :underline nil))))))
  #+END_SRC

* Closing

  #+BEGIN_SRC elisp
    (provide 'init-org)
  #+END_SRC

#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-org.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
