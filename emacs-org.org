#+TITLE:  Org Configuration File
#+AUTHOR: Andr√© P. Beyer
#+EMAIL:  mail@beyeran.site

* General

  #+BEGIN_SRC elisp
    (defun apb/org-latex-yas ()
      "Activate org and LaTeX yas expansion in org-mode buffers."
      (yas-minor-mode)
      (yas-activate-extra-mode 'latex-mode))

    (add-hook 'org-mode-hook #'apb/org-latex-yas)

    (use-package writegood-mode
      :ensure t
      :after org
      :config
      (custom-theme-set-faces
       'user
       `(writegood-weasels-face ((t (:foreground "#ff0000"))))
       `(writegood-passive-voice-face ((t (:foreground "#ff0000"))))
       `(writegood-duplicates-face ((t (:foreground "#ff0000"))))))
  #+END_SRC

* Roam

  This is just a test to see if it will be useful. More notes on it or
  deletion to come.

  #+BEGIN_SRC elisp
    (defvar *roam-directory* "~/org-roam"
      "Local directory for storing roam related files.")

    (defun apb/org-auto-load-hook ()
      (org-babel-execute-buffer))

    (defun apb/org-roam-insert ()
      "TODO"
      (interactive)
      (let ((description (read-string "Description: ")))
        (org-roam-insert nil nil nil description nil)))

    (defvar *apb/literature-directory* (expand-file-name "literature" *roam-directory*))

    (unless (file-directory-p *apb/literature-directory*)
      (make-directory *apb/literature-directory*))

    (defvar *apb/bibliographic-file* (expand-file-name "bibliography.bib" *apb/literature-directory*))

    (use-package org-roam
      :ensure t
      :straight (:host github :repo "org-roam/org-roam")
      :hook
      ((after-init . org-roam-mode)
       (org-mode . apb/org-auto-load-hook))
      :init
      (when (not (file-directory-p *roam-directory*))
        (make-directory *roam-directory*))
      (on-mac
       (setq org-roam-graph-viewer "/Applications/Firefox.app/Contents/MacOS/firefox"))
      :custom
      (org-roam-directory *roam-directory*)
      (org-startup-with-latex-preview t)
      (org-confirm-babel-evaluate nil)
      :config
      :bind (:map org-roam-mode-map
                  (("C-c n i" . apb/org-roam-insert)
                   ("C-c n t" . org-roam-tag-add)
                   ("C-c n f" . org-roam-find-file)
                   ("C-c n b" . org-roam-switch-to-buffer))
                  :map org-mode-map
                  (("C-c n i" . org-roam-insert))))

    (use-package org-ref
      :after (org org-roam)
      :ensure t
      :config
      (setq org-ref-completion-library 'org-ref-helm-cite
            org-ref-default-bibliography (list *apb/bibliographic-file*)
            bibtex-completion-bibliography *apb/bibliographic-file*
            org-ref-note-title-format (concat "* NOTES %y - %t\n "
                                              ":PROPERTIES:\n  "
                                              ":Custom_ID: %k\n  "
                                              ":NOTER_DOCUMENT: %F\n "
                                              ":ROAM_KEY: cite:%k\n  "
                                              ":AUTHOR: %9a\n  "
                                              ":JOURNAL: %j\n  "
                                              ":YEAR: %y\n  "
                                              ":VOLUME: %v\n  "
                                              ":PAGES: %p\n  "
                                              ":DOI: %D\n  "
                                              ":URL: %U\n "
                                              ":END:\n\n")
            org-ref-notes-directory *apb/literature-directory*
            org-ref-notes-function 'orb-edit-notes))

    (use-package org-roam-bibtex
      :after (org org-roam)
      :straight (:host github :repo "org-roam/org-roam-bibtex")
      :hook (org-roam-mode . org-roam-bibtex-mode)
      :bind (("C-c n a" . orb-note-actions))
      :config
      (setq orb-preformat-keywords '("=key=" "title" "url" "file" "author-or-editor" "keywords")
            orb-templates '(("r" "ref" plain (function org-roam-capture--get-point) ""
                             :file-name "literature/${slug}"
                             :head "#+TITLE: ${=key=}: ${title}
    ,#+ROAM_KEY: ${ref}

    - tags ::
    - keywords :: ${keywords}

    ,* ${title}
      :PROPERTIES:
      :Custom_ID: ${=key=}
      :AUTHOR: ${author-or-editor}
      :END:

    "
                             :unnarrowed t))))

    (use-package company-org-roam
      :ensure t
      :after (org org-roam)
      :straight (:host github :repo "org-roam/company-org-roam")
      :config
      (push 'company-org-roam company-backends)
      (setq org-roam-completion-everywhere t)
      :bind (("C-n" . company-select-next)
             ("C-t" . company-select-previous)))

    (use-package deft
      :ensure t
      :after (org org-roam)
      :bind ("C-c n d" . deft)
      :custom
      (deft-recursive t)
      (deft-use-filter-string-for-filename t)
      (deft-default-extension)
      (deft-directory *roam-directory*))

    (use-package org-roam-server
      :ensure t
      :after (org org-roam)
      :config
      (setq org-roam-server-host "127.0.0.1"
            org-roam-server-port 8080
            org-roam-server-authenticate nil
            org-roam-server-export-inline-images t
            org-roam-server-files nil
            org-roam-server-served-file-extensions '("pdf")
            org-roam-server-network-poll t
            org-roam-server-network-arrows nil
            org-roam-server-network-label-truncate t
            org-roam-server-network-label-truncate-lenght 60
            org-roam-server-network-label-wram-length 20))

    ;; Since I'm starting to accumulate many math notes, I want them rendered immedietyl while opening
    ;; `org-roam'.
    (defun apb/render-latex ()
      """Renders LaTeX in buffer."""
      (org-toggle-latex-fragment))

    ;; (add-function :after (org-roam-buffer--get-create) #'apb/render-latex)
  #+END_SRC

* Exporting Behaviour
** Latex

   #+BEGIN_SRC elisp
     (setq org-latex-pdf-process '("xelatex -shell-escape %f"))

     (when (eq system-type 'darwin)
       (setq org-latex-pdf-process '("/Library/TeX/texbin/xelatex -quiet -shell-escape %f")))

     (setq org-latex-listings 'minted)
   #+END_SRC

   Please see the `form` =latex-mode= snippet to understand more of the
   workflow:

   #+BEGIN_SRC elisp
     (defun apb/org-mode-hook ()
       (setq-local yas-buffer-local-condition
                   '(not (org-in-src-block-p t))))

     (eval-after-load 'org
       (progn
         (add-hook 'org-mode-hook #'apb/org-mode-hook)
         (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images)))
   #+END_SRC

** Latex Export Template

   #+BEGIN_SRC elisp
     (with-eval-after-load 'ox-latex
       (add-to-list 'org-latex-classes
                    '("basic"
                      "\\documentclass[a4paper]{scrartcl}

     \\usepackage{mathtools} % Math Package
     \\usepackage{minted} % Source Code Higlighting
     \\usepackage{hyperref} % Links

     \\usepackage{fontspec}
     \\setmainfont{Adobe Garamond Pro}
     \\setsansfont{Adobe Caslon Pro}
     \\setmonofont{FiraCode Nerd Font Mono}
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

       (add-to-list 'org-latex-classes
                    '("article"
                      "% -------------------
     % Packages
     % -------------------
     \\documentclass[11pt,a4paper]{article}
     \\usepackage[utf8x]{inputenc}
     \\usepackage[T1]{fontenc}
     \\usepackage{mathptmx} % Use Times Font


     \\usepackage[pdftex]{graphicx} % Required for including pictures
     \\usepackage[german]{babel}
     \\usepackage[pdftex,linkcolor=black,pdfborder={0 0 0}]{hyperref} % Format links for pdf
     \\usepackage{calc} % To reset the counter in the document after title page
     \\usepackage{enumitem} % Includes lists

     \\frenchspacing % No double spacing between sentences
     \\linespread{1.2} % Set linespace
     \\usepackage[a4paper, lmargin=0.1666\\paperwidth, rmargin=0.1666\\paperwidth, tmargin=0.1111\\paperheight, bmargin=0.1111\\paperheight]{geometry} %margins

     \\usepackage[all]{nowidow} % Tries to remove widows
     \\usepackage[protrusion=true,expansion=true]{microtype} % Improves typography, load after fontpackage is selected
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

       (add-to-list 'org-latex-classes
                    '("exercise"
                      "\\documentclass[german]{article}
     \\usepackage[T1]{fontenc}
     \\usepackage[utf8]{inputenc}
     \\usepackage{geometry}
     \\geometry{verbose,tmargin=1cm,bmargin=2cm,lmargin=1cm,rmargin=1cm}
     \\setlength{\\parindent}{0bp}
     \\usepackage{amsmath}
     \\usepackage{amssymb}
     \\PassOptionsToPackage{normalem}{ulem}
     \\usepackage{ulem}
     \\usepackage{amsthm}
     \\usepackage{polynom}
     \\usepackage{mathtools}
     \\renewcommand\\qedsymbol{$\\blacksquare$}

     \\newtheoremstyle{hagenex}{\\topsep}{3pt}{\\normalfont}{0pt}{\\itshape}{ }{ }{\\thmnote{#3. }\\thmname{#1}:}
     \\theoremstyle{hagenex}
     \\newtheorem{toshow}{Zu zeigen}
     \\newtheorem{case}{Fall}
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
   #+END_SRC

** Blog

   I'd really wanted to use a native org-mode blog engine. There are
   several, I know, but none of theme seems to have nice themes for
   exporting. I'm not a designer. I want something done and just write
   my text in org-mode. I haven't found a solution to this. Since Hugo
   has nice themes and seems to be very widepsread, I've used that.

   #+begin_src elisp
     (use-package ox-hugo
       :ensure t
       :after ox)
   #+end_src

* Literate Programming
** General Babel And Loading

   Even though I'm very sparingly commenting, I like the idea.

   #+BEGIN_SRC elisp
     (use-package ox-pandoc
       :ensure t
       :config
       ;; default options for all output formats
       (setq org-pandoc-options '((standalone . t)))
       ;; cancel above settings only for 'docx' format
       (setq org-pandoc-options-for-docx '((standalone . nil)))
       ;; special settings for beamer-pdf and latex-pdf exporters
       (setq org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
       (setq org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex")))
       ;; special extensions for markdown_github output
       (setq org-pandoc-format-extensions '(markdown_github+pipe_tables+raw_html)))

     (use-package org
       :config
       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((shell      . t)
                                      (java       . t)
                                      (latex      . t)
                                      (ditaa      . t)
                                      (emacs-lisp . t)
                                      (plantuml   . t)
                                      (dot        . t)
                                      (python     . t))))
   #+END_SRC

* Looks

  Bullets

  #+BEGIN_SRC elisp
    (use-package org-bullets
      :ensure t
      :custom
      (org-bullets-bullet-list '("‚óâ" "‚òØ" "‚óã" "‚òØ" "‚ú∏" "‚òØ" "‚úø" "‚òØ" "‚úú" "‚òØ" "‚óÜ" "‚òØ" "‚ñ∂"))
      (org-ellipsis "‚§µ")
      :hook (org-mode . org-bullets-mode))
  #+END_SRC

  Hiding those emphasis markers, like /foo/ or =baz=.

  #+BEGIN_SRC elisp

  #+END_SRC

  For viewing files with LaTeX natively hide the blocks and display
  everything when opening. More or less required to have a "native"
  text document feel when using =org-roam=:

  #+BEGIN_SRC elisp
    (add-hook 'org-mode-hook 'org-hide-block-toggle-all)

    (use-package org-fragtog
      :ensure t
      :after org
      :custom
      (org-format-latex-options (plist-put org-format-latex-options :scale 1.2))
      :init
      (add-hook 'org-mode-hook 'org-fragtog-mode))
  #+END_SRC

  Diverse other eyecandy. After that, you normal =org-file= should look
  more like an actuall word processor. Thanks internet!

  #+BEGIN_SRC elisp
    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "‚Ä†")
                                           ("#+END_SRC" . "‚Ä†")
                                           ("#+begin_src" . "‚Ä†")
                                           ("#+end_src" . "‚Ä†")
                                           (">=" . "‚â•")
                                           ("=>" . "‚á®")))
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    (add-hook 'org-mode-hook 'prettify-symbols-mode)

    (when window-system
      (let* ((variable-tuple
              (cond
               ((x-list-fonts "Hasklig") '(:font "Hasklig"))
               ((x-list-fonts "FiraCode Nerd Font") '(:font "FiraCode Nerd Font"))
               ((x-list-fonts "Adobe Myriad Pro") '(:font "Adobe Myriad Pro"))
               ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
               ((x-list-fonts "Verdana")         '(:font "Verdana"))
               ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
               (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))))

        (custom-theme-set-faces
         'user
         `(org-level-3 ((t (:height 1.1))))
         `(org-level-2 ((t (:height 1.1))))
         `(org-level-1 ((t (:height 1.1))))
         `(org-block ((t (:inherit (shadow fixed-pitch)))))
         `(org-code ((t (:inherit (shadow fixed-pitch)))))
         `(org-link ((t (:foreground "#83a598" :underline nil))))
         `(org-document-info ((t (:foreground "dark orange"))))
         `(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
         `(org-indent ((t (:inherit (org-hide fixed-pitch)))))
         `(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
         `(org-property-value ((t (:inherit fixed-pitch))) t)
         `(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
         `(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
         `(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
         `(org-verbatim ((t (:inherit (shadow fixed-pitch)))))

         `(org-document-title ((t (:height 1.2 :underline nil))))
         `(variable-pitch ((t (:family "FiraCode Nerd Font" :height 120 :weight thin))))
         `(fixed-pitch ((t ( :family "FiraCode Nerd Font" :height 120 :weight thin))))))

      (add-hook 'org-mode-hook 'variable-pitch-mode))
  #+END_SRC

* Work GTD

  I'm relying on a different system privatly than at work. I really
  want to have both systems separately. Here's my setup for work
  related GTD. (ripped off from:
  https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html -
  thanks!)

  #+begin_src elisp
    (setq org-agenda-files '("~/gtd/inbox.org"
                             "~/gtd/gtd.org"
                             "~/gtd/tickler.org"))

    (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                   (file+headline "~/gtd/inbox.org" "Tasks")
                                   "* TODO %i%?")
                                  ("T" "Tickler" entry
                                   (file+headline "~/gtd/tickler.org" "Tickler")
                                   "* %i%? \n %U")))

    (setq org-refile-targets '(("~/gtd/gtd.org" :maxlevel . 3)
                               ("~/gtd/someday.org" :level . 1)
                               ("~/gtd/tickler.org" :maxlevel . 2)))

    (setq org-todo-keywords '((sequence "TODO(t)" "ACTION(t)" "WAITING(w)" "|" "DONE(d)" "DELIGATED(e)" "CANCELLED(c)")))

    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)

    (setq org-agenda-block-separator (string-to-char " "))
    (setq org-agenda-hidden-separator "@-@")

    (setq org-agenda-custom-commands
          '(("o" "My Agenda"
             ((todo "TODO" (
                            (org-agenda-overriding-header "‚ö° Do Today:\n")
                            (org-agenda-remove-tags t)
                            (org-agenda-prefix-format "  %-2i %-13b"),
                            (org-agenda-todo-keyword-format "")))
              (agenda "" (
                          (org-agenda-start-day "+0d")
                          (org-agenda-span 5)
                          (org-agenda-overriding-header "‚ö° Schedule:\n")
                          (org-agenda-repeating-timestamp-show-all nil)
                          (org-agenda-remove-tags t)
                          (org-agenda-prefix-format "  %-3i  %-15b%t %s")
                          ;; (concat "  %-3i  %-15b %t%s" org-agenda-hidden-separator))
                          (org-agenda-todo-keyword-format " ‚òê ")
                          (org-agenda-current-time-string "‚Æú‚îà‚îà‚îà‚îà‚îà‚îà‚îà now")
                          ;; (org-agenda-scheduled-leaders '("" ""))
                          ;; (org-agenda-deadline-leaders '("" ""))
                          (org-agenda-time-grid (quote ((daily today remove-match) (0900 1200 1800 2100) "      " "‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà")))))))))
  #+end_src

* Closing

  #+BEGIN_SRC elisp
    (provide 'init-org)
  #+END_SRC

#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-org.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
