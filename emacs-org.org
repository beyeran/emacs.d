#+TITLE:  Org Configuration File
#+AUTHOR: Andr√© P. Beyer
#+EMAIL:  mail@beyeran.site

* Exporting Behaviour
** Export Tables

   I want an additional way to export tables. I have to export tables
   to JIRA on a regular basis. The desired output format is quite
   similar to the one org-mode is using naturally but I want to use a
   different kind of quoting: every cell should be surrounded by
   ={noformat}= strings (on both sides).

   #+BEGIN_SRC elisp
   (defun orgtbl-to-jira (table params)
     "Convert the ortbl-mode table to a JIRA output format quoting every cell."
     (orgtbl-to-generic
      table
      (org-combine-plists '(:sep "\|"
                                 :fmt "{noformat}%s{noformat}"
                                 :lstart "\|"
                                 :lend "\|")
                          params)))
   #+END_SRC

** Latex

   #+BEGIN_SRC elisp
     (setq org-latex-pdf-process '("xelatex -quiet -shell-escape %f"))
   #+END_SRC

** Latex Export Template

   #+BEGIN_SRC elisp
     (with-eval-after-load 'ox-latex
       (add-to-list 'org-latex-classes
                    '("article"
                      "% -------------------
     % Packages
     % -------------------
     \\documentclass[11pt,a4paper]{article}
     \\usepackage[utf8x]{inputenc}
     \\usepackage[T1]{fontenc}
     \\usepackage{mathptmx} % Use Times Font


     \\usepackage[pdftex]{graphicx} % Required for including pictures
     \\usepackage[swedish]{babel} % Swedish translations
     \\usepackage[pdftex,linkcolor=black,pdfborder={0 0 0}]{hyperref} % Format links for pdf
     \\usepackage{calc} % To reset the counter in the document after title page
     \\usepackage{enumitem} % Includes lists

     \\frenchspacing % No double spacing between sentences
     \\linespread{1.2} % Set linespace
     \\usepackage[a4paper, lmargin=0.1666\\paperwidth, rmargin=0.1666\\paperwidth, tmargin=0.1111\\paperheight, bmargin=0.1111\\paperheight]{geometry} %margins

     \\usepackage[all]{nowidow} % Tries to remove widows
     \\usepackage[protrusion=true,expansion=true]{microtype} % Improves typography, load after fontpackage is selected
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

       (add-to-list 'org-latex-classes
                    '("exercise"
                      "\\documentclass[english]{article}
     \\usepackage[T1]{fontenc}
     \\usepackage[utf8]{inputenc}
     \\usepackage{geometry}
     \\geometry{verbose,tmargin=1cm,bmargin=2cm,lmargin=1cm,rmargin=1cm}
     \\setlength{\\parindent}{0bp}
     \\usepackage{amsmath}
     \\usepackage{amssymb}
     \\PassOptionsToPackage{normalem}{ulem}
     \\usepackage{ulem}
     \\usepackage{amsthm}
     \\usepackage{polynom}
     \\usepackage{mathtools}
     \\newcommand{\\rowoperation}[1]{\\xrightarrow{{#1}}}
     \\renewcommand\\qedsymbol{$\\blacksquare$}
     \\addto\\captionsgerman{\\renewcommand\\proofname{}}
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
   #+END_SRC

** Blog

   I'd really wanted to use a native org-mode blog engine. There are
   several, I know, but none of theme seems to have nice themes for
   exporting. I'm not a designer. I want something done and just write
   my text in org-mode. I haven't found a solution to this. Since Hugo
   has nice themes and seems to be very widepsread, I've used that.

   #+begin_src elisp
     (use-package ox-hugo
       :ensure t
       :after ox)
   #+end_src


* Literate Programming
** JIRA

   We havily rely on JIRA and the markup is a pain in the ass. I like
   to write =org= files first and them export them to JIRA.

   #+BEGIN_SRC elisp
     (use-package ox-jira
       :ensure t
       :init
       (setq org-export-copy-to-kill-ring 'if-interactive))
   #+END_SRC

   #+BEGIN_SRC elisp
     (defun apb/ox-jira-export-block (export-block contents info)
       "Transcode an EXPORT-BLOCK element from Org to Jira.

     In this case, the contents of the block should not be altered by the
     rest of the markup. This allows {panel} and other constructs to be
     exported correctly."
       (format "%s" (org-element-property :value export-block)))

     (defun apb/ox-jira-export-as-jira
         (&optional async subtreep visible-only body-only ext-plist)
       "This is just an extention of `ox-jira-export-as-jira' to support
     export-blocks."
       (interactive)
       (org-export-to-buffer 'apb-jira "*Org APB JIRA Export*"
         async subtreep visible-only body-only ext-plist))

     (org-export-define-derived-backend 'apb-jira 'jira
       :translate-alist '((export-block . apb/ox-jira-export-block))
       :menu-entry
       '(?j 1 ((?a "As APB JIRA buffer" apb/ox-jira-export-as-jira))))
   #+END_SRC

** PlantUML

   #+BEGIN_SRC elisp
     (use-package plantuml-mode
       :ensure t
       :init
       (setq org-plantuml-jar-path
           (expand-file-name "~/bin/plantuml.jar")))
   #+END_SRC

** General Babel And Loading

   Even though I'm very sparingly commenting, I like the idea.

   #+BEGIN_SRC elisp
     (use-package org
       :config
       (use-package org-tempo)

       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((shell      . t)
                                      (java       . t)
                                      (ditaa      . t)
                                      (emacs-lisp . t)
                                      (plantuml   . t)
                                      (dot        . t)
                                      (python     . t))))
   #+END_SRC

* Presentations
** Reveal.js

   #+BEGIN_SRC elisp
     (use-package ox-reveal
       :init
       (load-library "ox-reveal")
       :config
       (on-linux
        (setq org-reveal-root "file:///home/beyeran/opt/reveal.js-3.8.0/"))
       (on-win
        (setq org-reveal-root "file://C:/Users/andre.beyer/OneDrive/OneDrive - Nuance/reveal.js")))
   #+END_SRC

* Task Planning

  #+BEGIN_SRC elisp
    (defun apb/task-ptncs-row-convert (&optional arg)
      "Convert a copy and pasted PTNCS signature table row to org-table.

    E.g.:

    device	start the [heater]<device>

    =>

      | signature__device | start the [heater]<device> |

    "
      (interactive "p")
      (kmacro-exec-ring-item
       (quote
        ([tab 124 32 115 105 103 110 97 116 117 114 101 95 95 95 19 17
              tab return backspace backspace 32 124 32 5 32 124 1 14] 0 "%d"))
       arg))

    (defun apb/export-tables-from-file (filepath)
      "Exports all tables at a given path. 

    See `apb/export-tables' for further information."
      (interactive "fPath: ")
      (let ((visited-p (find-buffer-visiting (expand-file-name filepath)))
            (filename (file-name-nondirectory filepath))
            to-be-removed)
        (save-window-excursion
          (find-file filepath)
          (setq to-be-removed (current-buffer))
          (save-excursion
            (beginning-of-buffer)
            (while (search-forward-regexp "#\\+NAME: +" nil t)
              (let* ((starting-point (point))
                     (ending-point (progn (org-end-of-line)
                                          (point)))
                     (current-name (buffer-substring-no-properties starting-point
                                                                   ending-point)))
                (message (format "%s" current-name))
                (next-line)
                (when (org-table-p)
                  (org-table-align)
                  (message (format "foo: '%s'\nbar: '%s'"
                                   (file-name-sans-extension filename)
                                   current-name))
                  (org-table-export (format "%s_%s.csv"
                                            (file-name-sans-extension filename)
                                            current-name)
                                    "orgtbl-to-csv"))))))
        (unless visited-p
          (kill-buffer to-be-removed))))

    (defun apb/export-tables ()
      "Exports all tables inside the current buffer"
      (interactive)
      (save-excursion
        (beginning-of-buffer)
        (while (search-forward-regexp "#\\+NAME: +" nil t)
        (let* ((starting-point (point))
               (ending-point (progn (org-end-of-line)
                                    (point)))
               (current-name (buffer-substring-no-properties starting-point
                                                             ending-point)))
          (next-line)
          (when (org-table-p)
            (org-table-align)
            (org-table-export (format "%s_%s.csv"
                                      (file-name-sans-extension (buffer-name))
                                      current-name)
                              "orgtbl-to-csv"))))))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun apb/export-table (name column1 column2)
      "Exports a named org-mode table into a jira-markdown format.

    This is to be used while task planning. Start with a a table
    looking like this:

    ,#+NAME: example_name
    | Requested AppSpec Signature | Example AppSpec Sentence | AnnoSpec Signature | Example AnnoSpec Sentence |
    |-----------------------------+--------------------------+--------------------+---------------------------|

    The `example_name' should used for the `name' argument. Only
    two columns will be kept: `column1' and `column2' which is a
    number specifying which. NOTE: It starts with 0!

    Use this within a jira-markdown mode source block, with
    :noweb enabled to export the above `org-table' to the JIRA
    format like this:

    ,#+BEGIN_SRC jira-markup :noweb yes :exports both :tangle test.jira
      <<export-jira-signature-conversion-table(\"example_name\" 0 1)>>
    ,#+END_SRC

    CAVEAT:
    This function needs to be imported as source block in order to be
    executed as stated above:

    ,#+NAME: export-jira-signature-example-table
    ,#+BEGIN_SRC elisp :var name=\"\" :exports none
      (apb/export-table name 0 1)
    ,#+END_SRC
    "
      (cl-assert (< column1 column2))
      (let* ((table (save-excursion
                      (org-link-search name)
                      (next-line)
                      (org-cycle)
                      (org-table-align)
                      (org-table-to-lisp)))
             (reduced-table (mapcar (lambda (n) (if (listp n)
                                               (list (nth column1 n)
                                                     (nth column2 n))
                                             n))
                                    table)))
        (format "||%s||\n%s"
                (string-join (car (seq-take-while 'listp reduced-table)) "||")
                (string-join
                 (mapcar (lambda (n) (format "|{noformat}%s{noformat}|"
                                        (string-join n "{noformat}|{noformat}")))
                         (cdr (seq-drop-while 'listp reduced-table)))
                 "\n"))))

    (defun apb/export-jira-signature-example-table (name)
      "Exports the first and second row of a `org-table' into the `jira-markup' format.
    For the usage, please see `apb/export-table'."
      (apb/export-table name 0 1))

    (defun apb/export-jira-signature-conversion-table (name)
      "Exports the first and third row of a `org-table' into the `jira-markup' format.
    For the usage, please see `apb/export-table'."
      (apb/export-table name 0 2))
  #+END_SRC

* Looks
  Bullets

  #+BEGIN_SRC elisp
    (use-package org-bullets
      :ensure t
      :init (add-hook 'org-mode-hook 'org-bullets-mode))
  #+END_SRC

  Hiding those emphasis markers, like /foo/ or =baz=.

  #+BEGIN_SRC elisp
    (setq org-hide-emphasis-markers t)
  #+END_SRC

  Having nicer bullets (since the org-bullet package seems not
  supported anymore:

  #+BEGIN_SRC elisp
    (font-lock-add-keywords 'org-mode
                            '(("^ +\\([-*]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))
  #+END_SRC

* Looks

  #+begin_src elisp
    (let* ((base-font-color (face-foreground 'default nil 'default))
           (headline        `(:inherit default :weight bold :foreground ,base-font-color)))

      (custom-theme-set-faces 'user
                              `(org-level-8 ((t (,@headline ,@apb/variable-font-tuple))))
                              `(org-level-7 ((t (,@headline ,@apb/variable-font-tuple))))
                              `(org-level-6 ((t (,@headline ,@apb/variable-font-tuple))))
                              `(org-level-5 ((t (,@headline ,@apb/variable-font-tuple))))
                              `(org-level-4 ((t (,@headline ,@apb/variable-font-tuple :height 1.1))))
                              `(org-level-3 ((t (,@headline ,@apb/variable-font-tuple :height 1.25))))
                              `(org-level-2 ((t (,@headline ,@apb/variable-font-tuple :height 1.5))))
                              `(org-level-1 ((t (,@headline ,@apb/variable-font-tuple :height 1.75))))
                              `(org-document-title ((t (,@headline ,@apb/variable-font-tuple :height 1.5 :underline nil))))))
  #+end_src

* Closing

  #+BEGIN_SRC elisp
    (provide 'init-org)
  #+END_SRC

#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-org.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
