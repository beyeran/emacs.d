#+TITLE:  Org Configuration File
#+AUTHOR: André P. Beyer
#+EMAIL:  mail@beyeran.site

* Exporting Behaviour
** Export Tables

   I want an additional way to export tables. I have to export tables
   to JIRA on a regular basis. The desired output format is quite
   similar to the one org-mode is using naturally but I want to use a
   different kind of quoting: every cell should be surrounded by
   ={noformat}= strings (on both sides).

   #+BEGIN_SRC elisp
   (defun orgtbl-to-jira (table params)
     "Convert the ortbl-mode table to a JIRA output format quoting every cell."
     (orgtbl-to-generic
      table
      (org-combine-plists '(:sep "\|"
                                 :fmt "{noformat}%s{noformat}"
                                 :lstart "\|"
                                 :lend "\|")
                          params)))
   #+END_SRC

** Latex

   #+BEGIN_SRC elisp
     (setq org-latex-pdf-process '("xelatex -quiet -shell-escape %f"))
   #+END_SRC

** Latex Export Template

   #+BEGIN_SRC elisp
     (with-eval-after-load 'ox-latex
       (add-to-list 'org-latex-classes
                    '("article"
                      "% -------------------
     % Packages
     % -------------------
     \\documentclass[11pt,a4paper]{article}
     \\usepackage[utf8x]{inputenc}
     \\usepackage[T1]{fontenc}
     \\usepackage{mathptmx} % Use Times Font


     \\usepackage[pdftex]{graphicx} % Required for including pictures
     \\usepackage[swedish]{babel} % Swedish translations
     \\usepackage[pdftex,linkcolor=black,pdfborder={0 0 0}]{hyperref} % Format links for pdf
     \\usepackage{calc} % To reset the counter in the document after title page
     \\usepackage{enumitem} % Includes lists

     \\frenchspacing % No double spacing between sentences
     \\linespread{1.2} % Set linespace
     \\usepackage[a4paper, lmargin=0.1666\\paperwidth, rmargin=0.1666\\paperwidth, tmargin=0.1111\\paperheight, bmargin=0.1111\\paperheight]{geometry} %margins

     \\usepackage[all]{nowidow} % Tries to remove widows
     \\usepackage[protrusion=true,expansion=true]{microtype} % Improves typography, load after fontpackage is selected
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

       (add-to-list 'org-latex-classes
                    '("exercise"
                      "\\documentclass[english]{article}
     \\usepackage[T1]{fontenc}
     \\usepackage[utf8]{inputenc}
     \\usepackage{geometry}
     \\geometry{verbose,tmargin=1cm,bmargin=2cm,lmargin=1cm,rmargin=1cm}
     \\setlength{\\parindent}{0bp}
     \\usepackage{amsmath}
     \\usepackage{amssymb}
     \\PassOptionsToPackage{normalem}{ulem}
     \\usepackage{ulem}
     \\usepackage{amsthm}
     \\usepackage{polynom}
     \\usepackage{mathtools}
     \\newcommand{\\rowoperation}[1]{\\xrightarrow{{#1}}}
     \\renewcommand\\qedsymbol{$\\blacksquare$}
     \\addto\\captionsgerman{\\renewcommand\\proofname{}}
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
   #+END_SRC

* Literate Programming
** JIRA

   We havily rely on JIRA and the markup is a pain in the ass. I like
   to write =org= files first and them export them to JIRA.

   #+BEGIN_SRC elisp
     (use-package ox-jira
       :ensure t
       :init
       (setq org-export-copy-to-kill-ring 'if-interactive))
   #+END_SRC

   #+BEGIN_SRC elisp
     (defun apb/ox-jira-export-block (export-block contents info)
       "Transcode an EXPORT-BLOCK element from Org to Jira.

     In this case, the contents of the block should not be altered by the
     rest of the markup. This allows {panel} and other constructs to be
     exported correctly."
       (format "%s" (org-element-property :value export-block)))

     (defun apb/ox-jira-export-as-jira
         (&optional async subtreep visible-only body-only ext-plist)
       "This is just an extention of `ox-jira-export-as-jira' to support
     export-blocks."
       (interactive)
       (org-export-to-buffer 'apb-jira "*Org APB JIRA Export*"
         async subtreep visible-only body-only ext-plist))

     (org-export-define-derived-backend 'apb-jira 'jira
       :translate-alist '((export-block . apb/ox-jira-export-block))
       :menu-entry
       '(?j 1 ((?a "As APB JIRA buffer" apb/ox-jira-export-as-jira))))
   #+END_SRC

** PlantUML

   #+BEGIN_SRC elisp
     (use-package plantuml-mode
       :ensure t
       :init
       (setq org-plantuml-jar-path
           (expand-file-name "~/bin/plantuml.jar")))
   #+END_SRC

** General Babel And Loading

   Even though I'm very sparingly commenting, I like the idea.

   #+BEGIN_SRC elisp
     (use-package org
       :config
       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((shell      . t)
                                      (ditaa      . t)
                                      (emacs-lisp . t)
                                      (plantuml   . t)
                                      (dot        . t)
                                      (python     . t))))
   #+END_SRC

* Presentations
** Reveal.js

   #+BEGIN_SRC elisp
     (use-package ox-reveal
       :init
       (load-library "ox-reveal")
       :config
       (on-linux
        (setq org-reveal-root "file:///home/beyeran/opt/reveal.js-3.8.0/"))
       (on-win
        (setq org-reveal-root "file://C:/Users/andre.beyer/OneDrive/OneDrive - Nuance/reveal.js")))
   #+END_SRC

* Task Planning

  #+BEGIN_SRC elisp
    (defun task/ptncs-row-convert (&optional arg)
      "Convert a copy and pasted PTNCS signature table row to org-table.

    E.g.:

    device	start the [heater]<device>

    =>

      | signature__device | start the [heater]<device> |

    "
      (interactive "p")
      (kmacro-exec-ring-item
       (quote
        ([tab 124 32 115 105 103 110 97 116 117 114 101 95 95 95 19 17
              tab return backspace backspace 32 124 32 5 32 124 1 14] 0 "%d"))
       arg))
  #+END_SRC

* Looks
  Bullets

  #+BEGIN_SRC elisp
    (use-package org-bullets
      :ensure t
      :init (add-hook 'org-mode-hook 'org-bullets-mode))
  #+END_SRC

  Hiding those emphasis markers, like /foo/ or =baz=.

  #+BEGIN_SRC elisp
    (setq org-hide-emphasis-markers t)
  #+END_SRC

  Having nicer bullets (since the org-bullet package seems not
  supported anymore:

  #+BEGIN_SRC elisp
    (font-lock-add-keywords 'org-mode
                            '(("^ +\\([-*]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  #+END_SRC

* Closing

  #+BEGIN_SRC elisp
    (provide 'init-org)
  #+END_SRC

#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-org.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
